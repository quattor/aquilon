#! /usr/bin/env python

import sys
import os
import ms.version
import getopt

ms.version.addpkg('setuptools', '0.6c11')
ms.version.addpkg('protobuf', '2.3.0')

from google.protobuf.text_format import PrintMessage

BINDIR = os.path.dirname(os.path.realpath(__file__))
SRCDIR = os.path.join(BINDIR, "..")
sys.path.append(os.path.join(SRCDIR, "lib", "python2.6"))

if not os.environ.get("AQDCONF"):
    os.environ["AQDCONF"] = os.path.join(SRCDIR, "etc", "aqd.conf.defaults")

from aquilon.config import Config

config = Config()
sys.path.append(config.get("protocols", "directory"))

import aqddnsdomains_pb2
import aqdsystems_pb2
import aqdnetworks_pb2
import aqdservices_pb2
import aqddnsdomains_pb2
import aqdlocations_pb2
import aqdaudit_pb2
import aqdparamdefinitions_pb2
import aqdparameters_pb2


def usage():
    print >>sys.stderr, """
    %s [--help] [--file INPUT] --type TYPE

    --help      this message
    --file      input file containing the message, default: stdin
    --type      type of the message

    Example: aq show network --ip 1.2.3.4 --format proto | %s --type network
""" % (sys.argv[0], sys.argv[0])

try:
    opts, args = getopt.getopt(sys.argv[1:], "f:ht:",
                               ["file=", "help", "type="])
except getopt.GetoptError, e:
    print >>sys.stderr, str(e)
    usage()
    sys.exit(2)

typemap = {
    "dns_domain": aqddnsdomains_pb2.DNSDomainList(),
    "host": aqdsystems_pb2.HostList(),
    "cluster": aqdsystems_pb2.ClusterList(),
    "personality": aqdsystems_pb2.PersonalityList(),
    "operating_system": aqdsystems_pb2.OperatingSystemList(),
    "network": aqdnetworks_pb2.NetworkList(),
    "service": aqdservices_pb2.ServiceList(),
    "service_map": aqdservices_pb2.ServiceMapList(),
    "location": aqdlocations_pb2.LocationList(),
    "transaction": aqdaudit_pb2.TransactionList(),
    "parameter": aqdparameters_pb2.ParameterList(),
    "parameter_definition": aqdparamdefinitions_pb2.ParamDefinitionList()
}

input = sys.stdin
msg = None

for opt, arg in opts:
    if opt in ("-f", "--file"):
        input = open(arg)
    elif opt in ("-h", "--help"):
        usage()
        sys.exit(0)
    elif opt in ("-t", "--type"):
        if arg not in typemap:
            assert False, "unknown type %s" % arg
        msg = typemap[arg]
    else:
        assert False, "unhandled option '%s'" % opt

if not msg:
    assert False, "type not specified"

raw_msg = input.read()
msg.ParseFromString(raw_msg)
PrintMessage(msg, sys.stdout)
