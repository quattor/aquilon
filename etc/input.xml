<?xml version="1.0" encoding="UTF-8"?>
<commandline xmlns:xi="http://www.w3.org/2001/XInclude">
    %prog command [subcommand] options
    <command name="*">
	<optgroup>
	    <!-- Note: "verbose" and "quiet" are handled specially in the code;
		 do not use "conflicts" here -->
	    <option name="verbose" short="v" type="flag" default="True">
		Verbose mode.  Contact the broker for out of band status messages
		about the request while it is being processed.  These messages
		are printed on stderr.
	    </option>
	    <option name="quiet" short="q" type="flag">
		Turn off verbose mode.  Do not make a secondary request to
		the broker for out of band status messages.
	    </option>
	    <option name="partialok" type="boolean">
		For any command that returns status 207 (MULTI_STATUS) indicating
		some success and some failure, exit with status code 0 instead of
		exit code 2.  Warning messages will still go to stderr.
	    </option>
	    <option name="debug" short="d" type="boolean">
		Generate debug statements sent to stderr.  Some commands may
		also increase output from the server on stdout.
	    </option>
	    <option name="httpinfo" short="u" type="boolean">
		Show the URL being accessed and the response code.
		Implied by --debug.
	    </option>
	    <option name="format" short="f" type="string">
		Specify output format as raw (default) or html.
	    </option>
	    <option name="auth" type="boolean" conflicts="usesock" default="True">
		Connect to aqport using knc for authentication.
	    </option>
	    <option name="exec" type="boolean" default="True">
		Run any commands that the server sends back.
	    </option>
	    <option name="usesock" type="string" conflicts="noauth">
		Connect directly (noauth) to the given unix socket.
	    </option>
	    <option name="slowstatus" type="boolean" conflicts="quiet">
		Request status messages from the server only after the
		original request completes.  This is only meant to be used
		for aqd development with a broker running with a sqlite database.
	    </option>
	    <option name="aqport" type="int">
		Server port to connect to.
	    </option>
	    <option name="aqhost" type="string">
		Name of the server to connect to.
	    </option>
	    <option name="aquser" type="string" conflicts="aqservice">
		[Deprecated] Name of the kerberos service principal to authenticate to the server.
		Use aqservice instead.
	    </option>
	    <option name="aqservice" type="string" conflicts="aquser">
		Name of the kerberos service principal to authenticate to the server.
		Should default correctly, only useful for development.
	    </option>
	    <option name="aqconf" type="string" conflicts="aqservice aquser aqport aqhost">
		Pass a config file to client which indicates the broker to connect too.
		Should default correctly, only useful for development.
	    </option>
	</optgroup>
    </command>

    <command name="status">
	Shows the current server status.
	<transport method="get" path="status/server"/>
    </command>

    <command name="ping">
	Simple test that the broker can respond.
	<transport method="get" path="status/ping"/>
    </command>

    <command name="show_active_commands">
	Show any active commands currently running on the broker.
	<p/>
	In this version, the command does not make a database connection
	and relies on in memory knowledge of running commands.  This
	behavior may change in a future version.
	<transport method="get" path="status/active_commands"/>
    </command>

    <command name="show_active_locks">
	Show any active locks currently held by broker commands.
	<p/>
	In this version, the command does not make a database connection
	and relies on in memory knowledge of acquired locks.  This
	behavior may change in a future version.
	<transport method="get" path="status/active_locks"/>
    </command>

    <command name="show_request">
	Show any status messages for the given request.
	<p/>
	The request can be identified by either the request id generated by
	the client when a request is initiated or by the audit id generated
	by the server when a request comes in.
	<optgroup mandatory="True" fields="one">
	    <option name="requestid" type="string">Client-created Request ID</option>
	    <option name="auditid" type="string">Server-created Audit ID</option>
	</optgroup>
	<transport method="get" path="status/requestid/%(requestid)s"/>
	<transport method="get" trigger="auditid" path="status/auditid/%(auditid)s"/>
    </command>

    <command name="flush">
	Force the server to (re)write the plenary templates
	based on the current information in AQDB. This is intended to
	be used when re-creating the server state after a rebuild, or
	when upgrading the broker.
	<p/>
	Requires aqd_admin entitlement.
	<p/>
	Without arguments, no templates are selected for flushing. Use
	either --all to select all templates, or specify which groups
	of templates to flush by combining arguments. For example, "flush
	--hosts --machines" would flush all the host and machine templates
	but would leave all other plenary templates alone.
	<p/>
	The command will return success if all templates selected were
	written without error. The command will return partial success if
	any templates could not be written. The output of the command indicates
	how many templates were successfully written and how many templates
	were selected. For example "flushed 10/10 templates" would indicate
	that 10 templates matched and they were all written out successfully.
	<optgroup mandatory="True">
	    <option name="hosts" type="flag">flush the host templates</option>
	    <option name="machines" type="flag">flush the machine templates</option>
	    <option name="personalities" type="flag">flush the personality templates</option>
	    <option name="clusters" type="flag">flush the cluster templates</option>
	    <option name="services" type="flag">flush the service templates</option>
	    <option name="resources" type="flag">flush the resource templates</option>
	    <option name="locations" type="flag">flush templates related to locations. This is only cities for now</option>
	    <option name="networks" type="flag">flush templates related to networks</option>
	    <option name="network_devices" type="flag">flush templates related to network devices</option>
	    <option name="virtual_switches" type="flag">flush templates of virtual switches</option>
	    <option name="all" type="flag">flush all templates</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="command/flush"/>
    </command>

    <command name="show_host">
	Shows the complete configuration for a given host. If the '--all' option
	is provided, then the command simply outputs a listing of all known hostnames.
	<optgroup mandatory="True" fields="one">
	    <option name="hostname" type="string">Host name</option>
	    <option name="list" type="list">Host list</option>
	    <option name="all" type="flag">Select all hosts</option>
	</optgroup>
	<optgroup>
	    <option name="grns" type="flag" conflicts="list all">Shows grns</option>
	</optgroup>
	<transport trigger="all" method="get" path="host"/>
	<!-- "list" needs to be POST, because the value may be too big for GET -->
	<transport trigger="list" method="post" path="host"/>
	<transport trigger="hostname" method="get" path="host/%(hostname)s"/>
	<transport trigger="grns" method="get" path="host/%(hostname)s/grns"/>
	<format name="proto">
	    <message_class name="HostList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="show_fqdn">
	This command is deprecated.  Please use search_dns instead.
	<p/>
	Shows any information available for the fqdn.  This could be a host,
	a top of rack switch, a chassis, or any other system tracked by
	AQDB.
	<optgroup mandatory="True" fields="one">
	    <option name="fqdn" type="string">full qualified domain name</option>
	    <option name="all" type="flag">select all systems</option>
	</optgroup>
	<optgroup>
	    <option name="dns_environment" type="string">The name of the environment the address is in (defaults to 'internal')</option>
	</optgroup>
	<transport trigger="all" method="get" path="system"/>
	<transport trigger="fqdn" method="get" path="system/%(fqdn)s"/>
    </command>

    <command name="search_hardware">
	Shows any information available for the matching hardware.  These
	could be machines, top of rack switches, chassis, or any other hardware
	tracked by AQDB.
	<p/>
	Note that location searches are inclusive.  That is, searching for a
	building will include all racks, rooms, etc. inside the building.  The
	--exact_location option can be used to override this behavior.
	<optgroup mandatory="True">
	    <option name="model" type="string">model name</option>
	    <option name="machine_type" type="enum" enum="MachineType">machine type for the model (blade, virtual_machine, etc.)</option>
	    <option name="vendor" type="string">vendor name</option>
	    <option name="ip" type="ipv4" conflicts="networkip">IP address</option>
	    <option name="networkip" type="ipv4" conflicts="ip">Network IP address</option>
	    <option name="network_environment" type="string">Network environment (default: internal)</option>
	    <option name="mac" type="mac">MAC address of an attached interface</option>
	    <option name="pg" type="string">port group of an attached interface</option>
	    <option name="interface_name" type="string">Having an interface of the given name</option>
	    <option name="interface_model" type="string">Having an interface of the given model</option>
	    <option name="interface_vendor" type="string">Having an interface of the given vendor</option>
	    <option name="interface_bus_address" type="string">Interface at the given bus address</option>
	    <option name="serial" type="string">serial number</option>
	    <optgroup fields="one">
		<option name="organization" type="string">Organization</option>
		<option name="hub" type="string">Hub</option>
		<option name="continent" type="string">Continent</option>
		<option name="country" type="string">Country</option>
		<option name="campus" type="string">Campus</option>
		<option name="city" type="string">City</option>
		<option name="building" type="string">Building</option>
		<option name="room" type="string">Room</option>
		<option name="bunker" type="string">Bunker</option>
		<option name="rack" type="string">Rack</option>
		<option name="desk" type="string">Desk</option>
	    </optgroup>
	    <option name="exact_location" type="flag">match the location exactly</option>
	    <option name="all" type="flag">list all hardware</option>
	</optgroup>
	<optgroup>
	    <option name="fullinfo" type="flag">show full information for the matching hardware</option>
	</optgroup>
	<transport method="get" path="find/hardware"/>
    </command>

    <command name="search_machine">
	Shows any information available for machine hardware.
	<p/>
	(See search_hardware for a more general hardware search.)
	<p/>
	Note that location searches are inclusive.  That is, searching for a
	building will include all racks, rooms, etc. inside the building.  The
	--exact_location option can be used to override this behavior.
	<optgroup mandatory="True">
	    <option name="hostname" type="string">host name</option>
	    <option name="machine" type="string">machine name (exact)</option>
	    <option name="cpuname" type="string">cpu name</option>
	    <option name="cpuvendor" type="string">cpu vendor</option>
	    <option name="cpucount" type="int">cpu count</option>
	    <option name="memory" type="int">memory in MB</option>
	    <optgroup fields="one">
		<option name="cluster" type="string">Cluster name hosting the VM</option>
		<option name="metacluster" type="string">Metacluster name hosting the VM</option>
		<option name="vmhost" type="string">Hypervisor host name</option>
	    </optgroup>
	    <option name="model" type="string">model name</option>
	    <option name="machine_type" type="enum" enum="MachineType">machine type for the model (blade, virtual_machine, etc.)</option>
	    <option name="vendor" type="string">vendor name</option>
	    <option name="ip" type="ipv4" conflicts="networkip">IP address</option>
	    <option name="networkip" type="ipv4" conflicts="ip">Network IP address</option>
	    <option name="network_environment" type="string">Network environment (default: internal)</option>
	    <option name="mac" type="mac">MAC address of an attached interface</option>
	    <option name="interface_name" type="string">Having an interface of the given name</option>
	    <option name="interface_model" type="string">Having an interface of the given model</option>
	    <option name="interface_vendor" type="string">Having an interface of the given vendor</option>
	    <option name="interface_bus_address" type="string">Interface at the given bus address</option>
	    <option name="pg" type="string">port group of an attached interface</option>
	    <option name="serial" type="string">serial number</option>
	    <option name="uuid" type="uuid">Machine UUID</option>
	    <option name="disk_name" type="string">Disk name</option>
	    <option name="disk_size" type="int">Disk size</option>
	    <option name="disk_controller" type="string">Disk controller</option>
	    <option name="disk_address" type="string">SCSI bus addresst</option>
	    <option name="disk_bus_address" type="string">Controller bus addresst</option>
	    <option name="disk_wwn" type="string">Disk WWN</option>
	    <option name="disk_share" type="string" conflicts="disk_filesystem">NAS share backing the virtual disk image</option>
	    <option name="disk_filesystem" type="string" conflicts="disk_share">Filesystem name backing the virtual disk image</option>
	    <option name="share" type="string">DEPRECATED. Share in use by a virtual machine</option>
	    <optgroup fields="one">
		<option name="organization" type="string">Organization</option>
		<option name="hub" type="string">Hub</option>
		<option name="continent" type="string">Continent</option>
		<option name="country" type="string">Country</option>
		<option name="campus" type="string">Campus</option>
		<option name="city" type="string">City</option>
		<option name="building" type="string">Building</option>
		<option name="room" type="string">Room</option>
		<option name="bunker" type="string">Bunker</option>
		<option name="rack" type="string">Rack</option>
		<option name="desk" type="string">Desk</option>
	    </optgroup>
	    <option name="exact_location" type="flag">match the location exactly</option>
	    <option name="chassis" type="string">Chassis name</option>
	    <option name="slot" type="int">Chassis slot number</option>
	    <option name="used" type="boolean" reverse="unused">Machine is used by a host</option>
	</optgroup>
	<format name="proto">
	    <message_class name="MachineList" module="aqdsystems_pb2"/>
	</format>
	<optgroup>
	    <option name="fullinfo" type="flag">show full information for the machine</option>
	</optgroup>
	<transport method="get" path="find/machine"/>
    </command>

    <command name="search_system">
	Shows any information available for the matching systems.  These
	could be hosts, top of rack switches, chassis, or any other system
	tracked by AQDB.
	<optgroup mandatory="True">
	    <option name="fqdn" type="string">fully qualified domain name</option>
	    <option name="dns_domain" type="string">DNS domain</option>
	    <option name="shortname" type="string">First segment of the fqdn</option>
	    <option name="type" type="enum" enum="HardwareEntityType">System type (host, chassis, switch, manager, auxiliary)</option>
	    <option name="ip" type="ipv4">IP address</option>
	    <option name="networkip" type="ipv4">Network IP address</option>
	    <option name="mac" type="mac">primary MAC address</option>
	</optgroup>
	<optgroup>
	    <option name="fullinfo" type="flag">show full information for the matching systems</option>
	</optgroup>
	<transport method="get" path="find/system"/>
    </command>

    <command name="search_cluster">
	Shows any information available for the matching clusters.
	<p/>
	<optgroup mandatory="True">
	    <option name="archetype" type="string">archetype</option>
	    <option name="buildstatus" type="string">buildstatus</option>
	    <option name="cluster_type" type="string">cluster type of archetype (compute)</option>
	    <option name="personality" type="string">personality</option>
	    <option name="personality_stage" requires="personality" type="string">Personality stage</option>
	    <option name="allowed_archetype" type="string">allowed_archetype</option>
	    <option name="allowed_personality" type="string">allowed_personality</option>
	    <option name="down_hosts_threshold" type="string">down_hosts_threshold</option>
	    <option name="down_maint_threshold" type="string">down_maint_threshold</option>
	    <option name="max_members" type="int">max_members</option>
	    <option name="grouped_with" type="string">Clusters grouped with the given cluster</option>
	    <option name="member_archetype" type="string">member_archetype</option>
	    <option name="member_hostname" type="string">member_hostname</option>
	    <option name="member_personality" type="string">member_personality</option>
	    <optgroup fields="one">
		<option name="domain" type="string">template domain</option>
		<option name="sandbox" type="string">Name of the sandbox (given as 'author/branch')</option>
		<option name="branch" type="string">template branch (either a domain or a sandbox)</option>
		<option name="sandbox_author" type="string">Author of the sandbox the cluster is in</option>
	    </optgroup>
	    <optgroup>
		<option name="cluster" type="string">cluster name</option>
		<option name="metacluster" type="string">metacluster name</option>
		<option name="esx_metacluster" type="string">[Deprecated] metacluster name</option>
		<option name="esx_virtual_machine" type="string">virtual machine label (evm1)</option>
		<option name="esx_guest" type="string">fully qualified host name of a virtual machine</option>
		<option name="service" type="string">client of service (single service only)</option>
		<option name="instance" type="string">client of service instance (single instance only)</option>
		<option name="share" type="string">Share used by the cluster</option>
		<option name="esx_switch" type="string">Select clusters bound to the given switch</option>
	    </optgroup>
	    <optgroup fields="one">
		<option name="cluster_organization" type="string">Cluster Organization</option>
		<option name="cluster_hub" type="string">Cluster Hub</option>
		<option name="cluster_continent" type="string">Cluster Continent</option>
		<option name="cluster_country" type="string">Cluster Country</option>
		<option name="cluster_campus" type="string">Cluster Campus</option>
		<option name="cluster_city" type="string">Cluster City</option>
		<option name="cluster_building" type="string">Cluster Building</option>
		<option name="cluster_room" type="string">Cluster Room</option>
		<option name="cluster_bunker" type="string">Bunker</option>
		<option name="cluster_rack" type="string">Cluster Rack</option>
		<option name="cluster_desk" type="string">Cluster Desk</option>
	    </optgroup>
	    <option name="cluster_exact_location" type="flag">match the cluster location exactly</option>
	    <optgroup fields="one">
		<option name="member_organization" type="string">member Organization</option>
		<option name="member_hub" type="string">member Hub</option>
		<option name="member_continent" type="string">member Continent</option>
		<option name="member_country" type="string">member Country</option>
		<option name="member_campus" type="string">member Campus</option>
		<option name="member_city" type="string">member City</option>
		<option name="member_building" type="string">member Building</option>
		<option name="member_room" type="string">member Room</option>
		<option name="member_bunker" type="string">Bunker</option>
		<option name="member_rack" type="string">member Rack</option>
		<option name="member_desk" type="string">member Desk</option>
	    </optgroup>
	    <option name="member_exact_location" type="flag">match the member location exactly</option>
	    <option name="preferred_building" type="string">look for clusters which have the preferred side override set to the given building</option>
	</optgroup>
	<optgroup>
	    <option name="fullinfo" type="flag">show full information for the matching hosts</option>
	</optgroup>
	<transport method="get" path="find/cluster"/>
	<format name="proto">
	    <message_class name="ClusterList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="search_metacluster">
	Shows any information available for the matching metaclusters.
	<p/>
	<optgroup mandatory="True">
	    <option name="archetype" type="string">archetype</option>
	    <option name="personality" type="string">personality</option>
	    <option name="personality_stage" requires="personality" type="string">Personality stage</option>
	    <option name="buildstatus" type="string">buildstatus</option>
	    <option name="allowed_archetype" type="string">allowed_archetype</option>
	    <option name="allowed_personality" type="string">allowed_personality</option>
	    <option name="max_members" type="int">max_members</option>
	    <option name="member_archetype" type="string">member_archetype</option>
	    <option name="member_cluster" type="string">member_cluster</option>
	    <option name="member_personality" type="string">member_personality</option>
	    <optgroup fields="one">
		<option name="domain" type="string">template domain</option>
		<option name="sandbox" type="string">Name of the sandbox (given as 'author/branch')</option>
		<option name="branch" type="string">template branch (either a domain or a sandbox)</option>
		<option name="sandbox_author" type="string">Author of the sandbox the cluster is in</option>
	    </optgroup>
	    <optgroup>
		<option name="metacluster" type="string">metacluster name</option>
		<option name="service" type="string">client of service (single service only)</option>
		<option name="instance" type="string">client of service instance (single instance only)</option>
		<option name="share" type="string">Share used by the metacluster</option>
	    </optgroup>
	    <optgroup fields="one">
		<option name="metacluster_organization" type="string">Cluster Organization</option>
		<option name="metacluster_hub" type="string">Cluster Hub</option>
		<option name="metacluster_continent" type="string">Cluster Continent</option>
		<option name="metacluster_country" type="string">Cluster Country</option>
		<option name="metacluster_campus" type="string">Cluster Campus</option>
		<option name="metacluster_city" type="string">Cluster City</option>
		<option name="metacluster_building" type="string">Cluster Building</option>
		<option name="metacluster_room" type="string">Cluster Room</option>
		<option name="metacluster_bunker" type="string">Bunker</option>
		<option name="metacluster_rack" type="string">Cluster Rack</option>
		<option name="metacluster_desk" type="string">Cluster Desk</option>
	    </optgroup>
	    <option name="metacluster_exact_location" type="flag">match the cluster location exactly</option>
	    <optgroup fields="one">
		<option name="member_organization" type="string">member Organization</option>
		<option name="member_hub" type="string">member Hub</option>
		<option name="member_continent" type="string">member Continent</option>
		<option name="member_country" type="string">member Country</option>
		<option name="member_campus" type="string">member Campus</option>
		<option name="member_city" type="string">member City</option>
		<option name="member_building" type="string">member Building</option>
		<option name="member_room" type="string">member Room</option>
		<option name="member_bunker" type="string">Bunker</option>
		<option name="member_rack" type="string">member Rack</option>
		<option name="member_desk" type="string">member Desk</option>
	    </optgroup>
	    <option name="member_exact_location" type="flag">match the member location exactly</option>
	</optgroup>
	<optgroup>
	    <option name="fullinfo" type="flag">show full information for the matching hosts</option>
	</optgroup>
	<transport method="get" path="find/metacluster"/>
	<format name="proto">
	    <message_class name="MetaClusterList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="search_host">
	Shows any information available for the matching hosts.
	<p/>
	Note that location searches are inclusive.  That is, searching for a
	building will include all racks, rooms, etc. inside the building.  The
	--exact_location option can be used to override this behavior.
	<optgroup mandatory="True">
	    <option name="hostname" type="string">Fully qualified domain name</option>
	    <option name="machine" type="string">Node name</option>
	    <option name="dns_domain" type="string">DNS domain</option>
	    <option name="shortname" type="string">First segment of the fqdn</option>
	    <option name="archetype" type="string">Archetype name</option>
	    <option name="buildstatus" type="string">Build status</option>
	    <option name="ip" type="ipv4">IP address</option>
	    <option name="networkip" type="ipv4">Network IP address</option>
	    <option name="network_environment" type="string">Network environment (default: internal)</option>
	    <option name="mac" type="mac">[Deprecated] MAC address</option>
	    <option name="personality" type="string">Personality</option>
	    <option name="personality_stage" requires="personality" type="string">Personality stage</option>
	    <option name="feature" type="string">Feature</option>
	    <option name="host_environment" type="string">Host environment</option>
	    <option name="osname" type="string">OS name</option>
	    <option name="osversion" type="string">OS version</option>
	    <option name="service" type="string">Client of service (single service only)</option>
	    <option name="instance" type="string">Client of service instance (single instance only)</option>
	    <option name="model" type="string">Machine model name</option>
	    <option name="machine_type" type="enum" enum="MachineType">Machine type for the model (blade, virtual_machine, etc.)</option>
	    <option name="vendor" type="string">Machine vendor name</option>
	    <option name="serial" type="string">Machine serial number</option>
	    <option name="cluster" type="string">Cluster or metacluster name</option>
	    <option name="cluster_archetype" type="string">Cluster archetype</option>
	    <option name="cluster_personality" type="string">Cluster personality</option>
	    <option name="metacluster" type="string">Metacluster name</option>
	    <option name="guest_on_cluster" type="string">Host is a virtual machine guest on this cluster</option>
	    <option name="guest_on_share" type="string">Host is a virtual machine using this share</option>
	    <option name="member_cluster_share" type="string">Host is a member of a cluster with machines using this share</option>
	    <option name="orphaned" type="flag">Host is a member of a sandbox without a valid owner</option>
	    <optgroup fields="one">
		<option name="domain" type="string">Template domain</option>
		<option name="sandbox" type="string">Name of the sandbox (given as 'author/branch')</option>
		<option name="branch" type="string">Template branch (either a domain or a sandbox)</option>
		<option name="sandbox_author" type="string">Author of the sandbox the host is in</option>
	    </optgroup>
	    <optgroup fields="one">
		<option name="organization" type="string">Organization</option>
		<option name="hub" type="string">Hub</option>
		<option name="continent" type="string">Continent</option>
		<option name="country" type="string">Country</option>
		<option name="campus" type="string">Campus</option>
		<option name="city" type="string">City</option>
		<option name="building" type="string">Building</option>
		<option name="room" type="string">Room</option>
		<option name="bunker" type="string">Bunker</option>
		<option name="rack" type="string">Rack</option>
		<option name="desk" type="string">Desk</option>
	    </optgroup>
	    <option name="server_of_service" type="string">Server of service (single service only)</option>
	    <option name="server_of_instance" type="string">Server of service instance (single instance only)</option>
	    <option name="exact_location" type="flag">Match the location exactly</option>
	    <option name="grn" type="string">Match by GRN</option>
	    <option name="eon_id" type="int">Match by EON ID</option>
	</optgroup>
	<optgroup>
	    <option name="fullinfo" type="flag">show full information for the matching hosts</option>
	</optgroup>
	<transport method="get" path="find/host"/>
	<format name="proto" >
	    <message_class name="HostList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="search_esx_cluster">
	Shows any information available for the matching ESX clusters.
	<p/>
	There are three sets of parameters: 1 - those that match directly
	against the cluster (name, domain, cluster_building, etc.).  2 -
	those that match against the ESX vmhosts that make up the cluster
	(esx_hostname, vmhost_rack, etc.).  3 - those that match against
	the virtual machines running on the cluster (virtual_machine,
	guest).
	<p/>
	Note that location searches are inclusive.  That is, searching for a
	building will include all racks, rooms, etc. inside the building.  The
	--cluster_exact_location and --vmhost_exact_location options can be used
	to override this behavior.
	<optgroup mandatory="True">
	    <option name="cluster" type="string">cluster name</option>
	    <option name="metacluster" type="string">metacluster name</option>
	    <option name="esx_hostname" type="string">fully qualified domain name of a vmhost</option>
	    <option name="virtual_machine" type="string">virtual machine label (evm1)</option>
	    <option name="guest" type="string">fully qualified host name of a virtual machine</option>
	    <option name="archetype" type="string">archetype (vmhost)</option>
	    <option name="personality" type="string">personality</option>
	    <option name="personality_stage" requires="personality" type="string">Personality stage</option>
	    <option name="service" type="string">client of service (single service only)</option>
	    <option name="instance" type="string">client of service instance (single instance only)</option>
	    <option name="share" type="string">share in use by an virtual machine on the cluster</option>
	    <option name="switch" type="string">Select clusters bound to the given switch</option>
	    <option name="buildstatus" type="string">status</option>
	    <optgroup fields="one">
		<option name="domain" type="string">template domain</option>
		<option name="sandbox" type="string">Name of the sandbox (given as 'author/branch')</option>
		<option name="branch" type="string">template branch (either a domain or a sandbox)</option>
	    </optgroup>
	    <optgroup fields="one">
		<option name="cluster_organization" type="string">Cluster Organization</option>
		<option name="cluster_hub" type="string">Cluster Hub</option>
		<option name="cluster_continent" type="string">Cluster Continent</option>
		<option name="cluster_country" type="string">Cluster Country</option>
		<option name="cluster_campus" type="string">Cluster Campus</option>
		<option name="cluster_city" type="string">Cluster City</option>
		<option name="cluster_building" type="string">Cluster Building</option>
		<option name="cluster_room" type="string">Cluster Room</option>
		<option name="cluster_bunker" type="string">Cluster Bunker</option>
		<option name="cluster_rack" type="string">Cluster Rack</option>
		<option name="cluster_desk" type="string">Cluster Desk</option>
	    </optgroup>
	    <option name="cluster_exact_location" type="flag">match the cluster location exactly</option>
	    <optgroup fields="one">
		<option name="vmhost_organization" type="string">vmhost Organization</option>
		<option name="vmhost_hub" type="string">vmhost Hub</option>
		<option name="vmhost_continent" type="string">vmhost Continent</option>
		<option name="vmhost_country" type="string">vmhost Country</option>
		<option name="vmhost_campus" type="string">vmhost Campus</option>
		<option name="vmhost_city" type="string">vmhost City</option>
		<option name="vmhost_building" type="string">vmhost Building</option>
		<option name="vmhost_room" type="string">vmhost Room</option>
		<option name="vmhost_bunker" type="string">vmhost Bunker</option>
		<option name="vmhost_rack" type="string">vmhost Rack</option>
		<option name="vmhost_desk" type="string">vmhost Desk</option>
	    </optgroup>
	    <option name="vmhost_exact_location" type="flag">match the vmhost location exactly</option>
	</optgroup>
	<optgroup>
	    <option name="fullinfo" type="flag">show full information for the matching clusters</option>
	</optgroup>
	<transport method="get" path="find/cluster_esx"/>
	<format name="proto" >
	    <message_class name="ClusterList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="search_observed_mac">
	Search poll_network_device results.

	Supported options for --format: csv.

	The 'csv' format contains the following fields, in this order:
	Switch FQDN, port, MAC address, Last Observation Date
	<optgroup mandatory="True">
	    <option name="network_device" type="string">FQDN of the network device</option>
	    <option name="switch" type="string">[Deprecated] FQDN of the switch</option>
	    <option name="port" type="string">Port name on the switch</option>
	    <option name="mac" type="mac">MAC address to search for</option>
	</optgroup>
	<transport method="get" path="find/observed_mac"/>
    </command>

    <command name="search_next">
	Search for the next available number in a series.  If entries are
	found in the database of the prefix followed by a number, the
	numbers are sorted and the highest number plus one is returned.
	If no entries are found, the command returns 1.  If the --pack
	option is given the first free value is returned instead of choosing
	one past the highest.  This will fill in any "holes" in the sequence.
	<p/>
	Use the --number flag to return just that number, otherwise
	return the full name.
	<p/>
	Use the --start option to count from a number other than 1.
	<p/>
	Examples:
	<p/>
	aq search_next --machine evm
	<p/>
	aq search_next --short igrid --dns_domain devin1.ms.com --number
	<p/>
	aq search_next --cluster ddecl
	<p/>
	aq search_next --metacluster namc
	<optgroup mandatory="True" fields="one">
	    <option name="machine" type="string">Machine prefix to check</option>
	    <optgroup fields="all">
		<option name="short" type="string">FQDN prefix to check</option>
		<option name="dns_domain" type="string">DNS domain for FQDN</option>
	    </optgroup>
	    <option name="cluster" type="string">Cluster prefix to check</option>
	    <option name="metacluster" type="string">Metacluster prefix to check</option>
	</optgroup>
	<optgroup>
	    <option name="number" type="flag">show only the next number</option>
	    <option name="pack" type="flag">Return first free value</option>
	    <option name="start" type="string">Start counting at a different number than one</option>
	</optgroup>
	<transport method="get" trigger="short" path="find/next/system"/>
	<transport method="get" trigger="machine" path="find/next/machine"/>
	<transport method="get" trigger="cluster" path="find/next/cluster"/>
	<transport method="get" trigger="metacluster" path="find/next/metacluster"/>
    </command>

    <command name="compile">
	Compile anything that is out-of-date within a specified domain,
	sandbox, or only for the specified host.  Only out of date profiles
	will be compiled.
	<optgroup mandatory="True">
	    <option name="domain" type="string" conflicts="sandbox hostname cluster metacluster">Domain name</option>
	    <option name="sandbox" type="string" conflicts="domain hostname cluster metacluster">Name of the sandbox (given as 'author/branch')</option>
	    <option name="hostname" type="string" conflicts="domain sandbox cluster metacluster personality">FQDN</option>
	    <option name="cluster" type="string" conflicts="domain sandbox hostname metacluster personality">Name of cluster</option>
	    <option name="metacluster" type="string" conflicts="domain sandbox hostname cluster personality">Name of metacluster</option>
	    <option name="personality" type="string" conflicts="hostname cluster metacluster">personality name</option>
	</optgroup>
	<optgroup>
	    <option name="archetype" type="string" requires="personality">archetype name</option>
	    <option name="personality_stage" type="string" requires="personality">Personality stage</option>
	    <option name="pancinclude" type="string" conflicts="pancdebug">Regex for templates to include in debug output (None included by default)</option>
	    <option name="pancexclude" type="string" conflicts="pancdebug">Regex for templates to exclude in debug output (only useful if pancinclude has been given)</option>
	    <option name="pancdebug" type="boolean" conflicts="pancinclude pancexclude">Alias for pancinclude=.* and pancexclude=components/spma/functions</option>
	    <option name="cleandeps" type="boolean">Remove pan dependecy files before compiling (should only be required if switching panc versions)</option>
	</optgroup>
	<transport method="post" path="command/compile"/>
	<transport trigger="hostname" method="post" path="host/%(hostname)s/command/compile"/>
	<transport trigger="cluster" method="post" path="cluster/%(cluster)s/command/compile"/>
	<transport trigger="metacluster" method="post" path="metacluster/%(metacluster)s/command/compile"/>
	<transport trigger="personality" method="post" path="personality/%(personality)s/command/compile"/>
    </command>

    <command name="show_domain">
	Shows the configuration for a given domain. With the '--all' option,
	every domain will be listed with its configuration.
	<optgroup mandatory="True" fields="one">
	    <option name="domain" type="string">Domain name</option>
	    <option name="all" type="flag">Select all domains</option>
	</optgroup>
	<transport trigger="all" method="get" path="domain"/>
	<transport trigger="domain" method="get" path="domain/%(domain)s"/>
	<format name="proto">
	    <message_class name="DomainList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="search_domain">
	Search domains.
	<optgroup mandatory="True">
	    <option name="track" type="string" conflicts="no_tracking">Name of tracked branch</option>
	    <option name="not_tracking" type="flag" conflicts="track">Do not include tracking domains</option>
	    <option name="change_manager" type="boolean">Change manager required</option>
	    <option name="compiler_version" type="string">Version of panc to use</option>
	    <option name="autosync" type="boolean">Filter by the autosync flag</option>
	    <option name="validated" type="boolean">Filter by the validated flag</option>
	    <option name="used" type="boolean" reverse="unused">The domain is in use</option>
	    <option name="compileable" type="flag">Consider only compileable objects when checking if the domain is in use</option>
	</optgroup>
	<optgroup>
	    <option name="fullinfo" type="flag">Show full information for the matching domains</option>
	</optgroup>
	<transport method="get" path="find/domain"/>
	<format name="proto">
	    <message_class name="DomainList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="show_sandbox">
	Shows the configuration for a given sandbox.  With the '--all' option,
	every sandbox will be listed with its configuration.
	<optgroup mandatory="True" fields="one">
	    <option name="sandbox" type="string">Sandbox name</option>
	    <option name="all" type="flag">Select all sandboxes</option>
	</optgroup>
	<optgroup>
	    <option name="pathonly" type="flag" conflicts="all">Show only the sandbox path</option>
	</optgroup>
	<transport trigger="all" method="get" path="sandbox"/>
	<transport trigger="sandbox" method="get" path="sandbox/%(sandbox)s"/>
	<format name="proto">
	    <message_class name="DomainList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="search_sandbox">
	<optgroup mandatory="True">
	    <option name="owner" type="string">Show only sandboxes of a given user</option>
	    <option name="compiler_version" type="string">Version of panc to use</option>
	    <option name="autosync" type="boolean">Filter by the autosync flag</option>
	    <option name="validated" type="boolean">Filter by the validated flag</option>
	    <option name="used" type="boolean" reverse="unused">The sandbox is in use</option>
	    <option name="compileable" type="flag">Consider only compileable objects when checking if the sandbox is in use</option>
	</optgroup>
	<optgroup>
	    <option name="fullinfo" type="flag">Show full information for the matching sandboxes</option>
	</optgroup>
	<transport method="get" path="find/sandbox"/>
	<format name="proto">
	    <message_class name="DomainList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="show_network">
	Shows the configuration for a network, or for networks selected by location.
	<p/>
	Supported options for --format: raw, csv, proto.
	<p/>
	The 'csv' format contains the following fields, in this order:
	Network name, IP, Netmask, Sysloc, Country code, Side, Type, Comments.
	<p/>
	Note that location searches are inclusive.  That is, searching for a
	building will include all racks, rooms, etc. inside the building.  The
	--exact_location option can be used to override this behavior.
	<optgroup mandatory="True" fields="one">
	    <option name="network" type="string">Network name</option>
	    <option name="ip" type="ipv4">IP address</option>
	    <option name="all" type="flag">All</option>
	    <optgroup fields="one">
		<option name="organization" type="string">Organization</option>
		<option name="hub" type="string">Hub</option>
		<option name="continent" type="string">Continent</option>
		<option name="country" type="string">Country</option>
		<option name="campus" type="string">Campus</option>
		<option name="city" type="string">City</option>
		<option name="building" type="string">Building</option>
		<option name="room" type="string">Room</option>
		<option name="bunker" type="string">Bunker</option>
		<option name="rack" type="string">Rack</option>
		<option name="desk" type="string">Desk</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="exact_location" type="flag">match the location exactly</option>
	    <option name="network_environment" type="string">Network environment (default: internal)</option>
	    <option name="hosts" type="flag">Hosts</option>
	</optgroup>
	<transport method="get" path="network"/>
	<format name="proto" >
	    <message_class name="NetworkList" module="aqdnetworks_pb2"/>
	</format>
    </command>

    <command name="search_network">
	Search for a network based on various criteria.
	<p/>
	Note that location searches are inclusive.  That is, searching for a
	building will include all racks, rooms, etc. inside the building.  The
	--exact_location option can be used to override this behavior.
	<p/>
	Supported options for --format: raw, csv, proto.
	<p/>
	The 'csv' format contains the following fields, in this order:
	Network name, IP, Netmask, Sysloc, Country code, Side, Type, Comments.
	<optgroup mandatory="True">
	    <option name="network" type="string">Network name</option>
	    <option name="network_environment" type="string">Network environment (default: internal)</option>
	    <option name="network_compartment" type="string">Network compartment</option>
	    <option name="ip" type="ipv4">IP address of the network or contained in the network</option>
	    <option name="type" type="string">Network type</option>
	    <option name="side" type="string">Network side</option>
	    <option name="machine" type="string">Networks the machine is attached to</option>
	    <option name="fqdn" type="string">Network that contains the IP address for this fully qualified domain name</option>
	    <option name="cluster" type="string">Networks in use by the cluster switch</option>
	    <option name="virtual_switch" type="string">Networks used by the virtual switch</option>
	    <option name="pg" type="string">Networks assigned to the given portgroup</option>
	    <option name="has_dynamic_ranges" type="flag">Matches networks containing dynamic DHCP ranges</option>
	    <option name="exact_location" type="flag">match the location exactly</option>
	    <optgroup fields="one">
		<option name="organization" type="string">Organization</option>
		<option name="hub" type="string">Hub</option>
		<option name="continent" type="string">Continent</option>
		<option name="country" type="string">Country</option>
		<option name="campus" type="string">Campus</option>
		<option name="city" type="string">City</option>
		<option name="building" type="string">Building</option>
		<option name="room" type="string">Room</option>
		<option name="bunker" type="string">Bunker</option>
		<option name="rack" type="string">Rack</option>
		<option name="desk" type="string">Desk</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="fullinfo" type="flag">show full information for the matching networks</option>
	</optgroup>
	<transport method="get" path="find/network"/>
	<format name="proto" >
	    <message_class name="NetworkList" module="aqdnetworks_pb2"/>
	</format>
    </command>

    <command name="refresh_network">
	Refresh aqdb network information from dsdb.
	<p/>
	Generally this command is called with the --all option but can be
	restricted to a single building for speed.  A dryrun option is
	provided to see what would change.
	<p/>
	Using the incremental option will cause every change to be committed
	to the database individually.  This is recommended for automated
	usage but is off by default for interactive use as it is slower.
	<optgroup mandatory="True" fields="one">
	    <option name="building" type="string">Building name</option>
	    <option name="all" type="flag">All locations</option>
	</optgroup>
	<optgroup>
	    <option name="dryrun" type="boolean" conflicts="incremental">Report what will change</option>
	    <option name="incremental" type="boolean" conflicts="dryrun">Commit every change as it is decided</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="command/refresh_network"/>
    </command>

    <command name="add_cpu">
	Add a new CPU type to the database.
	<optgroup mandatory="True" fields="all">
	    <option name="cpu" type="string">CPU type name</option>
	    <option name="vendor" type="string">name of the vendor</option>
	</optgroup>
	<optgroup>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="vendor/%(vendor)s/cpu/%(cpu)s"/>
    </command>

    <command name="show_cpu">
	Show the CPU types in the database
	<optgroup mandatory="True">
	    <option name="all" type="flag">Show all cpu types</option>
	    <option name="cpu" type="string">CPU type name</option>
	</optgroup>
	<optgroup>
	    <option name="vendor" requires="cpu" type="string">name of the vendor</option>
	</optgroup>
	<transport method="get" path="find/cpu"/>
    </command>

    <command name="add_disk">
	Add a new disk to a machine.
	<p/>
	The controller type must be one of: ide, scsi, sata, sas, cciss.
	<p/>
	Examples of valid disk names: hda, hdb (IDE); sda, sdb (SCSI, SATA), c0d0 (CCISS).
	<optgroup mandatory="True" fields="all">
	    <option name="machine" type="string">Machine name</option>
	    <option name="disk" type="string">Disk/device name</option>
	    <option name="controller" type="string">Type of the controller/interface</option>
	    <option name="size" type="int">Capacity of the disk (GB)</option>
	</optgroup>
	<optgroup>
	    <option name="share" type="string" conflicts="filesystem">Share name</option>
	    <option name="filesystem" type="string" conflicts="share">Filesystem name</option>
	    <option name="resourcegroup" type="string">Resourcegroup of the share or filesystem</option>
	    <option name="address" type="string">SCSI bus address (e.g. 0:0)</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="boot" type="boolean">Mark the disk as bootable</option>
	    <option name="snapshot" type="boolean">Mark the disk as snapshotable</option>
	    <option name="wwn" type="string">World Wide Name of the disk</option>
	    <option name="bus_address" type="string">Hardware bus address of the controller hosting the disk</option>
	    <option name="iops_limit" type="int">IOPS limit on disks.</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="machine/%(machine)s/disk/%(disk)s"/>
    </command>

    <command name="del_disk">
	Delete a disk from a machine.
	<p/>
	If more than one disk matches, they will not be deleted.  Use the
	--all flag to override this and delete all matching disks.
	<optgroup mandatory="True" fields="all">
	    <option name="machine" type="string">machine ID</option>
	    <optgroup fields="one">
		<option name="disk" type="string">device name of the disk (like sda)</option>
		<option name="all" type="flag">remove any matching disks</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" trigger="disk" path="machine/%(machine)s/disk/%(disk)s"/>
	<transport method="delete" path="machine/%(machine)s/disk"/>
    </command>

    <command name="update_disk">
	Update the parameters of an existing disk.
	<optgroup mandatory="True" fields="all">
	    <option name="machine" type="string">Machine name</option>
	    <option name="disk" type="string">Disk/device name</option>
	</optgroup>
	<optgroup>
	    <option name="rename_to" type="string">New name of the disk</option>
	    <option name="share" type="string" conflicts="filesystem">Share backing the disk image</option>
	    <option name="filesystem" type="string" conflicts="share">Filesystem backing the disk image</option>
	    <option name="resourcegroup" type="string">Resourcegroup to add share</option>
	    <option name="address" type="string">SCSI bus address (e.g. 0:0)</option>
	    <option name="controller" type="string" conflicts="type">Type of the controller/interface</option>
	    <option name="size" type="int" conflicts="capacity">Capacity of the disk (GB)</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="boot" type="boolean">Mark the disk as bootable</option>
	    <option name="snapshot" type="boolean">Mark the disk as snapshotable</option>
	    <option name="wwn" type="string">World Wide Name of the disk</option>
	    <option name="bus_address" type="string">Hardware bus address of the controller hosting the disk</option>
	    <option name="iops_limit" type="int">IOPS limit on disks</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="machine/%(machine)s/disk/%(disk)s"/>
    </command>

    <command name="add_host">
	Add a new host to the database.  Requires a machine with a bootable
	interface and a valid IP address.
	<p/>
	The IP address can be derived based on aqdb availabililty using:
	--ipfromip:     choose a free IP address in the subnet of the given ip
	--ipfromsystem: choose based on the subnet in use by the given system
	--autoip:       check discovery tables (filled in by aq poll)
	<p/>
	Three algorithms are available for deriving the IP address:
	lowest:   Use the lowest available IP in the subnet.
	highest:  Use the highest available IP in the subnet.
	max:      Find the highest IP in use and add one.
	The default is lowest.
	<p/>
	Specifying the --zebra_interfaces option will make the primary IP address of the host managed
	by Zebra. The argument of the option is a comma-separated list of interface names, where
	Zebra should be configured.
	<optgroup mandatory="True" fields="all">
	    <optgroup fields="one">
		<option name="hostname" type="string">Fully qualified Host name</option>
		<option name="prefix" type="string">Prefix for generating the host name</option>
	    </optgroup>
	    <option name="machine" type="string">Machine (Node) name</option>
	    <option name="archetype" type="string">Archetype name</option>
	    <optgroup fields="one">
		<option name="domain" type="string">Template (not DNS) domain</option>
		<option name="sandbox" type="string">Name of the sandbox (given as 'author/branch')</option>
	    </optgroup>
	    <optgroup fields="one">
		<option name="ip" type="ipv4">IP address</option>
		<option name="ipfromip" type="ipv4">choose IP address in subnet</option>
		<option name="ipfromsystem" type="string">choose IP address in subnet of system</option>
		<option name="autoip" type="flag">choose IP address based on mac/switch</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="osname" type="string">Operating system (e.g. linux)</option>
	    <option name="osversion" type="string">Operating system version (e.g. 5.0-x86_64)</option>
	    <option name="buildstatus" type="string">Build Status: defaults to build.  'blind' and 'ready' also valid.</option>
	    <option name="personality" requires="personality" type="string">Personality name: defaults to 'inventory' for aquilon and 'generic' otherwise.</option>
	    <option name="personality_stage" type="string">Personality stage to use, defaults to 'current'.</option>
	    <option name="ipalgorithm" type="string">Algorithm for automatically choosing an IP.</option>
	    <option name="zebra_interfaces" type="string">Interfaces to configure Zebra on</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="dns_domain" type="string" requires="prefix">Override the default DNS domain for --prefix</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<optgroup fields="one">
	    <option name="grn" type="string">GRN as string</option>
	    <option name="eon_id" type="int">Numeric EON ID</option>
	</optgroup>
	<transport method="put" path="host/%(hostname)s"/>
	<transport method="put" trigger="prefix" path="next_host/%(prefix)s"/>
    </command>

    <command name="add_windows_host">
	Add a new host to the database with archetype windows.  Requires a
	machine with a bootable interface and a valid IP address.
	<p/>
	The IP address can be derived based on aqdb availabililty using:
	--ipfromip:     choose a free IP address in the subnet of the given ip
	--ipfromsystem: choose based on the subnet in use by the given system
	--autoip:       check discovery tables (filled in by aq poll)
	<p/>
	Three algorithms are available for deriving the IP address:
	lowest:   Use the lowest available IP in the subnet.
	highest:  Use the highest available IP in the subnet.
	max:      Find the highest IP in use and add one.
	The default is lowest.
	<p/>
	Currently operating system name/version is windows/generic for all windows
	machines since they are the only versions in the database.
	<optgroup mandatory="True" fields="all">
	    <option name="hostname" type="string">Fully qualified Host name</option>
	    <option name="machine" type="string">Machine (Node) name</option>
	</optgroup>
	<optgroup>
	    <option name="buildstatus" type="string">Build Status: defaults to build.  'blind' and 'ready' also valid.</option>
	    <option name="personality" type="string">Personality name.  See `aq show personality --archetype windows`.  Currently defaults to 'generic'.</option>
	    <option name="osversion" type="string">Operating system version.  Default 'generic'.</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="ipalgorithm" type="string">Algorithm for automatically choosing an IP.</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<optgroup fields="one">
	    <option name="ip" type="ipv4">IP address</option>
	    <option name="ipfromip" type="ipv4">choose IP address in subnet</option>
	    <option name="ipfromsystem" type="string">choose IP address in subnet of system</option>
	    <option name="autoip" type="flag">choose IP address based on mac/switch</option>
	</optgroup>
	<optgroup fields="one">
	    <option name="grn" type="string">GRN as string</option>
	    <option name="eon_id" type="int">Numeric EON ID</option>
	</optgroup>
	<transport method="put" path="windows_host/%(hostname)s"/>
    </command>

    <command name="add_aurora_host">
	Add a placeholder host to the database to represent an aurora host.
	<optgroup mandatory="True" fields="all">
	    <option name="hostname" type="string">Fully qualified Host name</option>
	</optgroup>
	<optgroup>
	    <option name="osname" type="string">Operating system: defaults to linux, no solaris (yet)</option>
	    <option name="osversion" type="string">Operating system version (e.g. 5.0-x86_64. Defaults to 'generic')</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="aurora_host/%(hostname)s"/>
    </command>

    <command name="add_auxiliary">
	This command is DEPRECATED. Please use add_interface_address instead.
	<p/>
	Add an auxiliary entry for a host to the database.  Requires a
	machine with a non-bootable public interface (generally eth1) and a
	valid IP address.
	<p/>
	The host can be identified by either --machine or --hostname.  The
	new/auxiliary name must be given with --auxiliary.
	<p/>
	If both --interface and --mac are given and there is no such
	interface, it will be created.
	<p/>
	For a host like igrid123.subdomain.ms.com, an example auxiliary name
	for the eth1 interface is igrid123-e1.subdomain.ms.com.
	<p/>
	After running this, run reconfigure on the primary host (in the
	example above, igrid123.subdomain.ms.com).
	<p/>
	The IP address can be derived based on aqdb availabililty using:
	--ipfromip:     choose a free IP address in the subnet of the given ip
	--ipfromsystem: choose based on the subnet in use by the given system
	--autoip:       check discovery tables (filled in by aq poll)
	<p/>
	Three algorithms are available for deriving the IP address:
	lowest:   Use the lowest available IP in the subnet.
	highest:  Use the highest available IP in the subnet.
	max:      Find the highest IP in use and add one.
	The default is lowest.
	<optgroup mandatory="True" fields="all">
	    <optgroup fields="one">
		<option name="hostname" type="string">Fully qualified Host name</option>
		<option name="machine" type="string">Machine (Node) name</option>
	    </optgroup>
	    <option name="auxiliary" type="string">Fully qualified name for the auxiliary interface</option>
	    <optgroup fields="one">
		<option name="ip" type="ipv4">IP address</option>
		<option name="ipfromip" type="ipv4">choose IP address in subnet</option>
		<option name="ipfromsystem" type="string">choose IP address in subnet of system</option>
		<option name="autoip" type="flag">choose IP address based on mac/switch</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="interface" type="string">Specify the non-bootable public interface to use, if there is more than one.</option>
	    <option name="mac" type="mac">Specify the non-bootable public interface to use, if there is more than one.</option>
	    <option name="ipalgorithm" type="string">Algorithm for automatically choosing an IP.</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="auxiliary/%(auxiliary)s"/>
    </command>

    <command name="del_auxiliary">
	This command is DEPRECATED. Please use del_interface_address instead.
	<p/>
	Delete an auxiliary entry for a host from the database.
	<p/>
	For a host like igrid123.subdomain.ms.com, an example auxiliary name
	for the eth1 interface is igrid123-e1.subdomain.ms.com.
	<p/>
	After running this, run reconfigure on the primary host (in the
	example above, igrid123.subdomain.ms.com).
	<optgroup mandatory="True" fields="all">
	    <option name="auxiliary" type="string">Fully qualified name for the auxiliary interface</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="auxiliary/%(auxiliary)s"/>
    </command>

    <command name="add_manager">
	Add a manager entry for a host to the database.  Requires a
	host with a management interface and a valid IP address.
	<p/>
	The manager name can be overridden with --manager.  The default
	is to add an 'r' to the first component of the hostname.  For a
	host like igrid123.subdomain.ms.com, the default manager name
	is igrid123r.subdomain.ms.com.
	<p/>
	If both --interface and --mac are given and there is no such
	interface, it will be created.
	<p/>
	After running this, run reconfigure on the primary host (in the
	example above, igrid123.subdomain.ms.com).
	<p/>
	The IP address can be derived based on aqdb availabililty using:
	--ipfromip:     choose a free IP address in the subnet of the given ip
	--ipfromsystem: choose based on the subnet in use by the given system
	--autoip:       check discovery tables (filled in by aq poll)
	<p/>
	Three algorithms are available for deriving the IP address:
	lowest:   Use the lowest available IP in the subnet.
	highest:  Use the highest available IP in the subnet.
	max:      Find the highest IP in use and add one.
	The default is lowest.
	<optgroup mandatory="True" fields="all">
	    <option name="hostname" type="string">Fully qualified Host name</option>
	    <optgroup fields="one">
		<option name="ip" type="ipv4">IP address</option>
		<option name="ipfromip" type="ipv4">choose IP address in subnet</option>
		<option name="ipfromsystem" type="string">choose IP address in subnet of system</option>
		<option name="autoip" type="flag">choose IP address based on mac/switch</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="manager" type="string">Fully qualified name for the manager interface</option>
	    <option name="interface" type="string">Specify the management interface to use, if there is more than one.</option>
	    <option name="mac" type="mac">Specify the management interface to use, if there is more than one.</option>
	    <option name="ipalgorithm" type="string">Algorithm for automatically choosing an IP.</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport trigger="manager" method="put" path="manager/%(manager)s"/>
	<transport method="post" path="host/%(hostname)s/command/add_manager"/>
    </command>

    <command name="show_manager">
	Shows the information for manager systems (like
	igrid123r.subdomain.ms.com)
	<p/>
	The --missing option will list aq commands to create entries for
	any hosts that have management interfaces but do not have managers.
	<p/>
	These commands need to be run separately in order to create the
	necessary entries.
	<optgroup mandatory="True" fields="one">
	    <option name="manager" type="string">Manger name</option>
	    <option name="all" type="flag">Select all managers</option>
	</optgroup>
	<transport trigger="all" method="get" path="manager"/>
	<transport trigger="manager" method="get" path="manager/%(manager)s"/>
    </command>

    <command name="del_manager">
	Delete a manager entry for a host from the database.
	<p/>
	For a host like igrid123.subdomain.ms.com, the manager name
	is igrid123r.subdomain.ms.com.
	<p/>
	After running this, run reconfigure on the primary host (in the
	example above, igrid123.subdomain.ms.com).
	<optgroup mandatory="True" fields="all">
	    <option name="manager" type="string">Fully qualified name for the manager interface</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="manager/%(manager)s"/>
    </command>

    <command name="add_model">
	Add a new model
	<optgroup mandatory="True" fields="all">
	    <option name="model" type="string">Name of the new model</option>
	    <option name="vendor" type="string">Vendor name</option>
	    <option name="type" type="enum" enum="ModelType">Machine type name</option>
	</optgroup>
	<optgroup fields="all">
	    <option name="cpuname" type="string">CPU model name</option>
	    <option name="cpunum" type="int">CPU count</option>
	    <option name="memory" type="int">amount of installed memory (MB)</option>
	    <option name="disktype" type="string">installed disk type (generally 'local', use 'nas' for virtual disks on NAS)</option>
	    <option name="diskcontroller" type="string">controller type (sata, scsi, etc.)</option>
	    <option name="disksize" type="int">installed disk capacity (GB)</option>
	</optgroup>
	<optgroup>
	    <option name="cpuvendor" type="string">CPU vendor, if the name is not unique</option>
	    <option name="nicmodel" type="string">Default model of network interfaces</option>
	    <option name="nicvendor" type="string">NIC vendor, if the model name is not unique</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="vendor/%(vendor)s/model/%(model)s"/>
    </command>

    <command name="show_model">
	Show a model
	<optgroup mandatory="True" fields="one">
	    <option name="model" type="string">Name of the model</option>
	    <option name="all" type="flag">Show all models</option>
	</optgroup>
	<optgroup>
	    <option name="vendor" type="string" conflicts="all">Vendor name, if the model name is not unique</option>
	    <option name="type" type="enum" enum="ModelType" conflicts="all">Machine type name</option>
	</optgroup>
	<format name="proto">
	    <message_class name="ModelList" module="aqdsystems_pb2"/>
	</format>
	<transport method="get" trigger="all" path="any_vendor/model"/>
	<transport method="get" trigger="vendor" path="vendor/%(vendor)s/model/%(model)s"/>
	<transport method="get" path="any_vendor/model/%(model)s"/>
    </command>

    <command name="search_model">
	Search hardware models
	<optgroup mandatory="True">
	    <option name="model" type="string">Name of the model</option>
	    <option name="vendor" type="string">Vendor name</option>
	    <option name="machine_type" type="enum" enum="ModelType">Machine type name</option>
	    <option name="cpuname" type="string" conflicts="cputype">CPU type</option>
	    <option name="cpuvendor" type="string">CPU vendor</option>
	    <option name="cpunum" type="int">CPU count</option>
	    <option name="nicmodel" type="string">NIC model</option>
	    <option name="nicvendor" type="string">NIC vendor</option>
	    <option name="memory" type="int">Amount of installed memory (MB)</option>
	    <option name="disktype" type="string">Installed disk type (generally 'local', use 'nas' for virtual disks on NAS)</option>
	    <option name="diskcontroller" type="string">Controller type (sata, scsi, etc.)</option>
	    <option name="disksize" type="int">Installed disk capacity (GB)</option>
	</optgroup>
	<optgroup>
	    <option name="fullinfo" type="flag">Show full information for the matching models</option>
	</optgroup>
	<transport method="get" path="find/model"/>
	<format name="proto">
	    <message_class name="ModelList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="update_model">
	Update a model, optionally updating all existing hardware of that model.
	The model must be specified by name and vendor.
	If updating the CPU, usually cpuname will be enough to specify a CPU
	uniquely but vendor can be given as well if needed.
	<optgroup mandatory="True" fields="all">
	    <option name="model" type="string">Name of the model to update</option>
	    <option name="vendor" type="string">Vendor name</option>
	</optgroup>
	<optgroup>
	    <option name="newmodel" type="string">Change model name</option>
	    <option name="newvendor" type="string">Change model vendor</option>
	    <option name="machine_type" type="enum" enum="ModelType">Machine type name</option>
	    <option name="cpuname" type="string">CPU name</option>
	    <option name="cpuvendor" type="string">CPU vendor</option>
	    <option name="cpunum" type="int">CPU count</option>
	    <option name="memory" type="int">amount of installed memory (MB)</option>
	    <option name="disktype" type="string">installed disk type (generally 'local', use 'nas' for virtual disks on NAS)</option>
	    <option name="diskcontroller" type="string">controller type (sata, scsi, etc.)</option>
	    <option name="disksize" type="int">installed disk capacity (GB)</option>
	    <option name="nicmodel" type="string">NIC model name</option>
	    <option name="nicvendor" type="string">NIC vendor</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="update_existing_machines" type="flag">
		Update machines using the old defaults to the new values (default is to not make any
		changes)
	    </option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="vendor/%(vendor)s/model/%(model)s"/>
    </command>

    <command name="del_model">
	Decomission model
	<optgroup mandatory="True" fields="all">
	    <option name="model" type="string">Name of the model</option>
	    <option name="vendor" type="string">Vendor name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="vendor/%(vendor)s/model/%(model)s"/>
    </command>

    <command name="add_interface">
	Add a new network interface to the database.
	<p/>
	If adding an interface to virtual hardware, the --automac option
	can be used to automatically generate a MAC address based on
	the cluster vendor.
	<p/>
	To give an IP address to a host, provide it when using add_host.
	<p/>
	For chassis the IP address is provided with this command.
	<p/>
	The IP address can be derived based on aqdb availabililty using:
	--ipfromip:     choose a free IP address in the subnet of the given ip
	--ipfromsystem: choose based on the subnet in use by the given system
	--autoip:       check discovery tables (filled in by aq poll)
	<p/>
	Three algorithms are available for deriving the IP address:
	lowest:   Use the lowest available IP in the subnet.
	highest:  Use the highest available IP in the subnet.
	max:      Find the highest IP in use and add one.
	The default is lowest.
	<optgroup mandatory="True" fields="all">
	    <optgroup mandatory="True" fields="one">
		<option name="machine" type="string">Machine (node) name</option>
		<option name="hostname" type="string">Hostname</option>
		<option name="chassis" type="string">Chassis name</option>
		<option name="network_device" type="string">Network device name</option>
		<option name="switch" type="string">[Deprecated] Switch name</option>
	    </optgroup>
	    <option name="interface" type="string">Interface name</option>
	</optgroup>
	<optgroup fields="one">
	    <option name="mac" type="mac">MAC address</option>
	    <option name="automac" type="flag">Automatically generate MAC for virtual hardware</option>
	</optgroup>
	<optgroup fields="one">
	    <option name="pg" type="string">portgroup</option>
	    <option name="autopg" type="flag">choose portgroup based on switch</option>
	</optgroup>
	<optgroup>
	    <option name="iftype" type="string">Interface type: public, management, oa, vlan</option>
	    <option name="type" type="string">[Deprecated] Interface type: public, management, oa, vlan</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="model" type="string">Interface model name. Default is 'generic_nic'.</option>
	    <option name="vendor" type="string">Interface vendor name. Default is 'generic'.</option>
	    <option name="bus_address" type="string">Hardware bus address of the controller hosting the disk</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport trigger="machine" method="put" path="machine/%(machine)s/interface/%(interface)s"/>
	<transport trigger="hostname" method="put" path="host/%(hostname)s/interface/%(interface)s"/>
	<transport trigger="chassis" method="put" path="chassis/%(chassis)s/interface/%(interface)s"/>
	<transport trigger="switch" method="put" path="switch/%(switch)s/interface/%(interface)s"/>
	<transport trigger="network_device" method="put" path="network_device/%(network_device)s/interface/%(interface)s"/>
    </command>

    <command name="add_network_environment">
	Define a new network environment.
	<optgroup mandatory="True" fields="all">
	    <option name="network_environment" type="string">Name of the environment</option>
	    <option name="dns_environment" type="string">DNS environment to use for looking up addresses in this network environment</option>
	</optgroup>
	<optgroup>
	    <!-- TODO: Do we need any other kind of location? -->
	    <option name="building" type="string">Building</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="network_environment/%(network_environment)s"/>
    </command>

    <command name="del_network_environment">
	Delete a new network environment.
	<optgroup mandatory="True" fields="all">
	    <option name="network_environment" type="string">Name of the environment</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="network_environment/%(network_environment)s"/>
    </command>

    <command name="update_network_environment">
	Update a new network environment.
	<optgroup mandatory="True" fields="all">
	    <option name="network_environment" type="string">Name of the environment</option>
	</optgroup>
	<optgroup>
	    <!-- TODO: Do we need any other kind of location? -->
	    <option name="building" type="string">Building</option>
	    <option name="clear_location" type="flag" conflicts="building">Clear the location mapping</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="network_environment/%(network_environment)s"/>
    </command>

    <command name="show_network_environment">
	Display a new network environment.
	<optgroup mandatory="True" fields="one">
	    <option name="network_environment" type="string">Name of the environment</option>
	    <option name="all" type="flag">Show all environments</option>
	</optgroup>
	<transport trigger="network_environment" method="get" path="network_environment/%(network_environment)s"/>
	<transport trigger="all" method="get" path="network_environment"/>
    </command>

    <command name="search_network_environment">
	Display a new network environment.
	<optgroup mandatory="True">
	    <option name="network_environment" type="string">Name of the environment</option>
	    <!-- TODO: Do we need any other kind of location? -->
	    <option name="building" type="string">Building</option>
	</optgroup>
	<optgroup>
	    <option name="fullinfo" type="flag">Show full information for the matching network environments</option>
	</optgroup>
	<transport method="get" path="find/network_environment"/>
    </command>

    <command name="add_network_compartment">
	Define a new network compartment.
	<optgroup mandatory="True" fields="all">
	    <option name="network_compartment" type="string">Name of the compartment</option>
	</optgroup>
	<optgroup>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="network_compartment/%(network_compartment)s"/>
    </command>

    <command name="show_network_compartment">
	Display a network compartment.
	<optgroup mandatory="True" fields="one">
	    <option name="network_compartment" type="string">Name of the compartment</option>
	    <option name="all" type="flag">Show all compartments</option>
	</optgroup>
	<transport method="get" path="network_compartment/%(network_compartment)s"/>
	<transport trigger="all" method="get" path="network_compartment"/>
	<format name="proto" >
	    <message_class name="NetworkCompartmentList" module="aqdnetworks_pb2"/>
	</format>
    </command>

    <command name="update_network_compartment">
	Update a network compartment.
	<optgroup mandatory="True" fields="all">
	    <option name="network_compartment" type="string">Name of the compartment</option>
	</optgroup>
	<optgroup>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="network_compartment/%(network_compartment)s"/>
    </command>

    <command name="del_network_compartment">
	Delete a new network compartment.
	<optgroup mandatory="True" fields="all">
	    <option name="network_compartment" type="string">Name of the compartment</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="network_compartment/%(network_compartment)s"/>
    </command>

    <command name="add_network">
	Define a new network.
	<p/>
	Specify both a name for the network and its address as an IP
	address/netmask pair.  The netmask can be specified either as dotted quad
	(like "--netmask 255.255.255.0"), as prefix length (like "--prefixlen 24"),
	or as the number of hosts in the network (like "--mask 256").
	<optgroup mandatory="True" fields="all">
	    <option name="network" type="string">Network name</option>
	    <option name="ip" type="ipv4">Network IP address</option>
	    <optgroup fields="one">
		<option name="netmask" type="string">Netmask as dotted quad</option>
		<option name="prefixlen" type="int">Network prefix length</option>
		<option name="mask" type="int">Number of hosts</option>
	    </optgroup>
	    <optgroup fields="one">
		<option name="organization" type="string">Organization</option>
		<option name="hub" type="string">Hub</option>
		<option name="continent" type="string">Continent</option>
		<option name="country" type="string">Country</option>
		<option name="campus" type="string">Campus</option>
		<option name="city" type="string">City</option>
		<option name="building" type="string">Building</option>
		<option name="room" type="string">Room</option>
		<option name="bunker" type="string">Bunker</option>
		<option name="rack" type="string">Rack</option>
		<option name="desk" type="string">Desk</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="network_environment" type="string">Network environment (default: internal)</option>
	    <option name="network_compartment" type="string">Network compartment</option>
	    <option name="type" type="string">Network type, defaults to 'unknown'</option>
	    <option name="side" type="string">Network side, defaults to 'a'</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="network/%(ip)s"/>
    </command>

    <command name="del_network">
	Remove a network definition.
	<p/>
	Specify the network by its IP.
	<optgroup mandatory="True" fields="all">
	    <option name="ip" type="ipv4">Network IP address</option>
	</optgroup>
	<optgroup>
	    <option name="network_environment" type="string">Network environment (default: internal)</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="network/%(ip)s"/>
    </command>

    <command name="update_network">
	Update information about the specified network or networks.
	<p/>
	Update the network either by name or ip of the network.
	<optgroup mandatory="True">
	    <option name="network" type="string">Network name</option>
	    <option name="ip" type="ipv4">Network address</option>
	</optgroup>
	<optgroup>
	    <option name="type" type="string">Network type</option>
	    <option name="side" type="string">Network side</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="network_environment" type="string">Network environment (default: internal)</option>
	    <option name="network_compartment" type="string">Network compartment</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<optgroup fields="one">
	    <option name="organization" type="string">Organization</option>
	    <option name="hub" type="string">Hub</option>
	    <option name="continent" type="string">Continent</option>
	    <option name="country" type="string">Country</option>
	    <option name="campus" type="string">Campus</option>
	    <option name="city" type="string">City</option>
	    <option name="building" type="string">Building</option>
	    <option name="room" type="string">Room</option>
	    <option name="bunker" type="string">Bunker</option>
	    <option name="rack" type="string">Rack</option>
	    <option name="desk" type="string">Desk</option>
	</optgroup>
	<transport method="post" path="network"/>
    </command>

    <command name="split_network">
	Split a network to smaller subnets.  Any devices on the old network will
	be reassigned to the new subnets.
	<optgroup mandatory="True" fields="all">
	    <option name="ip" type="ipv4">Network address</option>
	    <optgroup fields="one">
		<option name="netmask" type="ipv4">New netmask</option>
		<option name="prefixlen" type="int">New network prefix length</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="network_environment" type="string">Network environment (default: internal)</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="network/%(ip)s/command/split"/>
    </command>

    <command name="merge_network">
	Merge multiple networks.  The merged network will inherit its parameters (like location)
	from the network specifyed by --ip.  Note that --ip does not need to specify the
	first network to be merged: e.g. if you want to merge 4 existing networks, then --ip may
	point to the 2nd one; the IP address of the merged network will be calculated using
	--prefixlen.
	<optgroup mandatory="True" fields="all">
	    <option name="ip" type="ipv4">Network address</option>
	    <optgroup fields="one">
		<option name="netmask" type="ipv4">New netmask</option>
		<option name="prefixlen" type="int">New network prefix length</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="network_environment" type="string">Network environment (default: internal)</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="network/%(ip)s/command/merge"/>
    </command>

    <command name="add_router_address">
	Add a router address.
	<optgroup mandatory="True" fields="all">
	    <option name="fqdn" type="string">Name of the router</option>
	</optgroup>
	<optgroup>
	    <option name="network_environment" type="string">Network environment (default: internal)</option>
	    <option name="building" type="string">Building where the router is located</option>
	    <option name="ip" type="ipv4">IP address of the router</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="router_address"/>
    </command>

    <command name="del_router_address">
	Delete a router address.
	<optgroup mandatory="True" fields="one">
	    <option name="fqdn" type="string">Name of the router</option>
	    <option name="ip" type="ipv4">IP address of the router</option>
	</optgroup>
	<optgroup>
	    <option name="network_environment" type="string">Network environment (default: internal)</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="router_address"/>
    </command>

    <command name="show_router_address">
	Display a router address.
	<optgroup fields="one">
	    <option name="fqdn" type="string">Name of the router</option>
	    <option name="ip" type="ipv4">IP address of the router</option>
	    <option name="all" type="flag">Show all routers</option>
	</optgroup>
	<optgroup>
	    <option name="network_environment" type="string">Network environment (default: internal)</option>
	</optgroup>
	<transport method="get" path="router_address"/>
    </command>

    <command name="update_router_address">
	Update router information.
	<optgroup mandatory="True" fields="one">
	    <option name="fqdn" type="string">Name of the router</option>
	    <option name="ip" type="ipv4">IP address of the router</option>
	</optgroup>
	<optgroup>
	    <option name="network_environment" type="string">Network environment (default: internal)</option>
	    <option name="dns_environment" type="string">DNS environment (default: internal)</option>
	    <option name="building" type="string">Building where the router is located</option>
	    <option name="comments" type="string">Router comments</option>
	    <option name="clear_location" type="flag" conflicts="building">Clear the location mapping</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="router_address"/>
    </command>

    <command name="add_static_route">
	Add a static route.
	<optgroup mandatory="True" fields="all">
	    <option name="ip" type="ipv4">Address of the destination network range</option>
	    <optgroup fields="one">
		<option name="netmask" type="string">Netmask as dotted quad</option>
		<option name="prefixlen" type="int">Network prefix length</option>
	    </optgroup>
	    <optgroup fields="one">
		<option name="gateway" type="ipv4">Address of the gateway</option>
		<option name="networkip" type="ipv4">Network IP address</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="personality" type="string">Personality name</option>
	    <option name="personality_stage" requires="personality" type="string">Personality stage to use, defaults to 'next'.</option>
	    <option name="archetype" requires="personality" type="string">Archetype name</option>
	    <option name="network_environment" type="string">Network environment (default: internal)</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">String to be specified if justification='emergency'</option>
	</optgroup>
	<transport method="put" path="static_route"/>
    </command>

    <command name="del_static_route">
	Delete a static route.
	<optgroup mandatory="True" fields="all">
	    <option name="gateway" type="ipv4">Address of the gateway</option>
	    <option name="ip" type="ipv4">Address of the destination network range</option>
	    <optgroup fields="one">
		<option name="netmask" type="string">Netmask as dotted quad</option>
		<option name="prefixlen" type="int">Network prefix length</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="personality" type="string">Personality name</option>
	    <option name="personality_stage" requires="personality" type="string">Personality stage to use, defaults to 'next'.</option>
	    <option name="archetype" requires="personality" type="string">Archetype name</option>
	    <option name="network_environment" type="string">Network environment (default: internal)</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">String to be specified if justification='emergency'</option>
	</optgroup>
	<transport method="delete" path="static_route"/>
    </command>

    <command name="update_interface">
	Update information about the named interface (IP, MAC, or comments).
	<p/>
	To rename the interface, add the new interface and delete the old.
	If the boot flag is given, the interface will be marked bootable,
	and any other interface attached to the machine will have the bootable
	flag set to false.
	<p/>
	The default_route flag may be set on multiple interfaces to indicate that they should be used
	with equal cost. Note that for compatibility reasons, setting the boot flag also sets the
	default_route flag, and removes it from any other interfaces.
	<p/>
	For this change to take affect at the host level, run aq reconfigure.
	<p/>
	Note that updating the IP address is no longer supported. Use the add_interface_address and
	del_interface_address commands to manage auxiliary IP address allocations. Use the
	update_network_device, update_chassis and update_machine commands if you wish to change the primary IP address.
	<optgroup mandatory="True" fields="all">
	    <optgroup mandatory="True" fields="one">
		<option name="machine" type="string">Machine name</option>
		<option name="hostname" type="string">Host name</option>
		<option name="network_device" type="string">Network device name</option>
		<option name="switch" type="string">[Deprecated] Switch name</option>
		<option name="chassis" type="string">Chassis name</option>
	    </optgroup>
	    <option name="interface" type="string">Interface name</option>
	</optgroup>
	<optgroup fields="one">
	    <option name="pg" type="string">portgroup, or an empty string to clear</option>
	    <option name="autopg" type="flag">choose portgroup based on switch</option>
	</optgroup>
	<optgroup>
	    <option name="mac" type="mac">MAC address</option>
	    <option name="boot" type="flag">Mark the interface as bootable</option>
	    <option name="default_route" type="boolean">Mark that the interface provides the default route</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="master" type="string" conflicts="ip clear_master">Enslave interface to the given master</option>
	    <option name="clear_master" type="flag" conflicts="master">Clear the bonding</option>
	    <option name="model" type="string">Interface model name</option>
	    <option name="vendor" type="string" requires="model">Interface vendor name</option>
	    <option name="rename_to" type="string">New name of the interface</option>
	    <option name="bus_address" type="string">Hardware bus address of the controller hosting the disk</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport trigger="machine" method="post" path="machine/%(machine)s/interface/%(interface)s"/>
	<transport trigger="hostname" method="post" path="host/%(hostname)s/interface/%(interface)s"/>
	<transport trigger="network_device" method="post" path="network_device/%(network_device)s/interface/%(interface)s"/>
	<transport trigger="switch" method="post" path="switch/%(switch)s/interface/%(interface)s"/>
	<transport trigger="chassis" method="post" path="chassis/%(chassis)s/interface/%(interface)s"/>
    </command>

    <command name="del_interface">
	Delete a network interface from the database.
	<p/>
	The interface can be specified either by its MAC address or as a
	machine/interface name pair. If a machine has just a single interface
	then just specifying the machine name is enough.
	<p/>
	Note that you can not select an interface by IP address since the object
	that owns the IP address would have to be deleted before deleting the
	interface anyway.
	<optgroup mandatory="True">
	    <option name="interface" type="string">Interface name</option>
	    <option name="machine" type="string">Machine name</option>
	    <option name="switch" type="string">[Deprecated] Switch name</option>
	    <option name="network_device" type="string">Network device name</option>
	    <option name="chassis" type="string">Chassis name</option>
	    <option name="mac" type="mac">MAC address</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" trigger="network_device" path="network_device/%(network_device)s/interface/command/del"/>
	<transport method="post" trigger="switch" path="switch/%(switch)s/interface/command/del"/>
	<transport method="post" path="interface/command/del"/>
    </command>

    <command name="add_interface_address">
	Assign a new IP address to an interface.
	<p/>
	If you specify only --fqdn, and none of the IP generation options, then
	the appropriate DNS record must already exist. If you specify both --fqdn
	and an IP generation option, then a new DNS record will be created.
	<optgroup mandatory="True" fields="all">
	    <optgroup fields="one">
		<option name="machine" type="string">Machine name</option>
		<option name="chassis" type="string">Chassis name</option>
		<option name="network_device" type="string">Network device name</option>
		<option name="switch" type="string">[Deprecated] Switch name</option>
	    </optgroup>
	    <option name="interface" type="string">Name of the interface.</option>
	</optgroup>
	<optgroup fields="one">
	    <option name="fqdn" type="string">FQDN of the new address</option>
	    <option name="shortname" type="string">Relative part of the FQDN</option>
	</optgroup>
	<optgroup>
	    <option name="network_environment" type="string">Network environment (default: internal)</option>
	    <option name="label" type="string">Interface alias of the new address</option>
	    <option name="ipalgorithm" type="string">Algorithm for automatically choosing an IP.</option>
	    <option name="map_to_primary" type="boolean">Should the reverse PTR point to the primary name?</option>
	    <option name="shared" type="flag">Allow the address to be used multiple times</option>
	    <option name="priority" type="int">Priority of shared address</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<optgroup fields="one">
	    <option name="ip" type="ipv4">IP address</option>
	    <option name="ipfromip" type="ipv4">choose IP address in subnet</option>
	    <option name="ipfromsystem" type="string">choose IP address in subnet of system</option>
	    <option name="autoip" type="flag">choose IP address based on MAC/switch</option>
	</optgroup>
	<transport method="put" trigger="network_device" path="network_device/%(network_device)s/interface/%(interface)s/address"/>
	<transport method="put" trigger="switch" path="switch/%(switch)s/interface/%(interface)s/address"/>
	<transport method="put" path="interface_address"/>
    </command>

    <command name="del_interface_address">
	Delete an IP address from an interface.
	<optgroup mandatory="True" fields="all">
	    <optgroup mandatory="True" fields="one">
		<option name="machine" type="string">Machine name</option>
		<option name="chassis" type="string">Chassis name</option>
		<option name="network_device" type="string">Network device name</option>
		<option name="switch" type="string">[Deprecated] Switch name</option>
	    </optgroup>
	    <option name="interface" type="string">Name of the interface</option>
	    <optgroup>
		<option name="fqdn" type="string" conflicts="ip">FQDN of the address</option>
		<option name="ip" type="ipv4" conflicts="fqdn">IP address</option>
		<option name="label" type="string" conflicts="fqdn">Interface alias</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="keep_dns" type="flag">Keep the DNS record</option>
	    <option name="network_environment" type="string">Network environment (default: internal)</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" trigger="network_device" path="network_device/%(network_device)s/interface/%(interface)s/address"/>
	<transport method="delete" trigger="switch" path="switch/%(switch)s/interface/%(interface)s/address"/>
	<transport method="delete" path="interface_address"/>
    </command>

    <command name="add_service">
	Add a new service. If --instance is also specified, then also
	create a named instance for this service at the same time. Default templates
	describing the service will be created so that any service instances can be
	immediately used (bound and configured) by clients.
	<p/>
	The need_client_list option can be used to have a server that
	provides the service receive a full list of clients as part of its
	profile. The default is false.
	<optgroup mandatory="True" fields="all">
	    <option name="service" type="string" mandatory="True">service name</option>
	</optgroup>
	<optgroup>
	    <option name="comments" type="string">Comments</option>
	    <option name="instance" type="string">Instance</option>
	    <option name="need_client_list" type="boolean">Need client list in templates</option>
	    <option name="allow_alias_bindings" type="boolean">Allow servers to be bound by alias</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="service/%(service)s"/>
	<transport trigger="instance" method="put" path="service/%(service)s/instance/%(instance)s"/>
    </command>

    <command name="show_service">
	Show the configuration of a service. All instances of the service will
	be listed, the number of clients bound to that service and any service mappings.
	If --all is specified, then the configuration of all services will be shown.
	<optgroup mandatory="True">
	    <option name="service" type="string">Service name</option>
	    <option name="server" type="string" conflict="client all">Server hostname</option>
	    <option name="client" type="string" conflicts="server all">Client hostname</option>
	    <option name="all" type="flag" conflicts="service client server">Select all services</option>
	</optgroup>
	<optgroup>
	    <option name="instance" type="string" conflicts="all">Service Instance</option>
	</optgroup>
	<transport trigger="service" method="get" path="service/%(service)s"/>
	<transport trigger="all" method="get" path="service"/>
	<transport method="get" path="command/show_service"/>
	<format name="proto" >
	    <message_class name="ServiceList" module="aqdservices_pb2"/>
	</format>
    </command>

    <command name="search_service">
	Search for services.
	<optgroup mandatory="True">
	    <option name="service" type="string">Service name</option>
	    <option name="instance" type="string">Service instance name</option>
	    <option name="server_hostname" type="string">Server hostname</option>
	    <option name="server_cluster" type="string">Server cluster name</option>
	    <option name="server_metacluster" type="string">Server metacluster name</option>
	    <optgroup fields="one">
		<option name="server_organization" type="string">Organization</option>
		<option name="server_hub" type="string">Hub</option>
		<option name="server_continent" type="string">Continent</option>
		<option name="server_country" type="string">Country</option>
		<option name="server_campus" type="string">Campus</option>
		<option name="server_city" type="string">City</option>
		<option name="server_building" type="string">Building</option>
		<option name="server_room" type="string">Room</option>
		<option name="server_bunker" type="string">Bunker</option>
		<option name="server_rack" type="string">Rack</option>
		<option name="server_desk" type="string">Desk</option>
	    </optgroup>
	    <option name="client_hostname" type="string">Client hostname</option>
	    <option name="client_cluster" type="string">Client cluster name</option>
	    <option name="client_metacluster" type="string">Client metacluster name</option>
	    <optgroup fields="one">
		<option name="client_organization" type="string">Organization</option>
		<option name="client_hub" type="string">Hub</option>
		<option name="client_continent" type="string">Continent</option>
		<option name="client_country" type="string">Country</option>
		<option name="client_campus" type="string">Campus</option>
		<option name="client_city" type="string">City</option>
		<option name="client_building" type="string">Building</option>
		<option name="client_room" type="string">Room</option>
		<option name="client_bunker" type="string">Bunker</option>
		<option name="client_rack" type="string">Rack</option>
		<option name="client_desk" type="string">Desk</option>
	    </optgroup>
	    <option name="has_clients" reverse="no_clients" type="boolean">Select instances having clients bound</option>
	</optgroup>
	<optgroup>
	    <option name="server_exact_location" type="flag">Match the server location exactly</option>
	    <option name="client_exact_location" type="flag">Match the client location exactly</option>
	    <option name="fullinfo" type="flag">Show full information for the matching services</option>
	</optgroup>
	<transport method="get" path="find/service"/>
	<format name="proto" >
	    <message_class name="ServiceList" module="aqdservices_pb2"/>
	</format>
    </command>

    <command name="update_service">
	Update the maximum client count for a service or service instance.
	<p/>
	The maximum client count for a service instance will default to
	the value set for the service.  The maximum client count for a
	service defaults to unlimited.
	<optgroup mandatory="True" fields="all">
	    <option name="service" type="string" mandatory="True">service name</option>
	</optgroup>
	<optgroup>
	    <option name="max_clients" type="int" conflicts="default">Maximum number of client bindings for an instance</option>
	    <option name="default" type="flag" conflicts="max_clients">Restore default setting</option>
	    <option name="need_client_list" type="boolean" conflicts="instance">Need client list in templates</option>
	    <option name="allow_alias_bindings" type="boolean">Allow servers to be bound by alias</option>
	    <option name="instance" type="string">Instance name</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="service/%(service)s"/>
	<transport trigger="instance" method="post" path="service/%(service)s/instance/%(instance)s"/>
    </command>

    <command name="del_service">
	Delete a service. The command will fail if any servers or clients are marked
	as being bound to any of the instances of the service.
	<optgroup mandatory="True" fields="all">
	    <option name="service" type="string" mandatory="True">service name</option>
	</optgroup>
	<optgroup>
	    <option name="instance" type="string">instance name</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="service/%(service)s"/>
	<transport trigger="instance" method="delete" path="service/%(service)s/instance/%(instance)s"/>
    </command>

    <command name="bind_client">
	Bind a service to a client.  If no instance is given and a relevant
	service map has been defined, an instance will be picked automatically.
	If the client already has the service bound, this will fail: use rebind
	client instead.
	<optgroup mandatory="True" fields="all">
	    <optgroup fields="one">
		<option name="hostname" type="string">Host name</option>
		<option name="cluster" type="string">Host name</option>
		<option name="metacluster" type="string">Host name</option>
	    </optgroup>
	    <option name="service" type="string">Service name</option>
	</optgroup>
	<optgroup>
	    <option name="instance" type="string">Instance name</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" trigger="hostname" path="host/%(hostname)s/client_of_service/%(service)s"/>
	<transport method="put" trigger="cluster" path="cluster/%(cluster)s/client_of_service/%(service)s"/>
	<transport method="put" trigger="metacluster" path="metacluster/%(metacluster)s/client_of_service/%(service)s"/>
    </command>

    <command name="rebind_client">
	Bind a service to a client.  If no instance is given and a relevant
	service map has been defined, an instance will be picked automatically.
	If the client already has the service bound, this will override the old value.
	<optgroup mandatory="True" fields="all">
	    <optgroup fields="one">
		<option name="hostname" type="string">Host name</option>
		<option name="cluster" type="string">Host name</option>
		<option name="metacluster" type="string">Host name</option>
	    </optgroup>
	    <option name="service" type="string">Service name</option>
	</optgroup>
	<optgroup>
	    <option name="instance" type="string">Instance name</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" trigger="hostname" path="host/%(hostname)s/client_of_service/%(service)s"/>
	<transport method="post" trigger="cluster" path="cluster/%(cluster)s/client_of_service/%(service)s"/>
	<transport method="post" trigger="metacluster" path="metacluster/%(metacluster)s/client_of_service/%(service)s"/>
    </command>

    <command name="unbind_client">
	Unbind a service from a client.
	<optgroup mandatory="True" fields="all">
	    <optgroup fields="one">
		<option name="hostname" type="string">Host name</option>
		<option name="cluster" type="string">Host name</option>
		<option name="metacluster" type="string">Host name</option>
	    </optgroup>
	    <option name="service" type="string">Service name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" trigger="hostname" path="host/%(hostname)s/client_of_service/%(service)s"/>
	<transport method="delete" trigger="cluster" path="cluster/%(cluster)s/client_of_service/%(service)s"/>
	<transport method="delete" trigger="metacluster" path="metacluster/%(metacluster)s/client_of_service/%(service)s"/>
    </command>

    <command name="bind_server">
	Bind a server as a provider of the service instance.
	If the server is already bound as a provider of the service for a
	different instance, this fails.
	<optgroup mandatory="True" fields="all">
	    <option name="service" type="string">Service name</option>
	    <option name="instance" type="string">Instance name</option>
	    <optgroup>
		<option name="hostname" type="string" conflicts="cluster">Server name</option>
		<option name="cluster" type="string" conflicts="hostname ip">Cluster name</option>
		<option name="alias" type="string">Use this alias instead of the real server name when configuring clients</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="ip" type="ipv4" conflicts="service_address cluster">IP address of the host that provides this service</option>
	    <option name="service_address" type="string" conflicts="ip">The service address of the host/cluster that provides this service</option>
	    <option name="resourcegroup" type="string">Resourcegroup containing the service address</option>
	    <option name="position" type="int">Position in the list</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="service/%(service)s/instance/%(instance)s/bind"/>
    </command>

    <command name="unbind_server">
	Unbind a server as a provider of the service (instance).
	<optgroup mandatory="True" fields="all">
	    <option name="service" type="string">Service name</option>
	    <optgroup>
		<option name="instance" type="string">Instance name</option>
		<option name="all" type="flag">Remove server from all instances of this service</option>
	    </optgroup>
	    <optgroup>
		<option name="position" type="int" conflicts="hostname cluster alias">Server definition at the given position</option>
		<option name="hostname" type="string" conflicts="cluster position">Server name</option>
		<option name="cluster" type="string" conflicts="hostname ip position">Cluster name</option>
		<option name="alias" type="string" conflicts="position">Alias name</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="ip" type="ipv4" conflicts="service_address cluster">IP address of the host that provides this service</option>
	    <option name="service_address" type="string" conflicts="ip">The service address of the host/cluster that provides this service</option>
	    <option name="resourcegroup" type="string">Resourcegroup containing the service address</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport trigger="instance" method="delete" path="service/%(service)s/instance/%(instance)s/bind"/>
	<transport method="delete" path="service/%(service)s/bind"/>
    </command>

    <command name="add_required_service">
	Add a required service for an archetype or for only a particular
	personality in the archetype.  Once a service is required, then
	any time a host of that archetype or personality is built, it
	will cause an implicit bind_server to occur for any unbound
	required services.  If an instance cannot be automatically bound,
	then hosts will fail to build, therefore you should ensure that
	any required services have appropriate service mappings to
	declare which instances to use by default.
	<optgroup mandatory="True" fields="all">
	    <option name="service" type="string" mandatory="True">service name</option>
	    <option name="archetype" type="string" mandatory="True">archetype name</option>
	</optgroup>
	<optgroup>
	    <optgroup fields="one">
		<option name="personality" type="string">personality name</option>
		<optgroup fields="all">
		    <option name="osname" type="string">OS name</option>
		    <option name="osversion" type="string">OS version</option>
		</optgroup>
	    </optgroup>
	    <option name="personality_stage" requires="personality" type="string">Personality stage to use, defaults to 'next'.</option>
	    <option name="environment_override" requires="personality" type="string">Override environment selection for this service</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">String to be specified if justification='emergency'</option>
	</optgroup>
	<transport method="put" path="service/%(service)s/required_for/archetype/%(archetype)s"/>
	<transport trigger="personality" method="put" path="service/%(service)s/required_for/personality/%(archetype)s/%(personality)s"/>
	<transport trigger="osname" method="put" path="service/%(service)s/required_for/operating_system/%(archetype)s/%(osname)s"/>
    </command>

    <command name="show_archetype">
	Show information about an archetype, including required services.
	<optgroup mandatory="True" fields="one">
	    <option name="archetype" type="string">archetype name</option>
	    <option name="all" type="flag">Select all services</option>
	</optgroup>
	<transport trigger="archetype" method="get" path="archetype/%(archetype)s"/>
	<transport trigger="all" method="get" path="archetype"/>
	<format name="proto">
	    <message_class name="ArchetypeList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="del_required_service">
	Delete a service from the list of required services for an
	archetype or personality.  Hosts which are already bound to a
	service because it used to be required will be unmodified. If
	you wish to unbind those clients, you must do so manually.
	<optgroup mandatory="True" fields="all">
	    <option name="service" type="string" mandatory="True">service name</option>
	    <option name="archetype" type="string" mandatory="True">archetype name</option>
	</optgroup>
	<optgroup>
	    <optgroup fields="one">
		<option name="personality" type="string">personality name</option>
		<optgroup fields="all">
		    <option name="osname" type="string">OS name</option>
		    <option name="osversion" type="string">OS version</option>
		</optgroup>
	    </optgroup>
	    <option name="personality_stage" requires="personality" type="string">Personality stage to use, defaults to 'next'.</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">String to be specified if justification='emergency'</option>
	</optgroup>
	<transport method="delete" path="service/%(service)s/required_for/archetype/%(archetype)s"/>
	<transport trigger="personality" method="delete" path="service/%(service)s/required_for/personality/%(archetype)s/%(personality)s"/>
	<transport trigger="osname" method="delete" path="service/%(service)s/required_for/operating_system/%(archetype)s/%(osname)s"/>
    </command>

    <command name="map_service">
	Map a service instance to a location. This declares that the specified service
	instance is default within a specific location, and will be a candidate for
	automatic selection during any bind_server (or rebuilds that invoke bind_server)
	commands.
	<optgroup mandatory="True" fields="all">
	    <option name="service" type="string" mandatory="True">service name</option>
	    <option name="instance" type="string" mandatory="True">instance name</option>
	    <optgroup fields="one">
		<option name="organization" type="string">Organization</option>
		<option name="hub" type="string">Hub</option>
		<option name="continent" type="string">Continent</option>
		<option name="country" type="string">Country</option>
		<option name="campus" type="string">Campus</option>
		<option name="city" type="string">City</option>
		<option name="building" type="string">Building</option>
		<option name="room" type="string">Room</option>
		<option name="bunker" type="string">Bunker</option>
		<option name="rack" type="string">Rack</option>
		<option name="desk" type="string">Desk</option>
		<option name="networkip" type="ipv4">Network IP address</option>
	    </optgroup>
	</optgroup>
	<optgroup fields="one">
	    <optgroup fields="all">
		<option name="archetype" type="string">Archetype name</option>
		<option name="personality" type="string">Personality name</option>
	    </optgroup>
	    <option name="host_environment" type="string">Host environment</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">String to be specified if justification='emergency'</option>
	</optgroup>
	<transport method="post" path="service/%(service)s/instance/%(instance)s/command/map"/>
    </command>

    <command name="show_map">
	Show any relevant mappings for the given service, instance, or location.
	<optgroup mandatory="True">
	    <option name="service" type="string">service name</option>
	    <option name="instance" type="string">instance name</option>
	    <option name="archetype" type="string">archetype name</option>
	    <option name="personality" type="string">personality name</option>
	    <option name="host_environment" type="string">host environment</option>
	    <optgroup fields="one">
		<option name="organization" type="string">Organization</option>
		<option name="hub" type="string">Hub</option>
		<option name="continent" type="string">Continent</option>
		<option name="country" type="string">Country</option>
		<option name="campus" type="string">Campus</option>
		<option name="city" type="string">City</option>
		<option name="building" type="string">Building</option>
		<option name="room" type="string">Room</option>
		<option name="bunker" type="string">Bunker</option>
		<option name="rack" type="string">Rack</option>
		<option name="desk" type="string">Desk</option>
		<option name="networkip" type="ipv4">Network IP address</option>
	    </optgroup>
	    <option name="all" type="flag">show all maps</option>
	</optgroup>
	<optgroup>
	    <option name="include_parents" type="flag">Include mappings of parent locations</option>
	</optgroup>
	<transport method="get" trigger="all" path="show/map_all"/>
	<transport method="get" path="show/map"/>
	<format name="proto" >
	    <message_class name="ServiceMapList" module="aqdservices_pb2"/>
	</format>
    </command>

    <command name="unmap_service">
	Remove the map from a service instance to a location. Existing bindings of
	clients will remain unmodified.
	<optgroup mandatory="True" fields="all">
	    <option name="service" type="string" mandatory="True">service name</option>
	    <option name="instance" type="string" mandatory="True">instance name</option>
	    <optgroup mandatory="True" fields="one">
		<option name="organization" type="string">Organization</option>
		<option name="hub" type="string">Hub</option>
		<option name="continent" type="string">Continent</option>
		<option name="country" type="string">Country</option>
		<option name="campus" type="string">Campus</option>
		<option name="city" type="string">City</option>
		<option name="building" type="string">Building</option>
		<option name="room" type="string">Room</option>
		<option name="bunker" type="string">Bunker</option>
		<option name="rack" type="string">Rack</option>
		<option name="desk" type="string">Desk</option>
		<option name="networkip" type="ipv4">Network IP address</option>
	    </optgroup>
	</optgroup>
	<optgroup fields="one">
	    <optgroup fields="all">
		<option name="archetype" type="string">Archetype name</option>
		<option name="personality" type="string">Personality name</option>
	    </optgroup>
	    <option name="host_environment" type="string">Host environment</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">String to be specified if justification='emergency'</option>
	</optgroup>
	<transport method="post" path="service/%(service)s/instance/%(instance)s/command/unmap"/>
    </command>

    <command name="del_host">
	Delete a host. This will fail if the host is being used to provide
	any services. Once the host has been deleted, all configuration data will
	be discarded and the host will be unable to rebuild.
	<optgroup mandatory="True" fields="all">
	    <option name="hostname" type="string">Host name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="host/%(hostname)s"/>
    </command>

    <command name="del_windows_host">
	Delete a host with the windows archetype.  This is a simple wrapper
	over del_host and only exists for handling entitlements.
	<optgroup mandatory="True" fields="all">
	    <option name="hostname" type="string">Host name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="windows_host/%(hostname)s"/>
    </command>

    <command name="pxeswitch">
	Change the way the host boots.  At boot, the host may either reboot
	from local disk (--localboot), or it can reinstall (--install). The
	pxeswitch switches the default by changing the configuration on the
	host's bootserver.
	After a successful installation, the host will automatically pxeswitch
	itself back to local disk booting.
	The --configure option forces a reset of the configuration files for this host on
	the bootserver.
	The --list option can be used to change multiple hosts at the same time. The
	argument to --list is a filename containing a list of hostnames, one per line.
	All hosts will be set to the same status.
	<optgroup mandatory="True" fields="one">
	    <option name="hostname" type="string">Host name</option>
	    <option name="list" type="list">file containing hostnames</option>
	</optgroup>
	<optgroup fields="one">
	    <option name="status" type="flag">display the current status of how the host will boot</option>
	    <option name="localboot" type="flag">set the host to boot from local disk</option>
	    <option name="install" type="flag">set the host to install from the network at next reboot</option>
	    <option name="firmware" type="flag">set the host to boot its firmware image</option>
	    <option name="blindbuild" type="flag">set the host to boot a blindbuild livecd image</option>
	    <option name="rescue" type="flag">set the host to boot a rescue image</option>
	</optgroup>
	<optgroup>
	    <option name="configure" type="boolean" default="True">(re)initialize the pxeswitch configuration (the default)</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="host/%(hostname)s/command/pxeswitch"/>
	<transport trigger="list" method="post" path="command/pxeswitch/list"/>
    </command>

    <command name="reconfigure">
	re-build the configuration settings for the specified host, using
	all of the current service bindings and definitions.  This
	"flushes" any configuration settings, by: regenerating the host
	profile; checking all service bindings against the service maps;
	forcing the bootservers to rebuild their state for this host;
	notifying all datawarehouse tools that the host has been updated;
	notifying the host that it's configuration has been updated. These
	tasks are done even if there is no real change in configuration.
	It's the same as just running "make" again, with the
	original arguments.  Any services that are not listed as required
	for the personality or the archetype are dropped unless the
	--keepbindings flag is specified.
	<optgroup mandatory="True" fields="one">
	    <option name="hostname" type="string">Host name</option>
	    <option name="hostlist" type="list">[Deprecated] File with one host per line</option>
	    <option name="list" type="list">File with one host per line</option>
	    <option name="membersof" type="string">Hosts which are members of the specified cluster</option>
	</optgroup>
	<optgroup>
	    <option name="osname" type="string">name of the OS to assign to the host (linux, windows, esx, etc.)</option>
	    <option name="osversion" type="string">version of the OS</option>
	    <option name="archetype" type="string">Archetype of the personality</option>
	    <option name="personality" type="string">Personality of the host</option>
	    <option name="personality_stage" type="string">Personality stage to use, defaults to 'current'.</option>
	    <option name="buildstatus" type="string">Update host buildstatus to 'build' or 'ready'</option>
	    <option name="keepbindings" type="boolean">Preserve service bindings that are not required</option>
	    <option name="cleargrn" type="flag" conflicts="grn eon_id">Clear owner grn</option>
	    <option name="comments" type="string">Update comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<optgroup fields="one">
	    <option name="grn" type="string">GRN as string</option>
	    <option name="eon_id" type="int">Numeric EON ID</option>
	</optgroup>
	<transport method="post" path="host/%(hostname)s/command/reconfigure"/>
	<transport trigger="list" method="post" path="command/reconfigure/list"/>
	<transport trigger="hostlist" method="post" path="command/reconfigure/hostlist"/>
	<transport trigger="membersof" method="post" path="command/reconfigure/membersof/%(membersof)s"/>
    </command>

    <command name="change_status">
	Update the buildstatus for a host/cluster and recompile its profile.
	This command does not verify the service bindings of the host or cluster.

	Changing the buildstatus may cause the configuration to be different
	(for example, while hosts are in "build" status, they are not available
	for general login access) and so any affected profiles will be recompiled.

	Changing a cluster buildstatus may cause the member hosts to also change their
	buildstatus.
	<optgroup mandatory="True" fields="all">
	    <optgroup fields="one">
		<option name="hostname" type="string">Host name</option>
		<option name="cluster" type="string">Cluster name</option>
		<option name="metacluster" type="string">Metacluster name</option>
	    </optgroup>
	    <option name="buildstatus" type="string">The new value of the buildstatus</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="host/%(hostname)s/buildstatus/%(buildstatus)s"/>
	<transport method="post" trigger="cluster" path="cluster/%(cluster)s/buildstatus/%(buildstatus)s"/>
	<transport method="post" trigger="metacluster" path="metacluster/%(metacluster)s/buildstatus/%(buildstatus)s"/>
    </command>

    <command name="reset_advertised_status">
	Reset the advertised status for a host to build and recompile its profile.
	This command does not verify the service bindings of the host. The advertise
	status will automaticlaly flip to true once the host status changes to 'ready'.

	Changing the advertised may cause the configuration to be different
	(for example, while hosts are in "build" status, they are not available
	for general login access) and so any affected profiles will be recompiled.

	<optgroup mandatory="True" fields="all">
	    <optgroup fields="one">
		<option name="hostname" type="string">Host name</option>
		<option name="list" type="list">File with one host per line</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="host/%(hostname)s/command/resetadvertisedstatus"/>
	<transport trigger="list" method="post" path="command/resetadvertisedstatus/list"/>
    </command>

    <command name="add_domain">
	Add a new server-managed template domain.  Updates to these domains
	can only be made through the broker.  A domain can either allow new
	content to be merged in or can track another domain.

	A tracking domain is useful because it can be rolled back to a
	previous state quickly.  Such a domain is initialized to point to
	the same commit as the branch it is tracking.

	If a domain is not directly tracking another it still needs to
	be initialized to start somewhere.  This is specified with the
	start option.  The default is the head of the prod domain.

	Either type of domain can be used with the "manage" command in
	order to assign some hosts to the domain and run complete tests.
	<p/>
	Setting the --change_manager flag will require a valid TCM or
	Service Now id passed into the "aq deploy" command's --justification
	option for the deploy to work.
	<optgroup mandatory="True" fields="all">
	    <option name="domain" type="string">Name of the new domain</option>
	</optgroup>
	<optgroup>
	    <option name="track" type="string" conflicts="start">Branch to track</option>
	    <option name="start" type="string" conflicts="track">Branch to use as a starting point (default: prod)</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="change_manager" type="boolean">Require a change manager for the domain</option>
	    <option name="allow_manage" reverse="disallow_manage" type="boolean">Control managing hosts to the domain</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="domain/%(domain)s"/>
    </command>

    <command name="update_archetype">
	Update the meta-information for an archetype.  If the compilable flag
	is not given the attribute will be set to false for the archetype.

	<optgroup mandatory="True" fields="all">
	    <option name="archetype" type="string">Name of the archetype</option>
	</optgroup>
	<optgroup>
	    <option name="compilable" type="boolean">Can profiles be compiled?</option>
	    <option name="description" type="string">A human-readable description of the archetype name</option>
	    <option name="cluster_type" type="string">Only for cluster archetypes - what type of cluster is this?</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="archetype/%(archetype)s"/>
    </command>

    <command name="update_sandbox">
	Update the meta-information for a template sandbox.  This includes
	comments about the sandbox, the version of the pan compiler to use,
	and whether to automatically sync deployed or published changes
	to tracking domains.
	<optgroup mandatory="True" fields="all">
	    <option name="sandbox" type="string">Name of the template sandbox</option>
	</optgroup>
	<optgroup>
	    <option name="comments" type="string">Comments on the branch</option>
	    <option name="compiler_version" type="string">Version of panc to use</option>
	    <option name="autosync" type="boolean">Set the autosync flag</option>
	    <option name="profile_formats" type="string">Profile formats to generate</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="sandbox/%(sandbox)s"/>
    </command>

    <command name="update_domain">
	Update the meta-information for a template domain.  This includes
	comments about the domain, the version of the pan compiler to use,
	and whether to automatically sync deployed or published changes
	to tracking domains.
	<optgroup mandatory="True" fields="all">
	    <option name="domain" type="string">Name of the template domain</option>
	</optgroup>
	<optgroup>
	    <option name="comments" type="string">Comments on the domain</option>
	    <option name="compiler_version" type="string">Version of panc to use</option>
	    <option name="autosync" type="boolean">Set the autosync flag</option>
	    <option name="change_manager" type="boolean">Require a change manager for the domain</option>
	    <option name="allow_manage" reverse="disallow_manage" type="boolean">Control managing hosts to the domain</option>
	    <option name="profile_formats" type="string">Profile formats to generate</option>
	    <option name="archived" type="boolean">Mark the domain as archived</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="domain/%(domain)s"/>
    </command>

    <command name="del_domain">
	Removes the specified template domain.  This will fail if there are
	hosts still being managed by the domain (use the "manage"
	command to reassign those hosts to other domains), or if the
    domain is a non-tracking domain which has not been set as archived.
	<optgroup mandatory="True" fields="all">
	    <option name="domain" type="string">Name of the domain to be deleted</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Extra authorization tokens (e.g. TCM number) to validate the request</option>
	    <option name="reason" type="string">Reason for the operation</option>
	</optgroup>
	<transport method="delete" path="domain/%(domain)s"/>
    </command>

    <command name="add_sandbox">
	Add a new template sandbox.  This is for testing changes to the
	templates.  The new sandbox will have no hosts when it is freshly
	created and you should use the "manage" command in order to assign
	some hosts to the sandbox in order to run complete tests.

	After adding the sandbox branch on the broker the client will
	automatically attempt to run a 'get' for the user.  This can be
	disabled with the --noget flag.
	<optgroup mandatory="True" fields="all">
	    <option name="sandbox" type="string">Name of the new sandbox</option>
	</optgroup>
	<optgroup>
	    <option name="start" type="string">Branch to use as a starting point (default: prod)</option>
	    <option name="get" type="boolean" default="False">Create the user-controlled sandbox automatically.</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="sandbox/%(sandbox)s" expect="sandbox"/>
    </command>

    <command name="get">
	Create a working copy of the templates in a sandbox.  The
	templates will be placed in a shared location that the broker
	will still be able to read.
	<optgroup mandatory="True" fields="all">
	    <option name="sandbox" type="string">Name of the sandbox</option>
	</optgroup>
	<transport method="post" path="sandbox/%(sandbox)s/command/get" expect="sandbox"/>
    </command>

    <command name="publish">
	Upload the template changes in the current directory to the
	specified template sandbox branch.  This makes the changes
	available to others for review and for the deploy command.
	The manage and compile commands can be used before running
	publish to test the changes.
	<optgroup mandatory="True" fields="one">
	    <option name="branch" type="string">Name of the sandbox update</option>
	    <option name="sandbox" type="string">Name of the sandbox update</option>
	</optgroup>
	<optgroup>
	    <option name="sync" type="boolean" default="True">Automatically sync tracking domains</option>
	    <option name="rebase" type="flag">Allow rebasing the branch</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="command/publish" custom="create_bundle" expect="command"/>
    </command>

    <command name="request_review">
	Announce the intention of deploying a sandbox or domain into a target domain, and ask for review and testing.
	<optgroup mandatory="True" fields="all">
	    <option name="source" type="string">Name of the branch (domain or sandbox) with changes</option>
	    <option name="target" type="string">Name of the target domain</option>
	</optgroup>
	<transport method="put" path="review/target/%(target)s/source/%(source)s"/>
    </command>

    <command name="del_review">
	<optgroup mandatory="True" fields="all">
	    <option name="source" type="string">Name of the branch (domain or sandbox) with changes</option>
	    <option name="target" type="string">Name of the target domain</option>
	</optgroup>
	<transport method="delete" path="review/target/%(target)s/source/%(source)s"/>
    </command>

    <command name="update_review">
	<optgroup mandatory="True" fields="all">
	    <option name="source" type="string">Name of the branch (domain or sandbox) with changes</option>
	    <option name="target" type="string">Name of the target domain</option>
	</optgroup>
	<optgroup>
	    <option name="commit_id" type="string">Commit ID of the source the update is valid for</option>
	    <option name="testing_succeeded" reverse="testing_failed" type="boolean" requires="commit_id">Update the testing status</option>
	    <option name="testing_url" type="string" requires="commit_id">Update the test artifact URL</option>
	    <option name="target_commit_tested" type="string" requires="testing_succeeded">Commit ID of the target which was tested</option>
	    <option name="review_url" type="string">Update the code review URL</option>
	    <option name="approved" reverse="denied" type="boolean">Approve/deny the change</option>
	</optgroup>
	<transport method="post" path="review/target/%(target)s"/>
    </command>

    <command name="search_review">
	<optgroup mandatory="True">
	    <option name="source" type="string">Name of the branch (domain or sandbox) with changes</option>
	    <option name="target" type="string">Name of the target domain</option>
	    <option name="testing_succeeded" reverse="testing_failed" type="boolean" conflicts="untested">Select tested reviews</option>
	    <option name="untested" type="flag" conflicts="testing_succeeded">Select untested reviews</option>
	    <option name="approved" reverse="denied" type="boolean" conflicts="undecided">Select approved/denied reviews</option>
	    <option name="undecided" type="flag" conflicts="approved">Select undecided reviews</option>
	    <option name="testing_url" type="string">Select reviews with the given testing URL</option>
	    <option name="review_url" type="string">Select reviews with the given review URL</option>
	</optgroup>
	<transport method="get" path="find/review"/>
    </command>

    <command name="show_review">
	<optgroup fields="one">
	    <optgroup fields="all">
		<option name="source" type="string">Name of the branch (domain or sandbox) with changes</option>
		<option name="target" type="string">Name of the target domain</option>
	    </optgroup>
	    <option name="all" type="flag">Show all reviews</option>
	</optgroup>
	<transport method="get" path="review/target/%(target)s/source/%(source)s"/>
	<transport trigger="all" method="get" path="review"/>
    </command>

    <command name="deploy">
	Take a template branch as a source (the name of either a domain or
	a sandbox) and deploy its changes to the target domain specified.
	If the target domain had been marked as invalid for syncing because
	of a previous rollback that flag is cleared.
	If using the nosync option follow this with the sync command to
	pull the changes into any production domains.
	<p/>
	If changes to the target branch are under change manager control,
	then the --justification must be provided in the form of
	"tcm=NNNNNNNNN" or "sn=XXXNNNNN", where either a valid TCM or
	Service Now id is provided.
	<optgroup mandatory="True" fields="all">
	    <option name="source" type="string">Name of the branch (domain or sandbox) with changes</option>
	    <option name="target" type="string">Name of the target domain</option>
	</optgroup>
	<optgroup>
	    <option name="sync" type="boolean" default="True">Automatically sync tracking domains</option>
	    <option name="dryrun" type="boolean">Attempt a test merge and run tests without saving the merge result</option>
	    <option name="merge_strategy" type="string">Git merge strategy to use</option>
	    <option name="strategy_options" type="string" requires="merge_strategy">Extra options to pass to the merge strategy</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Reason of the deployment to record in the commit log. Mandatory if justification is emergency</option>
	</optgroup>
	<transport method="post" path="command/deploy"/>
    </command>

    <command name="validate">
	Assert that a branch (a sandbox or a domain) can by sync'd into
	a tracking domain.
	Typically this is used after a rollback has been issued on a
	tracking domain.
	<optgroup mandatory="True" fields="all">
	    <option name="branch" type="string">Name of domain or sandbox</option>
	</optgroup>
	<optgroup fields="all">
	    <option name="comments" type="string">Provide a comment as to why the branch is valid</option>
	</optgroup>
	<transport method="post" path="branch/%(branch)s/command/validate"/>
    </command>

    <command name="rollback">
	Set a tracking domain back to a known good state.  Any valid
	git reference (usually the SHA1 hash commit id, can be
	abbreviated) can be given.  Alternately the lastsync option will
	roll back to the commit in use before the domain was last sync'd.
	The tracked domain will be flagged to not allow a sync until a
	validate has been run or fixes have been deployed.
	<optgroup mandatory="True" fields="all">
	    <option name="domain" type="string">Name of domain or sandbox</option>
	    <optgroup fields="one">
		<option name="ref" type="string">Any valid git reference to a previous commit in the branch</option>
		<option name="lastsync" type="flag">Use the reference stored in AQDB of the commit in use before the last sync</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="domain/%(domain)s/command/rollback"/>
    </command>

    <command name="del_sandbox">
	Removes the specified sandbox branch.  This will fail if there are
	hosts still being managed by the sandbox: you must use the "manage"
	command to reassign those hosts to other domains.

	This will not remove user-owned working directories.  A reminder
	will be issued to clean up any such directories.
	<optgroup mandatory="True" fields="all">
	    <option name="sandbox" type="string">Name of the sandbox to be deleted</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="sandbox/%(sandbox)s"/>
    </command>

    <command name="manage">
	Take a host and make it build its configuration using the specified
	template domain or sandbox.  This allows you to test building hosts
	using alternate templates, or to move a host back to a default
	production domain once testing has completed.

	--list option requires a file containing one fqdn hostnames per line.
	This is intended to group manage --hostname commands effeciently within
	one batch. The --list option can not be used with cluster nodes and
	all hosts are required to belong to the same domain or sandbox as well
	as by the sandbox author.

	--force option bypasses git checks between the source and target branch.
	<optgroup mandatory="True" fields="all">
	    <optgroup>
		<option name="hostname" type="string">Name of the host to manage</option>
		<option name="cluster" type="string">Name of the cluster to manage</option>
		<option name="metacluster" type="string">Name of the metacluster to manage</option>
		<option name="list" type="list">File with one host per line</option>
	    </optgroup>
	    <optgroup fields="one">
		<option name="domain" type="string">Name of the domain</option>
		<option name="sandbox" type="string">Name of the sandbox (given as 'author/branch')</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="force" type="flag">bypasses git status and branch integrity checks (potentially dangerous)</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" trigger="hostname" path="host/%(hostname)s/command/manage"/>
	<transport method="post" trigger="list" path="command/manage_list"/>
	<transport method="post" trigger="cluster" path="cluster/%(cluster)s/command/manage"/>
	<transport method="post" trigger="metacluster" path="metacluster/%(metacluster)s/command/manage"/>
    </command>

    <command name="cat">
	Prints the content of the plenary template in use for any one of the
	given options.  All are exclusive, except --instance and/or --default
	also require --service.
	The --generate option allows you to see what the body of a plenary template
	might look like if it were to be generated right now. This is useful if the
	plenary template does not exist yet because it cannot be compiled. Note
	that template generated on-demand in this way will be incomplete
	(especially if it cannot be compiled) and is purely provided for debugging.
	<optgroup mandatory="True" fields="one">
	    <option name="machine" type="string">Name of the machine</option>
	    <option name="hostname" type="string">Name of the host</option>
	    <option name="cluster" type="string">Name of the cluster</option>
	    <option name="metacluster" type="string">Name of the metacluster</option>
	    <option name="service" type="string">Name of the service</option>
	    <option name="city" type="string">Name of the city</option>
	    <option name="network_device" type="string">Name of the network device</option>
	    <option name="networkip" type="ipv4">IP address of a network</option>
	    <option name="personality" type="string">Name of personality</option>
	    <option name="virtual_switch" type="string">Virtual Switch name</option>
	</optgroup>
	<optgroup>
	    <option name="generate" type="flag">Show the plenary template as it would be generated</option>
	    <option name="data" type="flag" requires="hostname cluster metacluster network_device virtual_switch">Show the data template for the host/cluster</option>
	    <option name="client" type="flag" requires="cluster">Show the data template for the host/cluster</option>
	</optgroup>
	<optgroup>
	    <option name="archetype" requires="personality" type="string">Archetype</option>
	    <option name="personality_stage" requires="personality" type="string">Personality stage to use, defaults to 'current'.</option>
	    <option name="param_tmpl" requires="personality" type="string">param templates</option>
	</optgroup>
	<optgroup>
	    <option name="instance" type="string" requires="service">Name of the service instance</option>
	    <option name="default" type="flag" requires="service">Show the default client config for the service/instance</option>
	    <option name="server" type="flag" requires="service">Show the server config for the service/instance</option>
	</optgroup>
	<optgroup>
	    <option name="resourcegroup" type="string" requires="hostname cluster metacluster">Name of a resource group</option>
	    <option name="application" type="string" requires="hostname cluster metacluster">Name of an application</option>
	    <option name="filesystem" type="string" requires="hostname cluster metacluster">Name of a file system</option>
	    <option name="hostlink" type="string" requires="hostname cluster metacluster">Name of a hostlink</option>
	    <option name="intervention" type="string" requires="hostname cluster metacluster">Name of an intervention</option>
	    <option name="reboot_intervention" type="flag" requires="hostname cluster metacluster">Name of a reboot intervention</option>
	    <option name="reboot_schedule" type="flag" requires="hostname cluster metacluster">Name of a reboot schedule</option>
	    <option name="virtual_machine" type="string" requires="hostname cluster metacluster">Name of a virtual machine</option>
	    <option name="service_address" type="string" requires="hostname cluster metacluster">Name of a service address</option>
	    <option name="share" type="string" requires="hostname cluster metacluster">Name of a resource group</option>
	</optgroup>
	<optgroup>
	    <option name="system_list" type="flag" requires="cluster">System list entries</option>
	    <option name="auto_start_list" type="flag" requires="cluster">Auto start list entries</option>
	</optgroup>
	<optgroup>
	    <option name="network_environment" type="string" requires="networkip">Network environment (default: internal)</option>
	</optgroup>
	<transport trigger="machine" method="get" path="machine/%(machine)s/plenary"/>
	<transport trigger="hostname" method="get" path="host/%(hostname)s/plenary"/>
	<transport trigger="cluster" method="get" path="cluster/%(cluster)s/plenary"/>
	<transport trigger="metacluster" method="get" path="metacluster/%(metacluster)s/plenary"/>
	<transport trigger="service" method="get" path="service/%(service)s/plenary"/>
	<transport trigger="instance" method="get" path="service/%(service)s/instance/%(instance)s/plenary"/>
	<transport trigger="city" method="get" path="location/city/%(city)s/plenary"/>
	<transport trigger="network_device" method="get" path="network_device/%(network_device)s/plenary"/>
	<transport trigger="networkip" method="get" path="network/plenary/%(networkip)s"/>
	<transport trigger="personality" method="get"  path="personality/personality/%(personality)s/plenary"/>
	<transport trigger="virtual_switch" method="get" path="virtual_switch/%(virtual_switch)s/plenary"/>
    </command>

    <command name="sync">
	Use this to bring the broker's working copy of a template branch up to
	date with the information in template-king.
	A sync is automatically run for any domains tracking a deploy
	unless the nosync option was used.
	<optgroup mandatory="True" fields="all">
	    <option name="domain" type="string">Name of the domain</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="domain/%(domain)s/command/sync"/>
    </command>

    <command name="add_chassis">
	Add a new chassis to the database.  A chassis can contain multiple blades. Management tasks
	for the blades are typically performed by connecting to the chassis itself, and so the
	chassis name must exist within DNS.
	<optgroup mandatory="True" fields="all">
	    <option name="chassis" type="string">FQDN name of the new chassis</option>
	    <option name="rack" type="string">Name of the rack location for this chassis</option>
	<option name="model" type="string">Model of chassis to create. Use 'show model --type chassis' to see a list of valid models</option>
	</optgroup>
	<optgroup>
	    <option name="ip" type="ipv4">IP address of the chassis</option>
	    <option name="interface" type="string">Interface name (like oa)</option>
	    <option name="mac" type="mac">MAC address of the interface</option>
	    <option name="label" type="string">Hardware label. If not specified, chassis name minus the DNS domain is used.</option>
	    <option name="vendor" type="string">Chassis vendor. Needed if the model name is not unique</option>
	    <option name="serial" type="string">serial number</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="chassis/%(chassis)s"/>
    </command>

    <command name="show_chassis">
	Show the chassis list, or details about a particular chassis.
	<p/>
	The --missing option will list aq commands to add chassis information for
	blade machines that are not currently in a chassis.
	<optgroup mandatory="True" fields="one">
	    <option name="chassis" type="string">Chassis name</option>
	    <option name="all" type="flag">Select all</option>
	</optgroup>
	<transport trigger="all" method="get" path="chassis"/>
	<transport trigger="chassis" method="get" path="chassis/%(chassis)s"/>
    </command>

    <command name="del_chassis">
	Delete a chassis.
	<p/>
	If the chassis has populated slots, then the --force flag can be used to
	remove all machines from the chassis before deleting the chassis.
	<optgroup mandatory="True" fields="all">
	    <option name="chassis" type="string">Chassis name</option>
	</optgroup>
	<optgroup>
	    <option name="clear_slots" type="flag">Remove all machines first</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="chassis/%(chassis)s"/>
    </command>

    <command name="update_chassis">
	Update chassis information.  Requires the chassis name.  All
	other fields can be updated.
	<optgroup mandatory="True" fields="all">
	    <option name="chassis" type="string">Chassis name</option>
	</optgroup>
	<optgroup>
	    <option name="model" type="string">Chassis model</option>
	    <option name="rack" type="string">Rack name</option>
	    <option name="ip" type="ipv4">Primary IP address</option>
	    <option name="vendor" type="string" requires="model">Chassis vendor. Needed if the model name is not unique</option>
	    <option name="serial" type="string">Serial Number</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="chassis/%(chassis)s"/>
    </command>

    <command name="add_rack">
	Add a new rack to the database.  To add a rack named dd120 on tile H13,
	use --building=dd --rackid=120 --row=H --column=13.  The rackid
	option can also be prefixed by building name, so using
	--building=dd --rackid=dd120 --row=H --column=13 would also work.
	<optgroup mandatory="True" fields="all">
	    <option name="rackid" type="string">Name of the new rack, or just the id number</option>
	    <option name="row" type="string">Row of the tile location</option>
	    <option name="column" type="string">Column of the tile location</option>
	    <optgroup fields="one">
		<option name="building" type="string">Name of the building that houses the rack</option>
		<option name="room" type="string">Name of the room that houses the rack</option>
		<option name="bunker" type="string">Bunker</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="fullname" type="string">Full, descriptive name</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="location/rack/building/%(building)s/%(rackid)s"/>
	<transport method="put" trigger="room" path="location/rack/room/%(room)s/%(rackid)s"/>
	<transport method="put" trigger="bunker" path="location/rack/bunker/%(bunker)s/%(rackid)s"/>
    </command>

    <command name="update_rack">
	Update the row and column parameters for a rack.
	<optgroup mandatory="True" fields="all">
	    <option name="rack" type="string">Name of the rack</option>
	</optgroup>
	<optgroup>
	    <option name="row" type="string">Row of the tile location</option>
	    <option name="column" type="string">Column of the tile location</option>
	    <option name="fullname" type="string">Full, descriptive name</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="default_dns_domain" type="string">Default DNS domain for new machines</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<optgroup fields="one">
	    <option name="building" type="string">Name of the building that houses the rack</option>
	    <option name="room" type="string">Name of the room that houses the rack</option>
	    <option name="bunker" type="string">Name of the bunker that houses the rack</option>
	</optgroup>
	<transport method="post" path="location/rack/%(rack)s"/>
    </command>

    <command name="show_rack">
	Show the rack list, or details about a particular rack.
	<p/>
	Supported options for --format: raw, csv, proto.
	<p/>
	<optgroup mandatory="True" fields="one">
	    <option name="rack" type="string">rack name</option>
	    <option name="all" type="flag">all</option>
	</optgroup>
	<transport trigger="all" method="get" path="location/rack"/>
	<transport trigger="rack" method="get" path="location/rack/%(rack)s"/>
	<format name="proto" >
	    <message_class name="LocationList" module="aqdlocations_pb2"/>
	</format>
    </command>

    <command name="del_rack">
	Delete a rack.
	<optgroup mandatory="True" fields="all">
	    <option name="rack" type="string">rack name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="location/rack/%(rack)s"/>
    </command>

    <command name="add_desk">
	Add a new desk to the database.
	<optgroup mandatory="True" fields="all">
	    <option name="desk" type="string">Name of the new desk</option>
	    <optgroup>
		<option name="building" type="string">Building where the desk is</option>
		<option name="room" type="string">Room where the desk is</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="fullname" type="string">Full, descriptive name</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="location/desk/%(desk)s"/>
    </command>

    <command name="show_desk">
	Show the desk list, or details about a particular desk.
	<p/>
	<optgroup mandatory="True" fields="one">
	    <option name="desk" type="string">Desk name</option>
	    <option name="all" type="flag">Select all</option>
	</optgroup>
	<transport trigger="all" method="get" path="location/desk"/>
	<transport trigger="desk" method="get" path="location/desk/%(desk)s"/>
	<format name="proto" >
	    <message_class name="LocationList" module="aqdlocations_pb2"/>
	</format>
    </command>

    <command name="del_desk">
	Delete a desk. See also del_location.
	<optgroup mandatory="True" fields="all">
	    <option name="desk" type="string">Desk name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="location/desk/%(desk)s"/>
    </command>

    <command name="add_building">
	Add a new building to the database.
	<optgroup mandatory="True" fields="all">
	    <option name="building" type="string">Name of the new building</option>
	    <option name="address" type="string">The building's address</option>
	    <option name="city" type="string">Name of the city that contains the building</option>
	</optgroup>
	<optgroup>
	    <option name="fullname" type="string">Full, descriptive name</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="location/building/%(building)s"/>
    </command>

    <command name="update_building">
	Update the address parameter and city for a building.
	<optgroup mandatory="True" fields="all">
	    <option name="building" type="string">Name of the building</option>
	</optgroup>
	<optgroup>
	    <option name="address" type="string">Address of the building</option>
	    <option name="city" type="string">Name of the city the building is in</option>
	    <option name="fullname" type="string">Full, descriptive name</option>
	    <option name="default_dns_domain" type="string">Default DNS domain for new machines</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="location/building/%(building)s"/>
    </command>

    <command name="show_building">
	Show the building list, or details about a particular building.
	<p/>
	Supported options for --format: raw, csv, proto.
	<p/>
	<optgroup mandatory="True" fields="one">
	    <option name="building" type="string">building name</option>
	    <option name="all" type="flag">Select all</option>
	</optgroup>
	<transport trigger="all" method="get" path="location/building"/>
	<transport trigger="building" method="get" path="location/building/%(building)s"/>
	<format name="proto" >
	    <message_class name="LocationList" module="aqdlocations_pb2"/>
	</format>
    </command>

    <command name="del_building">
	Delete a building.
	<optgroup mandatory="True" fields="all">
	    <option name="building" type="string">building name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="location/building/%(building)s"/>
    </command>

    <command name="add_campus">
	Add a new campus to the database.
	<optgroup mandatory="True" fields="all">
	    <option name="campus" type="string">Name of the new campus</option>
	    <option name="country" type="string">Name of the country that contains the campus</option>
	</optgroup>
	<optgroup>
	    <option name="fullname" type="string">Full, descriptive name</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="location/campus/%(campus)s"/>
    </command>

    <command name="del_campus">
	Delete a campus.
	<optgroup mandatory="True" fields="all">
	    <option name="campus" type="string">campus name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="location/campus/%(campus)s"/>
    </command>

    <command name="update_campus">
	Update campus parameters
	<optgroup mandatory="True" fields="all">
	    <option name="campus" type="string">Name of the campus</option>
	</optgroup>
	<optgroup>
	    <option name="fullname" type="string">Full, descriptive name</option>
	    <option name="default_dns_domain" type="string">Default DNS domain for new entries</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="location/campus/%(campus)s"/>
    </command>

    <command name="add_room">
	Add a new room to the database.
	<optgroup mandatory="True" fields="all">
	    <option name="room" type="string">Name of the new room</option>
	    <option name="building" type="string">Name of the building that contains the room</option>
	</optgroup>
	<optgroup>
	    <option name="fullname" type="string">Full, descriptive name</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="location/room/%(room)s"/>
    </command>

    <command name="show_room">
	Show the room list, or details about a particular room.
	<p/>
	Supported options for --format: raw, csv, proto.
	<p/>
	<optgroup mandatory="True" fields="one">
	    <option name="room" type="string">room name</option>
	    <option name="all" type="flag">show all</option>
	</optgroup>
	<transport trigger="all" method="get" path="location/room"/>
	<transport trigger="room" method="get" path="location/room/%(room)s"/>
	<format name="proto" >
	    <message_class name="LocationList" module="aqdlocations_pb2"/>
	</format>
    </command>

    <command name="del_room">
	Delete a room.
	<optgroup mandatory="True" fields="all">
	    <option name="room" type="string">room name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="location/room/%(room)s"/>
    </command>

    <command name="add_bunker">
	Add a new bunker to the database.
	<optgroup mandatory="True" fields="all">
	    <option name="bunker" type="string">Name of the new bunker</option>
	    <optgroup fields="one">
		<option name="room" type="string">Name of the room that contains the bunker</option>
		<option name="building" type="string">Name of the building that contains the bunker</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="fullname" type="string">Full, descriptive name</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="location/bunker/%(bunker)s"/>
    </command>

    <command name="show_bunker">
	Show the bunker list, or details about a particular bunker.
	<p/>
	Supported options for --format: raw, csv, proto.
	<p/>
	<optgroup mandatory="True" fields="one">
	    <option name="bunker" type="string">bunker name</option>
	    <option name="all" type="flag">show all</option>
	</optgroup>
	<transport trigger="all" method="get" path="location/bunker"/>
	<transport trigger="bunker" method="get" path="location/bunker/%(bunker)s"/>
	<format name="proto" >
	    <message_class name="LocationList" module="aqdlocations_pb2"/>
	</format>
    </command>

    <command name="del_bunker">
	Delete a bunker.
	<optgroup mandatory="True" fields="all">
	    <option name="bunker" type="string">bunker name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="location/bunker/%(bunker)s"/>
    </command>

    <command name="show_campus">
	Show the list of campuses, or details about a particular campus.
	<p/>
	Supported options for --format: raw, csv, proto.
	<p/>
	<optgroup mandatory="True" fields="one">
	    <option name="campus" type="string">campus name</option>
	    <option name="all" type="flag">show all campuses</option>
	</optgroup>
	<transport trigger="all" method="get" path="location/campus"/>
	<transport trigger="campus" method="get" path="location/campus/%(campus)s"/>
	<format name="proto" >
	    <message_class name="LocationList" module="aqdlocations_pb2"/>
	</format>
    </command>

    <command name="add_city">
	Add a new city to the database.
	<p/>
	Cities have a plenary template named site/$region/$city/config. The timezone of the city will be available in this template as the global variable TIMEZONE.
	<optgroup mandatory="True" fields="all">
	    <option name="city" type="string">Name of the new city</option>
	    <option name="timezone" type="string">Timezone of the city (e.g. Europe/London)</option>
	    <optgroup fields="one">
		<option name="country" type="string">Name of the country that contains the city</option>
		<option name="campus" type="string">Campus</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="fullname" type="string">Full, descriptive name</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="location/city/%(city)s"/>
    </command>

    <command name="update_city">
	Update the timezone of an existing city. See also add_city.
	<optgroup mandatory="True" fields="all">
	    <option name="city" type="string">Name of the city</option>
	</optgroup>
	<optgroup>
	    <option name="timezone" type="string">Timezone of the city (e.g. Europe/London)</option>
	    <option name="fullname" type="string">Full, descriptive name</option>
	    <option name="campus" type="string">Campus (should be in the same hub)</option>
	    <option name="default_dns_domain" type="string">Default DNS domain for new machines</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="location/city/%(city)s"/>
    </command>

    <command name="show_city">
	Show the list of cities, or details about a particular city.
	<p/>
	Supported options for --format: raw, csv, proto.
	<p/>
	<optgroup mandatory="True" fields="one">
	    <option name="city" type="string">city name</option>
	    <option name="all" type="flag">show all cities</option>
	</optgroup>
	<transport trigger="all" method="get" path="location/city"/>
	<transport trigger="city" method="get" path="location/city/%(city)s"/>
	<format name="proto" >
	    <message_class name="LocationList" module="aqdlocations_pb2"/>
	</format>
    </command>

    <command name="del_city">
	Delete a city.
	<optgroup mandatory="True" fields="all">
	    <option name="city" type="string">city name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="location/city/%(city)s"/>
    </command>

    <command name="add_country">
	Add a new country to the database.
	<optgroup mandatory="True" fields="all">
	    <option name="country" type="string">Name of the new country</option>
	    <option name="continent" type="string">Name of the continent that contains the country</option>
	</optgroup>
	<optgroup>
	    <option name="fullname" type="string">Full, descriptive name</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="location/country/%(country)s"/>
    </command>

    <command name="show_country">
	Show the list of countries, or details about a particular country.
	<p/>
	Supported options for --format: raw, csv, proto.
	<p/>
	<optgroup mandatory="True" fields="one">
	    <option name="country" type="string">country name</option>
	    <option name="all" type="flag">show all countries</option>
	</optgroup>
	<transport trigger="all" method="get" path="location/country"/>
	<transport trigger="country" method="get" path="location/country/%(country)s"/>
	<format name="proto" >
	    <message_class name="LocationList" module="aqdlocations_pb2"/>
	</format>
    </command>

    <command name="del_country">
	Delete a country.
	<optgroup mandatory="True" fields="all">
	    <option name="country" type="string">country name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="location/country/%(country)s"/>
    </command>

    <command name="add_continent">
	Add a new continent to the database.
	<optgroup mandatory="True" fields="all">
	    <option name="continent" type="string">Name of the new continent</option>
	    <option name="hub" type="string">Name of the hub, which the continent belongs to</option>
	</optgroup>
	<optgroup>
	    <option name="fullname" type="string">Full, descriptive name</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="location/continent/%(continent)s"/>
    </command>

    <command name="show_continent">
	Show the list of continents, or details about a particular continent.
	<p/>
	Supported options for --format: raw, csv, proto.
	<p/>
	<optgroup mandatory="True" fields="one">
	    <option name="continent" type="string">continent name</option>
	    <option name="all" type="flag">show all continents</option>
	</optgroup>
	<transport trigger="all" method="get" path="location/continent"/>
	<transport trigger="continent" method="get" path="location/continent/%(continent)s"/>
	<format name="proto" >
	    <message_class name="LocationList" module="aqdlocations_pb2"/>
	</format>
    </command>

    <command name="del_continent">
	Delete a continent.
	<optgroup mandatory="True" fields="all">
	    <option name="continent" type="string">continent name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="location/continent/%(continent)s"/>
    </command>

    <command name="add_organization">
	Add a new organization.
	<optgroup mandatory="True" fields="all">
	    <option name="organization" type="string">Name of the new organization</option>
	</optgroup>
	<optgroup>
	    <option name="fullname" type="string">Full, descriptive name</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="location/organization/%(organization)s"/>
    </command>

    <command name="del_organization">
	Delete an organization. This will fail if the organization contains
	any hubs.
	<optgroup mandatory="True" fields="all">
	    <option name="organization" type="string">Name of the organization</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="location/organization/%(organization)s"/>
    </command>

    <command name="show_organization">
	Show an organization.
	<p/>
	Supported options for --format: raw, csv, proto.
	<p/>
	<optgroup mandatory="True" fields="one">
	    <option name="organization" type="string">Name of the organization</option>
	    <option name="all" type="flag">Show all organizations</option>
	</optgroup>
	<transport trigger="all" method="get" path="location/organization"/>
	<transport trigger="organization" method="get" path="location/organization/%(organization)s"/>
	<format name="proto" >
	    <message_class name="LocationList" module="aqdlocations_pb2"/>
	</format>
    </command>

    <command name="add_hub">
	Add a new hub to the database.
	<optgroup mandatory="True" fields="all">
	    <option name="hub" type="string">Name of the new hub</option>
	</optgroup>
	<optgroup>
	    <option name="fullname" type="string">Full, descriptive (region) name</option>
	    <option name="organization" type="string">The owning organization of the hub</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="location/hub/%(hub)s"/>
    </command>

    <command name="show_hub">
	Show the list of hubs, or details about a particular hub.
	<p/>
	Supported options for --format: raw, csv, proto.
	<p/>
	<optgroup mandatory="True" fields="one">
	    <option name="hub" type="string">hub name</option>
	    <option name="all" type="flag">Show all hubs</option>
	</optgroup>
	<transport trigger="all" method="get" path="location/hub"/>
	<transport trigger="hub" method="get" path="location/hub/%(hub)s"/>
	<format name="proto" >
	    <message_class name="LocationList" module="aqdlocations_pb2"/>
	</format>
    </command>

    <command name="del_hub">
	Delete a hub.
	<optgroup mandatory="True" fields="all">
	    <option name="hub" type="string">hub name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="location/hub/%(hub)s"/>
    </command>

    <command name="add_archetype">
	Create an archetype.
	<optgroup mandatory="True" fields="all">
	    <option name="archetype" type="string">The name to create</option>
	</optgroup>
	<optgroup>
	    <option name="compilable" type="boolean" default='False'>Does this archetype produce profiles?</option>
	    <option name="description" type="string">A human readable description of the archetype name</option>
	    <option name="cluster_type" type="string">For cluster archetypes - what kind of cluster is this?</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="archetype/%(archetype)s"/>
    </command>

    <command name="del_archetype">
	Delete an archetype.
	<optgroup mandatory="True" fields="all">
	    <option name="archetype" type="string">The name to delete</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="archetype/%(archetype)s"/>
    </command>

    <command name="add_personality">
	Create a personality. A default template will be created, however
	this default will be insufficient for real usage and will need to
	be edited in order to provide realistic information for such things as
	cost allocations, usage, etc.
	<optgroup mandatory="True" fields="all">
	    <option name="personality" type="string">The name to create</option>
	    <option name="archetype" type="string">Which archetype to use</option>
	    <optgroup>
		<option name="copy_from" type="string">Personality to copy parameters,features, service maps and required services</option>
		<optgroup fields="one">
		    <option name="grn" type="string">GRN as string</option>
		    <option name="eon_id" type="int">Numeric EON ID</option>
		</optgroup>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="copy_stage" type="string">Personality stage to copy, defaults to 'current'.</option>
	    <option name="host_environment" type="string">Environment for hosts assigned to this personality [dev|qa|uat|prod|infra]</option>
	    <option name="cluster_required" type="flag">Does this personality require hosts to be clustered?</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="config_override" type="flag">Include external personality config override template</option>
	    <option name="staged" type="boolean" reverse="unstaged">Enable staged personality updates</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="personality/archetype/%(archetype)s/personality/%(personality)s"/>
    </command>

    <command name="add_vendor">
	Create a vendor definition.
	<optgroup mandatory="True" fields="all">
	    <option name="vendor" type="string">The name of the vendor</option>
	</optgroup>
	<optgroup>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="vendor/%(vendor)s"/>
    </command>

    <command name="del_vendor">
	Remove a vendor definition.
	<optgroup mandatory="True" fields="all">
	    <option name="vendor" type="string">The name of the vendor</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="vendor/%(vendor)s"/>
    </command>

    <command name="show_vendor">
	Show currently defined vendors.
	<optgroup mandatory="True" fields="one">
	    <option name="vendor" type="string">The name of the vendor</option>
	    <option name="all" type="flag">Show all vendors</option>
	</optgroup>
	<transport trigger="vendor" method="get" path="vendor/%(vendor)s"/>
	<transport trigger="all" method="get" path="vendor"/>
    </command>

    <command name="update_vendor">
	Update a vendor definition.
	<optgroup mandatory="True" fields="all">
	    <option name="vendor" type="string">The name of the vendor</option>
	</optgroup>
	<optgroup>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="vendor/%(vendor)s"/>
    </command>

    <command name="add_os">
	Create an operating system definition.
	<optgroup mandatory="True" fields="all">
	    <option name="osname" type="string">The name of the operating system</option>
	    <option name="osversion" type="string">The version of the operating system</option>
	    <option name="archetype" type="string">Which archetype the OS is being added to</option>
	</optgroup>
	<optgroup>
	    <option name="comments" type="string">Comments</option>
	    <option name="copy_version" type="string">Copy parameters of an existing version</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="os/%(osname)s/%(osversion)s/%(archetype)s"/>
    </command>

    <command name="update_os">
	Update an operating system comments.
	<optgroup mandatory="True" fields="all">
	    <option name="osname" type="string">The name of the operating system</option>
	    <option name="osversion" type="string">The version of the operating system</option>
	    <option name="archetype" type="string">The archetype of the operating system</option>
	</optgroup>
	<optgroup>
	    <option name="comments" type="string">Comments</option>
	    <option name="lifecycle" type="string">Lifecycle status of OS being update to</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="os/%(osname)s/%(osversion)s/%(archetype)s"/>
    </command>

    <command name="del_os">
	Delete an operating system definition.
	<optgroup mandatory="True" fields="all">
	    <option name="osname" type="string">The name of the operating system</option>
	    <option name="osversion" type="string">The version of the operating system</option>
	    <option name="archetype" type="string">Which archetype the OS is being deleted from</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="os/%(osname)s/%(osversion)s/%(archetype)s"/>
    </command>

    <command name="show_os">
	Show an operating system definition.
	<optgroup mandatory="True">
	    <option name="osname" type="string">The name of the operating system</option>
	    <option name="osversion" type="string">The version of the operating system</option>
	    <option name="archetype" type="string">The archetype to search within</option>
	    <option name="all" type="flag">Show all operating systems</option>
	</optgroup>
	<transport method="get" path="os"/>
	<format name="proto" >
	    <message_class name="OperatingSystemList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="del_personality">
	Delete a personality. This command will fail if any hosts are currently
	using the personality.
	<optgroup mandatory="True" fields="all">
	    <option name="personality" type="string">The name to delete</option>
	    <option name="archetype" type="string">Which archetype to use</option>
	</optgroup>
	<optgroup>
	    <option name="personality_stage" type="string">Personality stage to delete</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" trigger="personality_stage" path="personality/archetype/%(archetype)s/personality/%(personality)s/stage/%(personality_stage)s"/>
	<transport method="delete" path="personality/archetype/%(archetype)s/personality/%(personality)s"/>
    </command>

    <command name="update_personality">
	Updates personality information.
	<optgroup mandatory="True" fields="all">
	    <option name="personality" type="string">The personality to update</option>
	    <option name="archetype" type="string">Which archetype the personality belongs to</option>
	</optgroup>
	<optgroup>
	    <option name="personality_stage" type="string">Personality stage to use, defaults to 'next'.</option>
	    <option name="vmhost_capacity_function" type="string">Function for calculating VM host capacity units</option>
	    <option name="cluster_required" type="boolean" default='False'>Does this personality require hosts to be clustered?</option>
	    <option name="config_override" type="boolean">Include external personality config override template</option>
	    <option name="host_environment" type="string">Environment for Hosts assigned to this personality [dev|qa|uat|prod|infra]</option>
	    <option name="leave_existing" type="flag">Do not propagate GRN changes to hosts in the personality</option>
	    <option name="staged" type="boolean" reverse="unstaged">Enable/disable staged personality updates</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">String to be specified if justification='emergency'</option>
	    <option name="comments" type="string">Comments</option>
	</optgroup>
	<optgroup fields="one">
	    <option name="grn" type="string">GRN as string</option>
	    <option name="eon_id" type="int">Numeric EON ID</option>
	</optgroup>
	<transport method="post" path="personality/archetype/%(archetype)s/personality/%(personality)s"/>
    </command>

    <command name="show_personality">
	Show personality details.  Specifying both name and archetype will
	uniquely identify a personality.
	<p/>
	If the domain option is given that domain will be searched for
	information about the personality's thresholds.
	<optgroup mandatory="True">
	    <option name="personality" type="string" conflicts="all">personality name (same name may be in multiple archetypes)</option>
	    <option name="archetype" type="string" conflicts="all">which archetype to use</option>
	    <option name="all" type="flag" conflicts="personality archetype">all</option>
	</optgroup>
	<optgroup>
	    <option name="personality_stage" requires="personality" type="string">Personality stage to use, defaults to 'current'.</option>
	</optgroup>
	<transport method="get" path="personality"/>
	<format name="proto" >
	    <message_class name="PersonalityList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="search_personality">
	Search personality based on given options. Full details of the personality can
	be shown using the --fullinfo option
	<p/>
	<optgroup mandatory="True">
	    <option name="personality" type="string" >personality name (same name may be in multiple archetypes)</option>
	    <option name="personality_stage" type="string">Personality stage</option>
	    <option name="archetype" type="string" >which archetype to use</option>
	    <option name="grn" type="string" >match by GRN</option>
	    <option name="eon_id" type="int" >match by EON ID</option>
	    <option name="config_override" type="boolean" >Include external personality config override template</option>
	    <option name="host_environment" type="string" >Environment for Hosts assigned to this personality [dev|qa|uat|prod|infra]</option>
	    <option name="required_service" type="string">Show personalities requiring the given service</option>
	    <option name="environment_override" type="string" requires="required_service">Show personalities which have an environment override for the specified service</option>
	    <option name="used" type="boolean" reverse="unused">Look for used/unused personalities</option>
	    <option name="fullinfo" type="flag">show full information for the matching personalities</option>
	</optgroup>
	<transport method="get" path="find/personality"/>
	<format name="proto" >
	    <message_class name="PersonalityList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="make">
	Build a host configuration.  Any required services which are not bound
	will cause an implicit bind_client to occur.  Any services that
	are not listed as required for the personality or the archetype
	are dropped unless the --keepbindings flag is specified.  The host
	information will be compiled into a working configuration.  Any
	errors in creating the configuration will be printed to the screen
	and cause the command to fail.  If the configuration is
	successfully created, then the new configuration may be
	"advertised" to the host itself, to the data warehouse and to the
	bootservers, making the host ready to build.  If this is a new host, then
	The bootservers will
	put the host into "install" mode of pxeswitch.
	<optgroup mandatory="True" fields="all">
	    <option name="hostname" type="string">Host name to make</option>
	</optgroup>
	<optgroup>
	    <option name="osname" type="string">name of the OS to assign to the host (linux, windows, esx, etc.)</option>
	    <option name="osversion" type="string">version of the OS</option>
	    <option name="archetype" type="string">Archetype of the host (defaults to aquilon)</option>
	    <option name="personality" type="string">Personality of the host</option>
	    <option name="personality_stage" type="string">Personality stage to use, defaults to 'current'.</option>
	    <option name="buildstatus" type="string">Build Status can be updated to 'build' or 'ready'.</option>
	    <option name="keepbindings" type="boolean">Preserve service bindings that are not required</option>
	    <option name="cleargrn" type="flag" conflicts="grn eon_id">Clear owner grn</option>
	    <option name="comments" type="string">Update comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<optgroup fields="one">
	    <option name="grn" type="string">GRN as string</option>
	    <option name="eon_id" type="int">Numeric EON ID</option>
	</optgroup>
	<transport method="post" path="host/%(hostname)s/command/make"/>
    </command>

    <command name="make_cluster">
	Build a cluster configuration.  Any cluster aligned services which
	are not bound will cause an implicit bind_cluster to occur.  Any
	services that are not listed as aligned for the cluster type
	are dropped unless the --keepbindings flag is specified.  The cluster
	information will be compiled into a working configuration.  Any
	errors in creating the configuration will be printed to the screen
	and cause the command to fail.  If the configuration is successfully
	created, then the new configuration may be "advertised" to the cluster
	itself, to the data warehouse and to the bootservers, making the
	cluster ready to build.
	<optgroup mandatory="True" fields="one">
	    <option name="cluster" type="string">Cluster name to make</option>
	    <option name="metacluster" type="string">[Deprecated] Metacluster name to make</option>
	</optgroup>
	<optgroup>
	    <option name="keepbindings" type="boolean">Preserve service bindings that are not marked as aligned</option>
	</optgroup>
	<transport method="post" trigger="cluster" path="cluster/%(cluster)s/command/make_cluster"/>
	<transport method="post" trigger="metacluster" path="metacluster/%(metacluster)s/command/make_cluster"/>
    </command>

    <command name="make_metacluster">
	Build a metacluster configuration.  Any metacluster aligned services which
	are not bound will cause an implicit bind_cluster to occur.  Any
	services that are not listed as aligned for the metacluster type
	are dropped unless the --keepbindings flag is specified.  The metacluster
	information will be compiled into a working configuration.  Any
	errors in creating the configuration will be printed to the screen
	and cause the command to fail.  If the configuration is successfully
	created, then the new configuration may be "advertised" to the metacluster
	itself, to the data warehouse and to the bootservers, making the
	metacluster ready to build.
	<optgroup mandatory="True" fields="one">
	    <option name="metacluster" type="string">Metacluster name to make</option>
	</optgroup>
	<optgroup>
	    <option name="keepbindings" type="boolean">Preserve service bindings that are not marked as aligned</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" trigger="metacluster" path="metacluster/%(metacluster)s/command/make_metacluster"/>
    </command>

    <command name="add_machine">
	Create a new machine at a given location.
	<p/>
	The machine name can be auto-created based on a given prefix.  This
	makes the machine name generation and creation atomic.  See the
	search_next command for information on how the next number is
	determined.
	<p/>
	If the model was created with machine specifications (values for
	cpuname, cpuvendor, cpucount, memory) they do not need
	to be given to this command - the model info will be used as a default.
	<p/>
	However, if the model does not have defaults, they all need to be given.
	<p/>
	If the hardware is virtual the --cluster option should be used to
	indicate the location indirectly.  Whether or not hardware is
	virtual is indicated by the machine type of the model.
	<optgroup mandatory="True" fields="all">
	    <optgroup fields="one">
		<option name="machine" type="string">machine name</option>
		<option name="prefix" type="string">machine prefix</option>
	    </optgroup>
	    <option name="model" type="string">machine model</option>
	    <optgroup fields="one">
		<optgroup fields="all">
		    <option name="chassis" type="string">Chassis name</option>
		    <option name="slot" type="int">Chassis slot</option>
		</optgroup>
		<option name="rack" type="string">Rack name</option>
		<option name="desk" type="string">Desk name</option>
		<option name="cluster" type="string">Cluster name</option>
		<option name="metacluster" type="string">Metacluster name</option>
		<option name="vmhost" type="string">Host where the VM lives</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="vendor" type="string">Machine vendor. Needed if the model name is not unique</option>
	    <option name="recipe" type="json">Hardware parameters to apply</option>
	    <option name="cpuname" type="string">cpu name</option>
	    <option name="cpuvendor" type="string">cpu vendor</option>
	    <option name="cpucount" type="int">cpu count</option>
	    <option name="memory" type="int">memory in MB</option>
	    <option name="serial" type="string">Serial number</option>
	    <option name="uuid" type="uuid">Machine UUID</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="uri" type="string">URI to point to a template describing the virtual appliance</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="machine/%(machine)s"/>
	<transport method="put" trigger="prefix" path="next_machine/%(prefix)s"/>
    </command>

    <command name="update_machine">
	Update a machine by hardware name or hostname.
	<p/>
	Updating the model for a machine will not automatically update
	the machine to the new model's default specifications.  To do so, give
	the new information (cpu, count, memory) at the same time.
	<optgroup mandatory="True" fields="one">
	    <option name="machine" type="string">machine name</option>
	    <option name="hostname" type="string">fully qualified host name</option>
	</optgroup>
	<optgroup fields="one">
	    <optgroup>
		<option name="chassis" type="string">chassis name</option>
		<option name="slot" type="int">chassis slot</option>
	    </optgroup>
	    <option name="rack" type="string">rack name</option>
	    <option name="desk" type="string">desk name</option>
	    <option name="cluster" type="string">Cluster name hosting the VM</option>
	    <option name="metacluster" type="string">Metacluster name hosting the VM</option>
	    <option name="vmhost" type="string">Host name hosting the VM</option>
	</optgroup>
	<optgroup>
	    <option name="model" type="string">machine model</option>
	    <option name="vendor" type="string" requires="model">machine vendor</option>
	    <option name="cpuname" type="string">cpu name</option>
	    <option name="cpuvendor" type="string">cpu vendor</option>
	    <option name="cpucount" type="int">cpu count</option>
	    <option name="memory" type="int">memory in MB</option>
	    <option name="serial" type="string">serial number</option>
	    <option name="uuid" type="uuid">Machine UUID</option>
	    <option name="clear_uuid" type="flag">Clear the machine UUID</option>
	    <option name="clearchassis" type="boolean">remove chassis and slot information</option>
	    <option name="multislot" type="boolean">use to record machine as taking multiple slots in a chassis</option>
	    <option name="allow_metacluster_change" type="boolean">when changing clusters, allow the cluster to be in a different metacluster</option>
	    <optgroup fields="one">
		<option name="autoip" type="flag" requires="cluster metacluster vmhost">Re-assign IP addresses</option>
		<option name="ip" type="ipv4">New primary IP address</option>
	    </optgroup>
	    <option name="uri" type="string">URI to point to a template describing the virtual appliance</option>
	    <option name="remap_disk" type="string">Vitual disk backend remapping definitions</option>
	    <option name="comments" type="string">Update comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" trigger="hostname" path="host/%(hostname)s/command/update_machine"/>
	<transport method="post" path="machine/%(machine)s/command/update"/>
    </command>

    <command name="show_machine">
	Show the hardware configuration of the named machine.
	<p/>
	Supported options for --format: raw, csv.
	<p/>
	The 'csv' format contains the following fields, in this order:
	Machine name, Rack, Building, Vendor name, Model name, Serial number,
	Interface name, Interface MAC address, Interface IP address.
	<p/>
	If the machine has multiple interfaces, then there will be a separate
	line for each.
	<optgroup mandatory="True" fields="one">
	    <option name="machine" type="string">machine name</option>
	    <option name="all" type="flag">all</option>
	</optgroup>
	<format name="proto">
	    <message_class name="MachineList" module="aqdsystems_pb2"/>
	</format>
	<transport trigger="all" method="get" path="machine"/>
	<transport trigger="machine" method="get" path="machine/%(machine)s"/>
    </command>

    <command name="del_machine">
	Delete the specified machine. This command will fail if the machine
	is being used: you must del_host before you can del_machine.
	<optgroup mandatory="True" fields="all">
	    <option name="machine" type="string">machine name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="machine/%(machine)s"/>
    </command>

    <command name="add_network_device">
	Create a new network switch.
	<optgroup mandatory="True" fields="all">
	    <option name="network_device" type="string">Network device fully qualified name</option>
	    <option name="model" type="string">Network device model</option>
	    <option name="type" type="string">Network device type (tor, bor, agg)</option>
	    <option name="interface" type="string">Interface name (like xge49)</option>
	    <option name="iftype" type="string">Interface type</option>
	    <option name="ip" type="ipv4">IP address</option>
	    <optgroup fields="one">
		<option name="rack" type="string">Rack name</option>
		<option name="building" type="string">Building name</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="archetype" type="string">Archetype name</option>
	    <option name="personality" type="string">Personality name: defaults to 'generic'.</option>
	    <option name="personality_stage" requires="personality" type="string">Personality stage to use, defaults to 'current'.</option>
	    <option name="osname" type="string">Operating system (e.g. ios)</option>
	    <option name="osversion" type="string">Operating system version</option>
	    <option name="buildstatus" type="string">Build Status: defaults to build.  'blind' and 'ready' also valid.</option>
	    <option name="mac" type="mac">MAC address of the interface</option>
	    <option name="label" type="string">Hardware label. If not specified, chassis name minus the DNS domain is used.</option>
	    <option name="vendor" type="string">Network device vendor. Needed if the model name is not unique</option>
	    <option name="serial" type="string">Serial Number</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<optgroup fields="one">
	    <option name="domain" type="string">Template (not DNS) domain</option>
	    <option name="sandbox" type="string">Name of the sandbox (given as 'author/branch')</option>
	</optgroup>
	<optgroup fields="one">
	    <option name="grn" type="string">GRN as string</option>
	    <option name="eon_id" type="int">Numeric EON ID</option>
	</optgroup>
	<transport method="put" path="network_device/%(network_device)s"/>
    </command>

    <command name="add_switch">
	DEPRECATED. Create a new network switch.
	<optgroup mandatory="True" fields="all">
	    <option name="switch" type="string">Switch fully qualified name</option>
	    <option name="model" type="string">Switch model</option>
	    <option name="type" type="string">Switch type (tor, bor, agg)</option>
	    <option name="ip" type="ipv4">IP address</option>
	    <option name="interface" type="string">Interface name (like xge49)</option>
	    <optgroup fields="one">
		<option name="rack" type="string">Rack name</option>
		<option name="building" type="string">Building name</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="iftype" type="string">Interface type (default: oa)</option>
	    <option name="mac" type="mac">MAC address of the interface</option>
	    <option name="label" type="string">Hardware label. If not specified, chassis name minus the DNS domain is used.</option>
	    <option name="vendor" type="string">Switch vendor. Needed if the model name is not unique</option>
	    <option name="serial" type="string">Serial Number</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="switch/%(switch)s"/>
    </command>

    <command name="update_network_device">
	Update network device information.  Requires the network device name.  All
	other fields can be updated.
	<optgroup mandatory="True" fields="all">
	    <option name="network_device" type="string">Network device fully qualified name</option>
	</optgroup>
	<optgroup>
	    <optgroup fields="one">
		<option name="rack" type="string">Rack name</option>
		<option name="building" type="string">Building name</option>
	    </optgroup>
	    <option name="model" type="string">Network device model</option>
	    <option name="type" type="string">Network device type (tor, bor, agg)</option>
	    <option name="ip" type="ipv4">IP address</option>
	    <option name="vendor" type="string" requires="model">Network device vendor. Needed if the model name is not unique</option>
	    <option name="serial" type="string">Serial Number</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="rename_to" type="string">New name of the network device</option>
	    <!-- TODO should be some json type with schema + validation -->
	    <option name="discovered_macs" type="json">mac/port mapping</option>
	    <option name="clear" type="flag">clear current mac/port mapping</option>
	    <option name="discover" type="flag">Do automatic discovery</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="network_device/%(network_device)s"/>
    </command>

    <command name="show_network_device">
	Show the configuration information for the specified network device.
	<p/>
	Supported options for --format: raw, csv.
	<p/>
	The 'csv' format contains the following fields, in this order:
	FQDN, Type, Rack, Building, Vendor name, Model name, Serial number,
	Interface name, Interface MAC address, Interface IP address.
	<p/>
	If the network device has multiple interfaces assigned, then there will be a
	separate line for each.
	<optgroup mandatory="True" fields="one">
	    <option name="network_device" type="string">Network device fully qualified name</option>
	    <option name="all" type="flag">show all</option>
	</optgroup>
	<optgroup>
	    <option name="discover" type="flag" conflicts="all">Show differences to discovery data</option>
	</optgroup>
	<transport trigger="network_device" method="get" path="network_device/%(network_device)s"/>
	<transport trigger="all" method="get" path="network_device"/>
	<format name="proto" >
	    <message_class name="NetworkDeviceList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="show_switch">
	DEPRECATED. Show the configuration information for the specified switch.
	<p/>
	Supported options for --format: raw, csv.
	<p/>
	The 'csv' format contains the following fields, in this order:
	FQDN, Type, Rack, Building, Vendor name, Model name, Serial number,
	Interface name, Interface MAC address, Interface IP address.
	<p/>
	If the switch has multiple interfaces assigned, then there will be a
	separate line for each.
	<optgroup mandatory="True" fields="one">
	    <option name="switch" type="string">switch fully qualified name</option>
	    <option name="all" type="flag">show all</option>
	</optgroup>
	<optgroup>
	    <option name="discover" type="flag" conflicts="all">Show differences to discovery data</option>
	</optgroup>
	<transport trigger="switch" method="get" path="switch/%(switch)s"/>
	<transport trigger="all" method="get" path="switch"/>
    </command>

    <command name="search_network_device">
	Find network devices matching the given information.
	<p/>
	Note that location searches are inclusive.  That is, searching for a
	building will include all racks, rooms, etc. inside the building.  The
	--exact_location option can be used to override this behavior.
	<p/>
	Supported options for --format: raw, csv.
	<p/>
	The 'csv' format contains the following fields, in this order:
	FQDN, Type, Rack, Building, Vendor name, Model name, Serial number,
	Interface name, Interface MAC address, Interface IP address.
	<p/>
	If the network device has multiple interfaces assigned, then there will be a
	separate line for each.
	<optgroup mandatory="True">
	    <option name="network_device" type="string">Network device fully qualified name</option>
	    <option name="ip" type="ipv4" conflicts="networkip">IP address</option>
	    <option name="networkip" type="ipv4" conflicts="ip">Network IP address</option>
	    <option name="network_environment" type="string">Network environment (default: internal)</option>
	    <option name="vlan" type="int">Vlan ID</option>
	    <option name="type" type="string">Type (tor, bor, agg)</option>
	    <option name="model" type="string">Network device model</option>
	    <option name="vendor" type="string">Network device vendor </option>
	    <optgroup fields="one">
		<option name="organization" type="string">Organization</option>
		<option name="hub" type="string">Hub</option>
		<option name="continent" type="string">Continent</option>
		<option name="country" type="string">Country</option>
		<option name="city" type="string">City</option>
		<option name="building" type="string">Building</option>
		<option name="room" type="string">Room</option>
		<option name="bunker" type="string">Bunker</option>
		<option name="rack" type="string">Rack</option>
		<option name="desk" type="string">Desk</option>
	    </optgroup>
	    <option name="serial" type="string">serial number</option>
	    <option name="exact_location" type="flag">match the location exactly</option>
	    <option name="fullinfo" type="flag">show full information for the matching network devices</option>
	    <option name="all" type="flag">show all</option>
	</optgroup>
	<transport method="get" path="find/network_device"/>
	<format name="proto" >
	    <message_class name="NetworkDeviceList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="search_switch">
	DEPRECATED. Find switches matching the given information.
	<p/>
	Note that location searches are inclusive.  That is, searching for a
	building will include all racks, rooms, etc. inside the building.  The
	--exact_location option can be used to override this behavior.
	<p/>
	Supported options for --format: raw, csv.
	<p/>
	The 'csv' format contains the following fields, in this order:
	FQDN, Type, Rack, Building, Vendor name, Model name, Serial number,
	Interface name, Interface MAC address, Interface IP address.
	<p/>
	If the switch has multiple interfaces assigned, then there will be a
	separate line for each.
	<optgroup mandatory="True">
	    <option name="switch" type="string">switch fully qualified name</option>
	    <option name="ip" type="ipv4">IP address</option>
	    <option name="vlan" type="int">Vlan ID</option>
	    <option name="type" type="string">Type (tor, bor, agg)</option>
	    <option name="model" type="string">switch model</option>
	    <option name="vendor" type="string">switch vendor </option>
	    <optgroup fields="one">
		<option name="organization" type="string">Organization</option>
		<option name="hub" type="string">Hub</option>
		<option name="continent" type="string">Continent</option>
		<option name="country" type="string">Country</option>
		<option name="city" type="string">City</option>
		<option name="building" type="string">Building</option>
		<option name="room" type="string">Room</option>
		<option name="bunker" type="string">Bunker</option>
		<option name="rack" type="string">Rack</option>
		<option name="desk" type="string">Desk</option>
	    </optgroup>
	    <option name="serial" type="string">serial number</option>
	    <option name="exact_location" type="flag">match the location exactly</option>
	    <option name="fullinfo" type="flag">show full information for the matching switches</option>
	    <option name="all" type="flag">show all</option>
	</optgroup>
	<transport method="get" path="find/switch"/>
    </command>

    <command name="del_network_device">
	Delete the specified network device.
	<optgroup mandatory="True" fields="all">
	    <option name="network_device" type="string">Network device name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="network_device/%(network_device)s"/>
    </command>

    <command name="del_switch">
	DEPRECATED. Delete the specified switch.
	<optgroup mandatory="True" fields="all">
	    <option name="switch" type="string">switch name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="switch/%(switch)s"/>
    </command>

    <command name="poll_network_device">
	Poll network device for MAC information.
	<optgroup mandatory="True" fields="one">
	    <option name="network_device" type="string">Network device name</option>
	    <option name="rack" type="string">Rack name</option>
	</optgroup>
	<optgroup>
	    <option name="type" type="string">If polling a rack, poll only this type of network device</option>
	    <option name="clear" type="boolean">Clear any previously observed MACs before polling</option>
	    <option name="vlan" type="boolean">Additionally poll for vlan/subnet mappings</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport trigger="network_device" method="post" path="network_device/%(network_device)s/command/poll"/>
	<transport method="post" path="location/rack/%(rack)s/command/poll"/>
    </command>

    <command name="poll_switch">
	DEPRECATED. Poll switch for MAC information.
	<optgroup mandatory="True" fields="one">
	    <option name="switch" type="string">switch name</option>
	    <option name="rack" type="string">Rack name</option>
	</optgroup>
	<optgroup>
	    <option name="type" type="string">If polling a rack, poll only this type of switch</option>
	    <option name="clear" type="boolean">Clear any previously observed MACs before polling</option>
	    <option name="vlan" type="boolean">Additionally poll for vlan/subnet mappings</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport trigger="switch" method="post" path="switch/%(switch)s/command/poll"/>
	<transport method="post" path="poll/rack/%(rack)s"/>
    </command>

    <command name="show_principal">
	Show the entitlements for a given username.
	<optgroup mandatory="True" fields="one">
	    <option name="principal" type="string">User Principal to check</option>
	    <option name="all" type="flag">Show all principals</option>
	</optgroup>
	<transport trigger="all" method="get" path="principal"/>
	<transport trigger="principal" method="get" path="principal/%(principal)s"/>
    </command>

    <command name="search_principal">
	Search between known principals.
	<optgroup mandatory="True">
	    <option name="role" type="string">Role the principal has</option>
	    <option name="realm" type="string">Realm of the principal</option>
	</optgroup>
	<optgroup>
	    <option name="fullinfo" type="flag">Show full information for the matching records</option>
	</optgroup>
	<transport method="get" path="find/principal"/>
    </command>

    <command name="show_realm">
	Show the existing authentication realms.
	<optgroup mandatory="True" fields="one">
	    <option name="realm" type="string">Realm name</option>
	    <option name="all" type="flag">Show all realms</option>
	</optgroup>
	<transport trigger="all" method="get" path="realm"/>
	<transport trigger="realm" method="get" path="realm/%(realm)s"/>
    </command>

    <command name="update_realm">
	Update the parameters of an authentication realm.
	<optgroup mandatory="True">
	    <option name="realm" type="string">Realm name</option>
	</optgroup>
	<optgroup>
	    <option name="trusted" type="boolean" reverse="untrusted">Control if the realm is trusted to manage sandboxes</option>
	    <option name="comments" type="string">Comments for the realm</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="realm/%(realm)s"/>
    </command>

    <command name="add_role">
	Add a new role.
	<optgroup mandatory="True">
	    <option name="role" type="string">Role name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="role/%(role)s"/>
    </command>

    <command name="del_role">
	Delete a role.
	<optgroup mandatory="True">
	    <option name="role" type="string">Role name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="role/%(role)s"/>
    </command>

    <command name="show_role">
	Show the properties of a role, or list all roles.
	<optgroup mandatory="True" fields="one">
	    <option name="role" type="string">Role name</option>
	    <option name="all" type="flag"></option>
	</optgroup>
	<transport method="get" trigger="role" path="role/%(role)s"/>
	<transport method="get" trigger="all" path="role"/>
    </command>

    <command name="permission">
	Modify the entitlements for a user.
	<optgroup mandatory="True" fields="all">
	    <option name="principal" type="string">User Principal (e.g. njw@is1.morgan) to change</option>
	    <option name="role" type="string">Role to use</option>
	</optgroup>
	<optgroup>
	    <option name="createuser" type="boolean">Create an entry for the user if one does not exist</option>
	    <option name="createrealm" type="boolean">Create an entry for the realm if one does not exist (implies --createuser)</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="principal/%(principal)s/role/%(role)s"/>
    </command>

    <command name="add_dns_environment">
	Add a new DNS Environment
	<optgroup mandatory="True" fields="all">
	    <option name="dns_environment" type="string">The DNS environment name</option>
	</optgroup>
	<optgroup>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="dns_environment/%(dns_environment)s"/>
    </command>

    <command name="show_dns_environment">
	Display a DNS Environment
	<optgroup mandatory="True" fields="one">
	    <option name="dns_environment" type="string">Name of the DNS environment</option>
	    <option name="all" type="flag">Show all DNS environments</option>
	</optgroup>
	<transport trigger="dns_environment" method="get" path="dns_environment/%(dns_environment)s"/>
	<transport trigger="all" method="get" path="dns_environment"/>
    </command>

    <command name="del_dns_environment">
	Delete a DNS Environment
	<optgroup mandatory="True" fields="all">
	    <option name="dns_environment" type="string">The DNS environment name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="dns_environment/%(dns_environment)s"/>
    </command>

    <command name="update_dns_environment">
	Update a DNS Environment
	<optgroup mandatory="True" fields="all">
	    <option name="dns_environment" type="string">The DNS environment name</option>
	</optgroup>
	<optgroup>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="dns_environment/%(dns_environment)s"/>
    </command>

    <command name="add_dns_domain">
	Add a new DNS subdomain.
	<p/>
	The --restricted flag tells the broker that it does not have full control over
	the DNS domain, so commands that manipulate the DNS information are not allowed.
	Such operations must be performed by the tool that has full control over the
	domain (e.g. Active Directory).
	<optgroup mandatory="True" fields="all">
	    <option name="dns_domain" type="string">Name of the new DNS domain</option>
	</optgroup>
	<optgroup>
	    <option name="comments" type="string">Comments</option>
	    <option name="restricted" type="flag">Restrict direct DNS manipulation commands</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="dns_domain/%(dns_domain)s"/>
    </command>

    <command name="show_dns_domain">
	Show the configuration of the specified DNS domain. If --all is specified, then
	the configuration of all DNS domains will be output.
	<optgroup mandatory="True" fields="one">
	    <option name="dns_domain" type="string">Name of the DNS domain</option>
	    <option name="all" type="flag">Show all DNS domains</option>
	</optgroup>
	<transport trigger="dns_domain" method="get" path="dns_domain/%(dns_domain)s"/>
	<transport trigger="all" method="get" path="dns_domain"/>
	<format name="proto" >
	    <message_class name="DNSDomainList" module="aqddnsdomains_pb2"/>
	</format>
    </command>

    <command name="del_dns_domain">
	Delete the named DNS subdomain.
	<optgroup mandatory="True" fields="all">
	    <option name="dns_domain" type="string">Name of the DNS domain</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="dns_domain/%(dns_domain)s"/>
    </command>

    <command name="update_dns_domain">
	Update the named DNS subdomain.
	<optgroup mandatory="True" fields="all">
	    <option name="dns_domain" type="string">Name of the DNS domain</option>
	</optgroup>
	<optgroup>
	    <option name="comments" type="string">Comments</option>
	    <option name="restricted" type="boolean">Restrict direct DNS manipulation commands</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="dns_domain/%(dns_domain)s"/>
    </command>

    <command name="dump_dns">
	Dump DNS information.
	<p/>
	<optgroup>
	    <option name="dns_domain" type="string">Name of the DNS domain</option>
	    <option name="dns_environment" type="string">The name of the environment (defaults to 'internal')</option>
	</optgroup>
	<transport method="get" path="command/dump_dns"/>
    </command>

    <command name="add_metacluster">
	Add a new metacluster.
	<optgroup mandatory="True" fields="all">
	    <optgroup fields="one">
		<option name="metacluster" type="string">Name of the new metacluster</option>
		<option name="prefix" type="string">Prefix for generating the metacluster name</option>
	    </optgroup>
	    <option name="archetype" type="string">Archetype name</option>
	    <option name="personality" type="string">Personality name</option>
	    <optgroup fields="one">
		<option name="organization" type="string">Organization</option>
		<option name="hub" type="string">Hub</option>
		<option name="continent" type="string">Continent</option>
		<option name="country" type="string">Country</option>
		<option name="campus" type="string">Campus</option>
		<option name="city" type="string">City</option>
		<option name="building" type="string">Building</option>
		<option name="room" type="string">Room</option>
		<option name="bunker" type="string">Bunker</option>
		<option name="rack" type="string">Rack</option>
		<option name="desk" type="string">Desk</option>
	    </optgroup>
	</optgroup>
	<optgroup fields="one">
	    <option name="domain" type="string">Name of template domain</option>
	    <option name="sandbox" type="string">Name of the sandbox (given as 'author/branch')</option>
	</optgroup>
	<optgroup>
	    <option name="personality_stage" requires="personality" type="string">Personality stage to use, defaults to 'current'.</option>
	    <option name="max_members" type="int">Comments</option>
	    <option name="buildstatus" type="string">Build status of the metacluster (defaults to 'build')</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="metacluster/%(metacluster)s"/>
	<transport method="put" trigger="prefix" path="next_metacluster/%(prefix)s"/>
    </command>

    <command name="show_metacluster">
	Show details for a metacluster.
	<optgroup mandatory="True" fields="one">
	    <option name="metacluster" type="string">Name of the metacluster</option>
	    <option name="all" type="flag">Show all. Returns only the names of the metaclusters.</option>
	</optgroup>
	<transport trigger="all" method="get" path="metacluster"/>
	<transport trigger="metacluster" method="get" path="metacluster/%(metacluster)s"/>
	<format name="proto" >
	    <message_class name="MetaClusterList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="update_metacluster">
	Update a metacluster.
	<optgroup mandatory="True" fields="all">
	    <option name="metacluster" type="string">Name of the metacluster</option>
	</optgroup>
	<optgroup>
	    <option name="personality" type="string">Personality Name</option>
	    <option name="personality_stage" type="string">Personality stage to use, defaults to 'current'.</option>
	    <option name="max_members" type="int">Maximum number of clusters that can be members of this metacluster</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="fix_location" type="flag">Sets the location of the metacluster based on the location of its member clusters.</option>
	    <option name="virtual_switch" type="string">The virtual switch used by the metacluster</option>
	    <optgroup fields="one">
		<option name="organization" type="string">Organization</option>
		<option name="hub" type="string">Hub</option>
		<option name="continent" type="string">Continent</option>
		<option name="country" type="string">Country</option>
		<option name="campus" type="string">Campus</option>
		<option name="city" type="string">City</option>
		<option name="building" type="string">Building</option>
		<option name="room" type="string">Room</option>
		<option name="bunker" type="string">Bunker</option>
		<option name="rack" type="string">Rack</option>
		<option name="desk" type="string">Desk</option>
	    </optgroup>
	    <option name="preferred_building" type="string">Preferred hot building</option>
	    <option name="clear_location_preference" type="flag" conflicts="preferred_building">Remove the hot side preference</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="metacluster/%(metacluster)s"/>
    </command>

    <command name="del_metacluster">
	Delete the metacluster.
	<optgroup mandatory="True" fields="all">
	    <option name="metacluster" type="string">Name of the metacluster</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="metacluster/%(metacluster)s"/>
    </command>

    <command name="show_cluster">
	Show details for a cluster.
	<optgroup mandatory="True" fields="one">
	    <option name="cluster" type="string">Name of the cluster</option>
	    <option name="all" type="flag">Show all. Returns only the names of the clusters.</option>
	</optgroup>
	<transport trigger="cluster" method="get" path="cluster/%(cluster)s"/>
	<transport trigger="all" method="get" path="cluster"/>
	<format name="proto" >
	    <message_class name="ClusterList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="add_esx_cluster">
	Add a new ESX cluster.
	<p/>
	Each ESX cluster must belong to a metacluster.
	<p/>
	Two constraints must be defined.  The cluster has a location constraint.
	All cluster vmhosts must be within the same location.  All of the
	cluster's vmhosts must also have the same personality.
	<p/>
	The max_members option can be set to define the maximum number of
	vmhosts that can be members of the cluster.
	<p/>
	The "down hosts threshold" is the number of hosts needed as "effective
	spares" per hardware model and cluster layout.  This value is used
	for cluster montioring alerts.
	<optgroup mandatory="True" fields="all">
	    <option name="cluster" type="string">Name of the new esx_cluster</option>
	    <option name="metacluster" type="string">Name of the metacluster containing this cluster</option>
	    <option name="down_hosts_threshold" type="string">Number of vmhosts that can be down before monitoring alarms trigger</option>
	    <optgroup fields="one">
		<option name="organization" type="string">Organization</option>
		<option name="hub" type="string">Hub</option>
		<option name="continent" type="string">Continent</option>
		<option name="country" type="string">Country</option>
		<option name="campus" type="string">Campus</option>
		<option name="city" type="string">City</option>
		<option name="building" type="string">Building</option>
		<option name="room" type="string">Room</option>
		<option name="bunker" type="string">Bunker</option>
		<option name="rack" type="string">Rack</option>
		<option name="desk" type="string">Desk</option>
	    </optgroup>
	    <option name="archetype" type="string">Archetype name</option>
	    <option name="personality" type="string">Personality name</option>
	    <optgroup fields="one">
		<option name="domain" type="string">Name of template domain</option>
		<option name="sandbox" type="string">Name of the sandbox (given as 'author/branch')</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="personality_stage" type="string">Personality stage to use, defaults to 'current'.</option>
	    <option name="maint_threshold" type="string">Down hosts threshold for maintenance windows</option>
	    <option name="max_members" type="int">Comments</option>
	    <option name="vm_to_host_ratio" type="string">Ratio of virtual machines to ESX servers</option>
	    <option name="switch" type="string">switch in use by the cluster</option>
	    <option name="buildstatus" type="string">Build status of the cluster (defaults to 'build')</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="cluster/%(cluster)s/esx"/>
    </command>

    <command name="show_esx_cluster">
	Show details for an ESX cluster. DEPRECATED
	<optgroup mandatory="True" fields="one">
	    <option name="cluster" type="string">Name of the cluster</option>
	</optgroup>
	<transport trigger="cluster" method="get" path="cluster/%(cluster)s/esx"/>
	<format name="proto" >
	    <message_class name="ClusterList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="add_cluster">
	Add a new cluster.
	<optgroup mandatory="True" fields="all">
	    <optgroup fields="one">
		<option name="cluster" type="string">Name of the new cluster</option>
		<option name="prefix" type="string">Prefix for generating the cluster name</option>
	    </optgroup>
	    <option name="archetype" type="string">Archetype name</option>
	    <option name="personality" type="string">Personality name</option>
	    <option name="down_hosts_threshold" type="string">Number of hosts that can be down before monitoring alarms trigger</option>
	    <optgroup fields="one">
		<option name="organization" type="string">Organization</option>
		<option name="hub" type="string">Hub</option>
		<option name="continent" type="string">Continent</option>
		<option name="country" type="string">Country</option>
		<option name="campus" type="string">Campus</option>
		<option name="city" type="string">City</option>
		<option name="building" type="string">Building</option>
		<option name="room" type="string">Room</option>
		<option name="bunker" type="string">Bunker</option>
		<option name="rack" type="string">Rack</option>
		<option name="desk" type="string">Desk</option>
	    </optgroup>
	    <optgroup fields="one">
		<option name="domain" type="string">Name of template domain</option>
		<option name="sandbox" type="string">Name of the sandbox (given as 'author/branch')</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="metacluster" type="string">Name of the metacluster containing this cluster</option>
	    <option name="personality_stage" type="string">Personality stage to use, defaults to 'current'.</option>
	    <option name="maint_threshold" type="string">Down hosts threshold for maintenance windows</option>
	    <option name="max_members" type="int">Max allowed host members</option>
	    <option name="vm_to_host_ratio" type="string">Ratio of virtual machines to ESX servers</option>
	    <option name="switch" type="string">switch in use by the cluster</option>
	    <option name="buildstatus" type="string">Build status of the cluster (defaults to 'build')</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="cluster/%(cluster)s"/>
	<transport method="put" trigger="prefix" path="next_cluster/%(prefix)s"/>
    </command>

    <command name="update_cluster">
	Update a cluster.
	<optgroup mandatory="True" fields="all">
	    <option name="cluster" type="string">Name of the cluster</option>
	</optgroup>
	<optgroup>
	    <option name="personality" type="string">Personality Name</option>
	    <option name="personality_stage" type="string">Personality stage to use, defaults to 'current'.</option>
	    <option name="down_hosts_threshold" type="string">Down hosts threshold</option>
	    <option name="maint_threshold" type="string">Down hosts threshold for maintenance windows</option>
	    <option name="max_members" type="int">Max allowed host members</option>
	    <option name="switch" type="string" conflicts="virtual_switch">Set the switch in use by the cluster.  An empty string removes the setting.</option>
	    <option name="fix_location" type="flag">Set the location based on cluster membership.</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="virtual_switch" type="string" conflicts="switch">The virtual switch used by the cluster</option>
	    <option name="metacluster" type="string">Metacluster name</option>
	    <optgroup fields="one">
		<option name="organization" type="string">Organization</option>
		<option name="hub" type="string">Hub</option>
		<option name="continent" type="string">Continent</option>
		<option name="country" type="string">Country</option>
		<option name="campus" type="string">Campus</option>
		<option name="city" type="string">City</option>
		<option name="building" type="string">Building</option>
		<option name="room" type="string">Room</option>
		<option name="bunker" type="string">Bunker</option>
		<option name="rack" type="string">Rack</option>
		<option name="desk" type="string">Desk</option>
	    </optgroup>
	    <option name="group_with" type="string">Group with the given cluster</option>
	    <option name="clear_group" type="flag" conflicts="group_with">Remove the cluster from any cluster groups</option>
	    <option name="preferred_building" type="string">Preferred hot building</option>
	    <option name="clear_location_preference" type="flag" conflicts="preferred_building">Remove the hot side preference</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="cluster/%(cluster)s"/>
    </command>

    <command name="del_cluster">
	Delete the cluster.
	<optgroup mandatory="True" fields="all">
	    <option name="cluster" type="string">Name of the cluster</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="cluster/%(cluster)s"/>
    </command>

    <command name="add_allowed_personality">
	add a personality to the allowed list of a cluster
	<optgroup mandatory="True" fields="all">
	    <optgroup fields="one">
		<option name="cluster" type="string">Name of the cluster</option>
		<option name="metacluster" type="string">Name of the metacluster</option>
	    </optgroup>
	    <option name="archetype" requires="personality" type="string">Name of the archetype</option>
	    <option name="personality" type="string">Name of the personality</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" trigger="cluster" path="cluster/%(cluster)s/allowed/%(archetype)s/%(personality)s"/>
	<transport method="put" trigger="metacluster" path="metacluster/%(metacluster)s/allowed/%(archetype)s/%(personality)s"/>
    </command>

    <command name="del_allowed_personality">
	delete a personality from the allowed list of a cluster
	<optgroup mandatory="True" fields="all">
	    <optgroup fields="one">
		<option name="cluster" type="string">Name of the cluster</option>
		<option name="metacluster" type="string">Name of the metacluster</option>
	    </optgroup>
	    <option name="archetype" requires="personality" type="string">Name of the archetype</option>
	    <option name="personality" type="string">Name of the personality</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" trigger="cluster" path="cluster/%(cluster)s/allowed/%(archetype)s/%(personality)s"/>
	<transport method="delete" trigger="metacluster" path="metacluster/%(metacluster)s/allowed/%(archetype)s/%(personality)s"/>
    </command>

    <command name="cluster">
	Cluster a host.
	<p/>
	This adds the given host into the given cluster.  This is a potentially
	destructive operation as any previous cluster membership of the host
	will be revoked.
	<p/>
	If the personality is specified then the named personality will be
	assigned to the host on entry to the cluster.
	<optgroup mandatory="True" fields="all">
	    <option name="hostname" type="string">Server name</option>
	    <option name="cluster" type="string">Cluster name</option>
	</optgroup>
	<optgroup>
	    <option name="personality" type="string">New personality of host</option>
	    <option name="personality_stage" requires="personality" type="string">Personality stage to use, defaults to 'current'.</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="cluster/%(cluster)s/host/%(hostname)s"/>
    </command>

    <command name="uncluster">
	Remove the host from the named cluster. If the personality is specified
	then the new personality is applied to the host on exit from the cluster.
	<optgroup mandatory="True" fields="all">
	    <option name="hostname" type="string">Server name</option>
	    <option name="cluster" type="string">Cluster name</option>
	</optgroup>
	<optgroup>
	    <option name="personality" type="string">New personality of host</option>
	    <option name="personality_stage" requires="personality" type="string">Personality stage to use, defaults to 'current'.</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="cluster/%(cluster)s/host/%(hostname)s"/>
    </command>

    <command name="add_dynamic_range">
	Add the allocated range of dynamic hosts.  The start and end
	IP addresses are inclusive.  The IPs must be on the same network.
	If there are any allocated systems already in the range the command
	will fail.
	<p/>
	For every IP address in the range a DNS entry will be generated of
	the form: prefix-X-X-X-X.subdomain where the X's are the components
	of the IP address.  The prefix defaults to the string 'dynamic'.
	<optgroup mandatory="True" fields="one">
	    <optgroup fields="all">
		<option name="startip" type="ipv4">First IP address in the range to add</option>
		<option name="endip" type="ipv4">Last IP address in the range to add</option>
	    </optgroup>
	    <option name="fillnetwork" type="string">Allocate dynamic IPs for all available addresses in the network</option>
	</optgroup>
	<optgroup>
	    <option name="dns_domain" type="string" mandatory="True">DNS domain to use for the generated names</option>
	    <option name="prefix" type="string">Prefix to use for generated names, defaults to 'dynamic'</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="dynamic_range/%(startip)s/%(endip)s"/>
	<transport trigger="fillnetwork" method="post" path="dynamic_range/fill/%(fillnetwork)s"/>
    </command>

    <command name="del_dynamic_range">
	Delete the allocated range of dynamic hosts.  The start and end
	IP addresses are inclusive.  The IPs must be on the same network.
	If there are any allocated systems in the range that are not
	dynamic the command will fail.
	<optgroup mandatory="True" fields="one">
	    <optgroup fields="all">
		<option name="startip" type="ipv4">First IP address in the range to delete</option>
		<option name="endip" type="ipv4">Last IP address in the range to delete</option>
	    </optgroup>
	    <option name="clearnetwork" type="string">Remove dynamic entries from the network</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="dynamic_range/%(startip)s/%(endip)s"/>
	<transport trigger="clearnetwork" method="post" path="dynamic_range/clear/%(clearnetwork)s"/>
    </command>

    <command name="show_dynamic_range">
	Show a range reserved for dynamic DHCP.
	<optgroup mandatory="True" fields="one">
	    <option name="ip" type="ipv4">Any IP address inside the range</option>
	    <option name="fqdn" type="string">Any FQDN inside the range</option>
	</optgroup>
	<optgroup>
	    <option name="dns_environment" type="string">The name of the environment the address is in (defaults to 'internal')</option>
	</optgroup>
	<transport method="get" path="dynamic_range"/>
    </command>

    <command name="add_address">
	Add DNS addresses to the database.
	<p/>
	The IP address can be derived based on aqdb availabililty using:
	--ipfromip:     choose a free IP address in the subnet of the given ip
	--ipfromsystem: choose based on the subnet in use by the given system
	<p/>
	Three algorithms are available for deriving the IP address:
	lowest:   Use the lowest available IP in the subnet.
	highest:  Use the highest available IP in the subnet.
	max:      Find the highest IP in use and add one.
	The default is lowest.
	<optgroup mandatory="True" fields="all">
	    <option name="fqdn" type="string">A fully qualified domain name</option>
	    <optgroup fields="one">
		<option name="ip" type="ipv4">IP address</option>
		<option name="ipfromip" type="ipv4">choose IP address in subnet</option>
		<option name="ipfromsystem" type="string">choose IP address in subnet of system</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="dns_environment" type="string">The name of the environment the address is in (defaults to 'internal')</option>
	    <option name="network_environment" type="string">Name of the environment</option>
	    <option name="ipalgorithm" type="string">Algorithm for automatically choosing an IP.</option>
	    <option name="ttl" type="int">TTL</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="reverse_ptr" type="string">Where the reverse record should point to</option>
	    <optgroup fields="one">
	      <option name="grn" type="string">GRN as string</option>
	      <option name="eon_id" type="int">Numeric EON ID</option>
	    </optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="address/%(fqdn)s"/>
    </command>

    <command name="del_address">
	Delete an address record from the database.
	<optgroup mandatory="True">
	    <option name="fqdn" type="string">The fully qualified domain name</option>
	    <option name="ip" type="ipv4">An IP Address</option>
	</optgroup>
	<optgroup>
	    <option name="dns_environment" type="string">The name of the environment the address is in (defaults to 'internal')</option>
	    <option name="network_environment" type="string">Name of the environment</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="address"/>
    </command>

    <command name="show_address">
	Show an address in the DNS.
	<optgroup mandatory="True" fields="all">
	    <option name="fqdn" type="string">The fully qualified domain name</option>
	</optgroup>
	<optgroup>
	    <option name="dns_environment" type="string">The name of the environment the address is in (defaults to 'internal')</option>
	    <option name="network_environment" type="string">Name of the environment</option>
	</optgroup>
	<transport method="get" path="address/%(fqdn)s"/>
    </command>

    <command name="update_address">
	Update an address in the DNS.
	<optgroup mandatory="True">
	    <option name="fqdn" type="string">The fully qualified domain name</option>
	</optgroup>
	<optgroup>
	    <option name="ip" type="ipv4">The new IP address</option>
	    <option name="ttl" type="int">TTL</option>
	    <option name="clear_ttl" type="flag" conflicts="ttl">Clear customized TTL value</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="reverse_ptr" type="string">Where the reverse record should point to</option>
	    <option name="dns_environment" type="string">The name of the environment the address is in (defaults to 'internal')</option>
	    <option name="network_environment" type="string">Network environment (default: internal)</option>
	    <optgroup fields="one">
	      <option name="grn" type="string">GRN as string</option>
	      <option name="eon_id" type="int">Numeric EON ID</option>
	      <option name="clear_grn" type="flag" conflicts="grn eon_id">Clear GRN value</option>
	    </optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="address"/>
    </command>

    <command name="show_ns_record">
	Display NS Records
	<optgroup mandatory="True" fields="one">
	    <optgroup fields="all">
		<option name="dns_domain" type="string">The dns domain name</option>
		<option name="fqdn" type="string">The fully qualified domain name of the server</option>
	    </optgroup>
	    <option name="all" type="flag">Select all NS Records</option>
	</optgroup>
	<transport method="get" path="ns_record/%(dns_domain)s/%(fqdn)s"/>
	<transport trigger="all" method="get" path="ns_record"/>
    </command>

    <command name="add_ns_record">
	Add an NS Record (Name Server) to a Dns Domain/Environment
	<optgroup mandatory="True" fields="all">
	    <option name="fqdn" type="string">The fully qualified domain name of the name server</option>
	    <option name="dns_domain" type="string">The dns domain to add the record to</option>
	</optgroup>
	<optgroup>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="ns_record/%(dns_domain)s/%(fqdn)s"/>
    </command>

    <command name="del_ns_record">
	Delete an NS Record (Name Server) to a Dns Domain/Environment
	<optgroup mandatory="True" fields="all">
	    <option name="fqdn" type="string">The fully qualified domain name of the name server to delete</option>
	    <option name="dns_domain" type="string">The dns domain to delete the record from</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="ns_record/%(dns_domain)s/%(fqdn)s"/>
    </command>

    <command name="add_alias">
	Add DNS aliases to the database.
	<optgroup mandatory="True" fields="all">
	    <option name="fqdn" type="string">A fully qualified domain name</option>
	    <option name="target" type="string">The target of an alias (CNAME)</option>
	</optgroup>
	<optgroup>
	    <option name="ttl" type="int">TTL</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="dns_environment" type="string">The name of the environment the address is in (defaults to 'internal')</option>
	    <option name="target_environment" type="string">The name of the environment the target is in (defaults to be the same as the alias environment)</option>
	    <optgroup fields="one">
	      <option name="grn" type="string">GRN as string</option>
	      <option name="eon_id" type="int">Numeric EON ID</option>
	    </optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="alias/%(fqdn)s"/>
    </command>

    <command name="del_alias">
	Delete a DNS alias from the database.
	<optgroup mandatory="True" fields="all">
	    <option name="fqdn" type="string">The fully qualified domain name</option>
	</optgroup>
	<optgroup>
	    <option name="dns_environment" type="string">The name of the environment the address is in (defaults to 'internal')</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="alias/%(fqdn)s"/>
    </command>

    <command name="add_address_alias">
	Add DNS address aliases to one or multiple addresses.
	<optgroup mandatory="True" fields="all">
	    <option name="fqdn" type="string">A fully qualified domain name</option>
	    <option name="target" type="string">The target of the A-Record</option>
	</optgroup>
	<optgroup>
	    <option name="ttl" type="int">TTL</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="dns_environment" type="string">The name of the environment the address is in (defaults to 'internal')</option>
	    <option name="target_environment" type="string">The name of the environment the target is in (defaults to be the same as the alias environment)</option>
	    <optgroup fields="one">
	      <option name="grn" type="string">GRN as string</option>
	      <option name="eon_id" type="int">Numeric EON ID</option>
	    </optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="address_alias/%(fqdn)s"/>
    </command>

    <command name="del_address_alias">
	Delete DNS address aliases.
	<optgroup mandatory="True" fields="all">
	    <option name="fqdn" type="string">The fully qualified domain name</option>
	</optgroup>
	<optgroup>
	    <option name="target" type="string">The target of the A-Record</option>
	    <option name="dns_environment" type="string">The name of the environment the address is in (defaults to 'internal')</option>
	    <option name="target_environment" type="string">The name of the environment the target is in (defaults to be the same as the alias environment)</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="address_alias/%(fqdn)s"/>
    </command>

    <command name="update_address_alias">
	Update DNS address aliases.
	<optgroup mandatory="True" fields="all">
	    <option name="fqdn" type="string">The fully qualified domain name</option>
	</optgroup>
	<optgroup>
	    <option name="target" type="string">The target of the A-Record</option>
			<option name="ttl" type="int">TTL</option>
			<option name="clear_ttl" type="flag" conflicts="ttl">Clear customized TTL value</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="dns_environment" type="string">The name of the environment the address is in (defaults to 'internal')</option>
	    <option name="target_environment" type="string">The name of the environment the target is in (defaults to be the same as the alias environment)</option>
	    <optgroup name="grn/eon_id" fields="one">
	      <option name="grn" type="string" conflicts="target">GRN as string</option>
	      <option name="eon_id" type="int" conflicts="target">Numeric EON ID</option>
	      <option name="clear_grn" type="flag" conflicts="grn eon_id target">Clear GRN value</option>
	    </optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="address_alias/%(fqdn)s"/>
    </command>

    <command name="show_alias">
	Show an alias in the DNS.
	<optgroup mandatory="True" fields="all">
	    <option name="fqdn" type="string">The fully qualified domain name</option>
	</optgroup>
	<optgroup>
	    <option name="dns_environment" type="string">The name of the environment the alias is in (defaults to 'internal')</option>
	</optgroup>
	<transport method="get" path="alias/%(fqdn)s"/>
    </command>

    <command name="update_alias">
	Update a DNS alias.
	<optgroup mandatory="True" fields="all">
	    <option name="fqdn" type="string">The fully qualified domain name</option>
	</optgroup>
	<optgroup>
	    <option name="target" type="string">The new target of the alias</option>
	    <option name="ttl" type="int">TTL</option>
	    <option name="clear_ttl" type="flag" conflicts="ttl">Clear customized TTL value</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="dns_environment" type="string">The name of the environment the address is in (defaults to 'internal')</option>
	    <option name="target_environment" type="string">The name of the environment the target is in (defaults to be the same as the alias environment)</option>
	    <optgroup fields="one">
	      <option name="grn" type="string">GRN as string</option>
	      <option name="eon_id" type="int">Numeric EON ID</option>
	      <option name="clear_grn" type="flag" conflicts="grn eon_id">Clear GRN value</option>
	    </optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="alias/%(fqdn)s"/>
    </command>

    <command name="add_srv_record">
	Add a DNS SRV record to the database.
	<optgroup mandatory="True" fields="all">
	    <option name="service" type="string">The name of the service</option>
	    <option name="protocol" type="string">The name of the protocol (tcp, udp)</option>
	    <option name="dns_domain" type="string">The name of the DNS domain</option>
	    <option name="priority" type="int">The priority of the record</option>
	    <option name="weight" type="int">The weight of the record</option>
	    <option name="target" type="string">The target of the SRV record</option>
	    <option name="port" type="int">The port on the target where the service listens</option>
	</optgroup>
	<optgroup>
	    <option name="ttl" type="int">TTL</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="dns_environment" type="string">The name of the environment the address is in (defaults to 'internal')</option>
	    <option name="target_environment" type="string">The name of the environment the target is in (defaults to be the same as the SRV record dns environment)</option>
	    <optgroup fields="one">
	      <option name="grn" type="string">GRN as string</option>
	      <option name="eon_id" type="int">Numeric EON ID</option>
	    </optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="srv_record/%(dns_domain)s/%(protocol)s/%(service)s"/>
    </command>

    <command name="del_srv_record">
	Delete a DNS SRV from the database.
	<p/>
	If --target is not specified, then all matching SRV records are deleted.
	<optgroup mandatory="True" fields="all">
	    <option name="service" type="string">The name of the service</option>
	    <option name="protocol" type="string">The name of the protocol (tcp, udp)</option>
	    <option name="dns_domain" type="string">The name of the DNS domain</option>
	</optgroup>
	<optgroup>
	    <option name="dns_environment" type="string">The name of the environment the address is in (defaults to 'internal')</option>
	    <option name="target" type="string">The target of the SRV record</option>
	    <option name="target_environment" type="string">The name of the environment the target is in (defaults to be the same as the srv record environment)</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="srv_record/%(dns_domain)s/%(protocol)s/%(service)s"/>
    </command>

    <command name="show_srv_record">
	Show DNS SRV records.
	<optgroup mandatory="True" fields="all">
	    <option name="service" type="string">The name of the service</option>
	    <option name="protocol" type="string">The name of the protocol (tcp, udp)</option>
	    <option name="dns_domain" type="string">The name of the DNS domain</option>
	</optgroup>
	<optgroup>
	    <option name="dns_environment" type="string">The name of the environment the srv_record is in (defaults to 'internal')</option>
	</optgroup>
	<transport method="get" path="srv_record/%(dns_domain)s/%(protocol)s/%(service)s"/>
    </command>

    <command name="update_srv_record">
	Update a DNS SRV record.
	<optgroup mandatory="True" fields="all">
	    <option name="service" type="string">The name of the service</option>
	    <option name="protocol" type="string">The name of the protocol (tcp, udp)</option>
	    <option name="dns_domain" type="string">The name of the DNS domain</option>
	</optgroup>
	<optgroup>
	    <option name="target" type="string">The target of the SRV record</option>
	    <option name="priority" type="int">The new priority of the record</option>
	    <option name="weight" type="int">The new weight of the record</option>
	    <option name="port" type="int">The new port on the target where the service listens</option>
	    <option name="ttl" type="int">TTL</option>
	    <option name="clear_ttl" type="flag" conflicts="ttl">Clear customized TTL value</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="dns_environment" type="string">The name of the environment the address is in (defaults to 'internal')</option>
	    <optgroup name="grn/eon_id" fields="one">
	      <option name="grn" type="string" conflicts="target">GRN as string</option>
	      <option name="eon_id" type="int" conflicts="target">Numeric EON ID</option>
	      <option name="clear_grn" type="flag" conflicts="grn eon_id">Clear GRN value</option>
	    </optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="srv_record/%(dns_domain)s/%(protocol)s/%(service)s"/>
    </command>

    <command name="search_dns">
	Search DNS records in the database.
	<p/>
	If you specify multiple search criteria then only records matching all of them
	will be returned.
	<p/>
	For record_type you can use either the standard DNS RR type names (A, CNAME<!--, SRV -->)
	or the internal names.
	<optgroup mandatory="True">
	    <option name="fqdn" type="string">A fully qualified domain name</option>
	    <option name="shortname" type="string">The short name</option>
	    <option name="record_type" type="string">The type of the DNS record</option>
	    <option name="ip" type="ipv4">An IP Address (for A records)</option>
	    <option name="network" type="string">Network name or address (for A records)</option>
	    <option name="target" type="string">The target of an alias or service (for CNAME records)</option>
	    <option name="target_domain" type="string">The DNS domain of the target of an alias or service</option>
	    <!-- <option name="service" type="string">The symbolic name of the service (for SRV records)</option> -->
	    <option name="dns_domain" type="string">Name of the DNS domain the record lives in</option>
	    <option name="primary_name" type="boolean">The DNS record is used as a primary name</option>
	    <option name="used" type="boolean" reverse="unused">The IP address is in use</option>
	    <option name="reverse_override" type="boolean">Is there an override for the reverse PTR record?</option>
	    <option name="reverse_ptr" type="string">The reverse PTR points to this FQDN</option>
	</optgroup>
	<optgroup>
	    <option name="dns_environment" type="string" conflicts="network_environment">The name of an environment the address is in (default: internal)</option>
	    <option name="network_environment" type="string" conflicts="dns_environment"> The network environment for A records (default: internal)</option>
	    <option name="target_environment" type="string">The name of an environment the record's target lives in (default is the same as the record's dns environment)</option>
	    <option name="fullinfo" type="flag">Show full information for the matching records</option>
	</optgroup>
	<transport method="get" path="find/dns_record"/>
    </command>

    <command name="search_rack">
	Search Rack records in the database.
	<optgroup mandatory="True">
	    <optgroup fields="one">
		<option name="organization" type="string">Organization</option>
		<option name="hub" type="string">Hub</option>
		<option name="continent" type="string">Continent</option>
		<option name="country" type="string">Country</option>
		<option name="campus" type="string">Campus</option>
		<option name="city" type="string">City</option>
		<option name="building" type="string">Building</option>
		<option name="room" type="string">Room</option>
		<option name="bunker" type="string">Bunker</option>
		<option name="rack" type="string">Rack</option>
		<option name="desk" type="string">Desk</option>
	    </optgroup>
	    <option name="all" type="flag">list all systems</option>
	    <optgroup>
		<option name="row" type="string">Rack Row</option>
		<option name="column" type="string">Rack Column</option>
		<option name="fullinfo" type="flag">Show full information for the matching records</option>
	    </optgroup>
	</optgroup>
	<transport method="get" path="find/rack"/>
    </command>

    <command name="search_audit">
	Search for activity in the transaction logs.
	<p/>
	Defaults:
	<p/>
	The default is only to search for commands that create, update or
	delete data.  There are some special values for the command option to
	provide customization to this behavior:
	<p/>"rw": includes read only commands except 'cat' and "show_active_*"
	<p/>"all": includes ALL commands including the above
	<p/>Date specifications: MM-DD-YY (midnight UTC),
	or "MM-DD-YY HH:MM:SS+OOOO" (quotes needed).
	<p/>
	Some more complex formats are capable, details can be found in
	the "parser" section of http://niemeyer.net/python-dateutil
	<p/>The limit option defaults to 5000 and has a maximum of 20000
	in order to enhance performance and stability.
	<optgroup mandatory="True">
	    <option name="keyword" type="string">The value of any argument supplied to a command</option>
	    <option name="argument" type="string">Look at the value of the specified argument only</option>
	    <option name="username" type="string">The user name who executed the command</option>
	    <option name="command" type="string">The name of the command (see "Defaults")</option>
	    <option name="before" type="string">Search for transactions started before a specific date/time</option>
	    <option name="after" type="string">Search for transactions started after a specific date/time</option>
	    <option name="return_code" type="int">Search by an HTTP response code (200-505)</option>
	    <option name="limit" type="int">Limit the number of rows returned. (Default 5000/Max 20000)</option>
	    <option name="reverse_order" type="flag">Output records in
		reverse chronological order. Also causes the --limit
		parameter to find the oldest records and not the newest.
	    </option>
	</optgroup>
	<transport method="get" path="find/audit"/>
	<format name="proto" >
	    <message_class name="TransactionList" module="aqdaudit_pb2"/>
	</format>
    </command>

    <command name="show_reboot_schedule">
	Show reboot_schedule based on filtering for host/cluster association
	<optgroup mandatory="True" fields="one">
	    <option name="cluster" type="string">cluster name</option>
	    <option name="hostname" type="string">hostname</option>
	    <option name="all" type="flag">list all schedules</option>
	</optgroup>
	<transport method="get" path="resource/reboot_schedule/reboot_schedule"/>
	<format name="proto" >
	    <message_class name="ResourceList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="add_reboot_schedule">
	Add a new reboot schedule to a host or cluster.
	<p/>
	WW must match personality maintenance window. Preferred time (if
	specified) must be in WW. Time is always the host region's local
	time.
	<p/>
	For schedule to take affect the server must be bound to reboot
	service instance 'scheduled'. A warning will be printed if not.
	<optgroup mandatory="True" fields="all">
	    <optgroup fields="one">
		<option name="hostname" type="string">Hostname to apply resource</option>
		<option name="cluster" type="string">Cluster to apply resource</option>
	    </optgroup>
	    <option name="week" type="string" default="all">Comma separated week (1-4 or all)</option>
	    <option name="day" type="string" default="Sun">Week day (Sun,Mon...Sat) maching maintenance WW</option>
	</optgroup>
	<optgroup>
	    <option name="time" type="string">Preferred time (omit for anytime within WW)</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="resource/reboot_schedule"/>
    </command>

    <command name="del_reboot_schedule">
	Delete the reboot schedule resource.
	<p/>
	For a host bound to reboot service instance 'scheduled' a warning
	will printed at compile time if no schedule exists. The host will
	not reboot.
	<optgroup mandatory="True" fields="one">
	    <option name="hostname" type="string">Hostname to apply resource</option>
	    <option name="cluster" type="string">Cluster to apply resource</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="resource/reboot_schedule"/>
    </command>

    <command name="show_reboot_intervention">
	Show reboot_intervention based on filtering for host/cluster association
	<optgroup mandatory="True" fields="one">
	    <option name="cluster" type="string">cluster name</option>
	    <option name="hostname" type="string">hostname</option>
	    <option name="all" type="flag">list all interventions</option>
	</optgroup>
	<transport method="get" path="resource/reboot_intervention"/>
	<format name="proto" >
	    <message_class name="ResourceList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="add_reboot_intervention">
	Add a new reboot intervention resource.
	<p/>
	The intervention will apply after host compilation and NCM
	update and so should be done in plenty of time before the
	scheduled reboot is to take place.
	<p/>
	This intervention treats date as the whole day inclusive to
	expiry. Time of the intervention is ignored.
	<p/>
	Only a single reboot intervention can be in place at once.
	<optgroup mandatory="True" fields="all">
	    <optgroup fields="one">
		<option name="hostname" type="string">Host</option>
		<option name="cluster" type="string">Cluster</option>
	    </optgroup>
	    <option name="expiry" type="string">when to expire this intervention</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="start_time" type="string">when to start this intervention (default=now)</option>
	</optgroup>
	<transport method="put" path="resource/reboot_intervention"/>
    </command>

    <command name="del_reboot_intervention">
	Delete the reboot intervention resource.

	<p/> The intervention will be removed after host compilation and NCM
	update.
	<optgroup mandatory="True" fields="one">
	    <option name="hostname" type="string">Hostname to apply resource</option>
	    <option name="cluster" type="string">Cluster to apply resource</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="resource/reboot_intervention"/>
    </command>

    <command name="add_filesystem">
	Add a new filesystem resource.
	<optgroup mandatory="True" fields="all">
	    <optgroup>
		<option name="hostname" type="string" conflicts="cluster metacluster">Hostname to apply resource</option>
		<option name="cluster" type="string" conflicts="hostname metacluster">Cluster to apply resource</option>
		<option name="metacluster" type="string" conflicts="hostname cluster">Metacluster to apply resource</option>
		<option name="resourcegroup" type="string">Resourcegroup to apply resource</option>
	    </optgroup>
	    <option name="filesystem" type="string">name</option>
	    <option name="type" type="string">type</option>
	    <option name="mountpoint" type="string">mountpoint</option>
	    <option name="blockdevice" type="string">blockdevice</option>
	    <option name="bootmount" type="boolean">immediately mount on boot</option>
	</optgroup>
	<optgroup>
	    <option name="dumpfreq" type="int" default="0">dump frequency</option>
	    <option name="fsckpass" type="int" default="2">fsck passno</option>
	    <option name="options" type="string">mountoptions</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="resource/filesystem/%(filesystem)s"/>
    </command>

    <command name="del_filesystem">
	Delete a filesystem resource.
	<optgroup mandatory="True" fields="all">
	    <optgroup>
		<option name="hostname" type="string" conflicts="cluster metacluster">Hostname to apply resource</option>
		<option name="cluster" type="string" conflicts="hostname metacluster">Cluster to apply resource</option>
		<option name="metacluster" type="string" conflicts="hostname cluster">Metacluster to apply resource</option>
		<option name="resourcegroup" type="string">Resourcegroup to apply resource</option>
	    </optgroup>
	    <option name="filesystem" type="string">name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="resource/filesystem/%(filesystem)s"/>
    </command>

    <command name="update_filesystem">
        Update the parameters of an existing filesystem.
	<optgroup mandatory="True" fields="all">
	    <optgroup>
		<option name="hostname" type="string" conflicts="cluster metacluster">Hostname to apply resource</option>
		<option name="cluster" type="string" conflicts="hostname metacluster">Cluster to apply resource</option>
		<option name="metacluster" type="string" conflicts="hostname cluster">Metacluster to apply resource</option>
		<option name="resourcegroup" type="string">Resourcegroup to apply resource</option>
	    </optgroup>
	    <option name="filesystem" type="string">name</option>
	</optgroup>
	<optgroup>
	    <option name="type" type="string">type</option>
	    <option name="mountpoint" type="string">mountpoint</option>
	    <option name="blockdevice" type="string">blockdevice</option>
	    <option name="bootmount" type="boolean">immediately mount on boot</option>
	    <option name="dumpfreq" type="int" default="0">dump frequency</option>
	    <option name="fsckpass" type="int" default="2">fsck passno</option>
	    <option name="options" type="string">mountoptions</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
        <transport method="post" path="resource/filesystem/%(filesystem)s"/>
    </command>

    <command name="show_filesystem">
	Show filesystems based on filtering for host/cluster association
	<optgroup mandatory="True">
	    <optgroup>
		<option name="hostname" type="string" conflicts="cluster metacluster">Hostname to apply resource</option>
		<option name="cluster" type="string" conflicts="hostname metacluster">Cluster to apply resource</option>
		<option name="metacluster" type="string" conflicts="hostname cluster">Metacluster to apply resource</option>
		<option name="resourcegroup" type="string">Resourcegroup to apply resource</option>
	    </optgroup>
	    <option name="filesystem" type="string">filesystem name</option>
	    <option name="all" type="flag" conflicts="hostname cluster metacluster resourcegroup filesystem">list all filesystems</option>
	</optgroup>
	<transport method="get" trigger="filesystem" path="resource/filesystem/%(filesystem)s"/>
	<transport method="get" path="find/resource/filesystem"/>
	<format name="proto" >
	    <message_class name="ResourceList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="add_share">
	Add a new share resource.
	<optgroup mandatory="True" fields="all">
	    <optgroup>
		<option name="hostname" type="string" conflicts="cluster metacluster">Hostname to apply resource</option>
		<option name="cluster" type="string" conflicts="hostname metacluster">Cluster to apply resource</option>
		<option name="metacluster" type="string" conflicts="hostname cluster">Metacluster to apply resource</option>
		<option name="resourcegroup" type="string">Resourcegroup to apply resource</option>
	    </optgroup>
	    <option name="share" type="string">name</option>
	</optgroup>
	<optgroup>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="resource/share/%(share)s"/>
    </command>

    <command name="update_share">
	Update a share resource.
	<optgroup mandatory="True" fields="all">
	    <option name="share" type="string">name</option>
	</optgroup>
	<optgroup>
	    <option name="comments" type="string">Comments</option>
	    <option name="latency_threshold" type="string">Latency threshold</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="resource/share/%(share)s"/>
    </command>

    <command name="del_share">
	Delete a share resource.
	<optgroup mandatory="True" fields="all">
	    <optgroup>
		<option name="hostname" type="string" conflicts="cluster metacluster">Hostname to apply resource</option>
		<option name="cluster" type="string" conflicts="hostname metacluster">Cluster to apply resource</option>
		<option name="metacluster" type="string" conflicts="hostname cluster">Metacluster to apply resource</option>
		<option name="resourcegroup" type="string">Resourcegroup to apply resource</option>
	    </optgroup>
	    <option name="share" type="string">name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="resource/share/%(share)s"/>
    </command>

    <command name="show_share">
	Show shares based on filtering for host/cluster association
	<optgroup mandatory="True">
	    <optgroup>
		<option name="hostname" type="string" conflicts="cluster metacluster">Hostname to apply resource</option>
		<option name="cluster" type="string" conflicts="hostname metacluster">Cluster to apply resource</option>
		<option name="metacluster" type="string" conflicts="hostname cluster">Metacluster to apply resource</option>
		<option name="resourcegroup" type="string">Resourcegroup to apply resource</option>
	    </optgroup>
	    <option name="share" type="string">share name</option>
	    <option name="all" type="flag" conflicts="hostname cluster metacluster resourcegroup share">list all shares</option>
	</optgroup>
	<transport method="get" trigger="share" path="resource/share/%(share)s"/>
	<transport method="get" path="find/resource/share"/>
	<format name="proto" >
	    <message_class name="ResourceList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="add_application">
	Add a new application resource.
	<optgroup mandatory="True" fields="all">
	    <optgroup>
		<option name="hostname" type="string" conflicts="cluster metacluster">Hostname to apply resource</option>
		<option name="cluster" type="string" conflicts="hostname metacluster">Cluster to apply resource</option>
		<option name="metacluster" type="string" conflicts="hostname cluster">Metacluster to apply resource</option>
		<option name="resourcegroup" type="string">Resourcegroup to apply resource</option>
	    </optgroup>
	    <option name="application" type="string">Name of applicaiton</option>
	    <optgroup fields="one">
		<option name="eon_id" type="int">EON identity</option>
		<option name="grn" type="string">GRN</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="resource/application/%(application)s"/>
    </command>

    <command name="del_application">
	Delete an application resource.
	<optgroup mandatory="True" fields="all">
	    <optgroup>
		<option name="hostname" type="string" conflicts="cluster metacluster">Hostname to apply resource</option>
		<option name="cluster" type="string" conflicts="hostname metacluster">Cluster to apply resource</option>
		<option name="metacluster" type="string" conflicts="hostname cluster">Metacluster to apply resource</option>
		<option name="resourcegroup" type="string">Resourcegroup to apply resource</option>
	    </optgroup>
	    <option name="application" type="string">name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="resource/application/%(application)s"/>
    </command>

    <command name="show_application">
	Show applications based on filtering for host/cluster association
	<optgroup mandatory="True" fields="one">
	    <optgroup fields="all">
		<optgroup>
		    <option name="hostname" type="string" conflicts="cluster metacluster">Hostname to apply resource</option>
		    <option name="cluster" type="string" conflicts="hostname metacluster">Cluster to apply resource</option>
		    <option name="metacluster" type="string" conflicts="hostname cluster">Metacluster to apply resource</option>
		    <option name="resourcegroup" type="string">Resourcegroup to apply resource</option>
		</optgroup>
		<option name="application" type="string">application name</option>
	    </optgroup>
	    <option name="all" type="flag" conflicts="hostname cluster metacluster resourcegroup application">list all applications</option>
	</optgroup>
	<transport method="get" trigger="application" path="resource/application/%(application)s"/>
	<transport method="get" path="find/resource/application"/>
	<format name="proto" >
	    <message_class name="ResourceList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="add_hostlink">
	Add a new hostlink resource.
	<optgroup mandatory="True" fields="all">
	    <optgroup>
		<option name="hostname" type="string" conflicts="cluster metacluster">Hostname to apply resource</option>
		<option name="cluster" type="string" conflicts="hostname metacluster">Cluster to apply resource</option>
		<option name="metacluster" type="string" conflicts="hostname cluster">Metacluster to apply resource</option>
		<option name="resourcegroup" type="string">Resourcegroup to apply resource</option>
	    </optgroup>
	    <option name="hostlink" type="string">Name of hostlink</option>
	    <option name="target" type="string">Target path of link</option>
	    <option name="owner" type="string">Username to be owner of the target directory</option>
	</optgroup>
	<optgroup>
	    <option name="group" type="string">Group owner of the target directory</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="resource/hostlink/%(hostlink)s"/>
    </command>

    <command name="del_hostlink">
	Delete an hostlink resource.
	<optgroup mandatory="True" fields="all">
	    <optgroup>
		<option name="hostname" type="string" conflicts="cluster metacluster">Hostname to apply resource</option>
		<option name="cluster" type="string" conflicts="hostname metacluster">Cluster to apply resource</option>
		<option name="metacluster" type="string" conflicts="hostname cluster">Metacluster to apply resource</option>
		<option name="resourcegroup" type="string">Resourcegroup to apply resource</option>
	    </optgroup>
	    <option name="hostlink" type="string">name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="resource/hostlink/%(hostlink)s"/>
    </command>

    <command name="show_hostlink">
	Show a hostlink resource.
	<optgroup mandatory="True">
	    <optgroup>
		<option name="hostname" type="string" conflicts="cluster metacluster">Hostname to apply resource</option>
		<option name="cluster" type="string" conflicts="hostname metacluster">Cluster to apply resource</option>
		<option name="metacluster" type="string" conflicts="hostname cluster">Metacluster to apply resource</option>
		<option name="resourcegroup" type="string">Resourcegroup to apply resource</option>
	    </optgroup>
	    <option name="hostlink" type="string">hostlink name</option>
	    <option name="all" type="flag" conflicts="hostname cluster metacluster resourcegroup hostlink">list all hostlinks</option>
	</optgroup>
	<transport method="get" trigger="hostlink" path="resource/hostlink/%(hostlink)s"/>
	<transport method="get" path="find/resource/hostlink"/>
	<format name="proto" >
	    <message_class name="ResourceList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="add_intervention">
	Add a new intervention resource.
	<optgroup mandatory="True" fields="all">
	    <optgroup fields="one">
		<option name="hostname" type="string">Host</option>
		<option name="cluster" type="string">Cluster</option>
		<option name="metacluster" type="string">Metacluster to apply resource</option>
	    </optgroup>
	    <option name="expiry" type="string">when to expire this intervention</option>
	    <option name="intervention" type="string">the name of the intervention</option>
	    <option name="reason" type="string">String to be specified if justification='emergency'</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">the reason for the intervention</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="allowusers" type="string">Additional users allowed access</option>
	    <option name="allowgroups" type="string">Additional groups allowed access</option>
	    <option name="disabled_actions" type="string">Disabled actions</option>
	    <option name="start_time" type="string">when to start this intervention (default=now)</option>
	</optgroup>
	<transport method="put" path="resource/intervention/%(intervention)s"/>
    </command>

    <command name="show_intervention">
	Display the attributes of an existing intervention resource.
	<optgroup mandatory="True">
	    <optgroup fields="one">
		<option name="hostname" type="string">hostname</option>
		<option name="cluster" type="string">cluster name</option>
		<option name="metacluster" type="string">metacluster name</option>
	    </optgroup>
	    <option name="intervention" type="string">the name of the intervention</option>
	    <option name="all" type="flag" conflicts="hostname cluster metacluster resourcegroup intervention">list all interventions</option>
	</optgroup>
	<transport method="get" trigger="intervention" path="resource/intervention/%(intervention)s"/>
	<transport method="get" path="find/resource/intervention"/>
	<format name="proto" >
	    <message_class name="ResourceList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="del_intervention">
	Delete an intervention resource.
	<optgroup mandatory="True" fields="all">
	    <optgroup fields="one">
		<option name="hostname" type="string">Hostname of resource</option>
		<option name="cluster" type="string">Cluster of resource</option>
		<option name="metacluster" type="string">Metacluster to apply resource</option>
	    </optgroup>
	    <option name="intervention" type="string">name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="resource/intervention/%(intervention)s"/>
    </command>

    <command name="add_service_address">
	Add a new service address resource.
	<optgroup mandatory="True" fields="all">
	    <optgroup>
		<option name="hostname" type="string" conflicts="cluster metacluster">Hostname to apply resource</option>
		<option name="cluster" type="string" conflicts="hostname metacluster">Cluster to apply resource</option>
		<option name="metacluster" type="string" conflicts="hostname cluster">Metacluster to apply resource</option>
		<option name="resourcegroup" type="string">Resourcegroup to apply resource</option>
	    </optgroup>
	    <optgroup fields="one">
		<option name="service_address" type="string">Fully qualified name to register in the DNS</option>
		<option name="shortname" type="string">Short name of the address in the default DNS domain</option>
		<option name="prefix" type="string">Prefix for generating a name in the default DNS domain</option>
	    </optgroup>
	    <option name="name" type="string">Logical name of the service address</option>
	</optgroup>
	<optgroup>
	    <option name="interfaces" type="string">Comma separated list of interfaces</option>
	    <option name="ip" type="ipv4">IP address</option>
	    <option name="network_environment" type="string">Network environment (default: internal)</option>
	    <option name="dns_domain" type="string" requires="prefix">Override the default DNS domain for --prefix</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="map_to_primary" type="boolean">Should the reverse PTR point to the primary name?</option>
	    <option name="shared" type="flag">Allow the address to be used multiple times</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="resource/service_address/%(name)s"/>
    </command>

    <command name="del_service_address">
	Delete a service address resource.
	<optgroup mandatory="True" fields="all">
	    <optgroup>
		<option name="hostname" type="string" conflicts="cluster metacluster">Hostname to apply resource</option>
		<option name="cluster" type="string" conflicts="hostname metacluster">Cluster to apply resource</option>
		<option name="metacluster" type="string" conflicts="hostname cluster">Metacluster to apply resource</option>
		<option name="resourcegroup" type="string">Resourcegroup to apply resource</option>
	    </optgroup>
	    <option name="name" type="string">Logical name of the service address</option>
	</optgroup>
	<optgroup>
	    <option name="keep_dns" type="flag">Keep the DNS record</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="resource/service_address/%(name)s"/>
    </command>

    <command name="show_service_address">
	Show service addresss based on filtering for host/cluster association
	<optgroup mandatory="True" fields="one">
	    <optgroup fields="all">
		<optgroup>
		    <option name="hostname" type="string" conflicts="cluster metacluster">Hostname to apply resource</option>
		    <option name="cluster" type="string" conflicts="hostname metacluster">Cluster to apply resource</option>
		    <option name="metacluster" type="string" conflicts="hostname cluster">Metacluster to apply resource</option>
		    <option name="resourcegroup" type="string">Resourcegroup to apply resource</option>
		</optgroup>
		<option name="name" type="string">service address name</option>
	    </optgroup>
	    <option name="all" type="flag" conflicts="hostname cluster metacluster resourcegroup name">list all service addresses</option>
	</optgroup>
	<transport method="get" trigger="name" path="resource/service_address/%(name)s"/>
	<transport method="get" path="find/resource/service_address"/>
	<format name="proto" >
	    <message_class name="ResourceList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="update_service_address">
	Update the parameters of a service address resource.
	<optgroup mandatory="True" fields="all">
	    <optgroup>
		<option name="hostname" type="string" conflicts="cluster metacluster">Hostname to apply resource</option>
		<option name="cluster" type="string" conflicts="hostname metacluster">Cluster to apply resource</option>
		<option name="metacluster" type="string" conflicts="hostname cluster">Metacluster to apply resource</option>
		<option name="resourcegroup" type="string">Resourcegroup to apply resource</option>
	    </optgroup>
	    <option name="name" type="string">Logical name of the service address</option>
	</optgroup>
	<optgroup>
	    <option name="interfaces" type="string">Comma separed list of interfaces</option>
	    <option name="ip" type="ipv4">IP address</option>
	    <option name="network_environment" type="string" requires="ip">Network environment (default: internal)</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="map_to_primary" type="boolean">Should the reverse PTR point to the primary name?</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="resource/service_address/%(name)s"/>
    </command>

    <command name="add_grn">
	Add a new GRN.
	<optgroup mandatory="True" fields="all">
	    <option name="grn" type="string">GRN as string</option>
	    <option name="eon_id" type="int">Numeric EON ID</option>
	</optgroup>
	<optgroup>
	    <option name="disabled" type="flag">GRN is disabled and cannot be added to new systems</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="grn/%(eon_id)s/%(grn)s"/>
    </command>

    <command name="del_grn">
	Delete a GRN.
	<optgroup mandatory="True" fields="one">
	    <option name="grn" type="string">GRN to delete</option>
	    <option name="eon_id" type="int">Numeric EON ID to delete</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="grn"/>
    </command>

    <command name="update_grn">
	Update a GRN.
	<optgroup mandatory="True" fields="one">
	    <option name="grn" type="string">GRN to update</option>
	    <option name="eon_id" type="int">Numeric EON ID to update</option>
	</optgroup>
	<optgroup>
	    <option name="disabled" type="boolean">GRN is disabled and cannot be mapped to new systems</option>
	    <option name="rename_to" type="string">Rename GRN</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="grn"/>
    </command>

    <command name="show_grn">
	Display a GRN.
	<optgroup mandatory="True" fields="one">
	    <option name="grn" type="string">GRN to display</option>
	    <option name="eon_id" type="int">Numeric EON ID to display</option>
	    <option name="all" type="flag">Show all GRNs</option>
	</optgroup>
	<transport method="get" path="grn"/>
    </command>

    <command name="refresh_grns">
	Refresh the mapping from GRNs to EON IDs.
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="command/refresh_grns"/>
    </command>

    <command name="map_grn">
	Map a given GRN to a host or a personality. The affected host(s) must be
	recompiled for the changes to take effect.
	<optgroup mandatory="True" fields="all">
	    <option name="target" type="string">peer system using the GRN</option>
	    <optgroup fields="one">
		<option name="grn" type="string">GRN as string</option>
		<option name="eon_id" type="int">Numeric EON ID</option>
	    </optgroup>
	    <optgroup fields="one">
		<option name="hostname" type="string">Host</option>
		<option name="list" type="list">List of hosts</option>
		<option name="personality" type="string">Personality</option>
		<option name="membersof" type="string">Hosts which are members of the specified cluster</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="archetype" requires="personality" type="string">Archetype of the personality</option>
	    <option name="personality_stage" requires="personality" type="string">Personality stage to use, defaults to 'next'.</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">String to be specified if justification='emergency'</option>
	</optgroup>
	<transport method="post" path="grn/command/map"/>
    </command>

    <command name="unmap_grn">
	Unmap a given GRN from a host or a personality. The affected host(s) must be
	recompiled for the changes to take effect.
	<optgroup mandatory="True" fields="all">
	    <option name="target" type="string">peer system using the GRN</option>
	    <optgroup fields="one">
		<option name="grn" type="string">GRN as string</option>
		<option name="eon_id" type="int">Numeric EON ID</option>
		<option name="clearall" type="flag">Option to clear all target grns</option>
	    </optgroup>
	    <optgroup fields="one">
		<option name="hostname" type="string">Host</option>
		<option name="list" type="list">List of hosts</option>
		<option name="membersof" type="string">Hosts which are members of the specified cluster</option>
		<option name="personality" type="string">Personality</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="archetype" requires="personality" type="string">Archetype of the personality</option>
	    <option name="personality_stage" requires="personality" type="string">Personality stage to use, defaults to 'next'.</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">String to be specified if justification='emergency'</option>
	</optgroup>
	<transport method="post" path="grn/command/unmap"/>
	<transport trigger="clearall" method="post" path="grn/command/unmap_clearall"/>
    </command>

    <command name="add_resourcegroup">
	Add a new resource group.
	<optgroup mandatory="True" fields="all">
	    <optgroup fields="one">
		<option name="hostname" type="string">Hostname to apply resource group</option>
		<option name="cluster" type="string">Cluster to apply resource group</option>
		<option name="metacluster" type="string">Metacluster to apply resource</option>
	    </optgroup>
	    <option name="resourcegroup" type="string">Name of the resource group</option>
	</optgroup>
	<optgroup>
	    <option name="required_type" type="string">group members must have this type</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="resource/resourcegroup/%(resourcegroup)s"/>
    </command>

    <command name="del_resourcegroup">
	Delete a resource group.
	<optgroup mandatory="True" fields="all">
	    <optgroup fields="one">
		<option name="hostname" type="string">Hostname of the resource group</option>
		<option name="cluster" type="string">Cluster of the resource group</option>
		<option name="metacluster" type="string">Metacluster to apply resource</option>
	    </optgroup>
	    <option name="resourcegroup" type="string">Name of the resource group</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="resource/resourcegroup/%(resourcegroup)s"/>
    </command>

    <command name="show_resourcegroup">
	Show resource groups based on filtering for host/cluster association.
	<optgroup mandatory="True">
	    <optgroup fields="one">
		<option name="hostname" type="string">hostname</option>
		<option name="cluster" type="string">cluster name</option>
		<option name="metacluster" type="string">metacluster name</option>
	    </optgroup>
	    <option name="resourcegroup" type="string">resource group name</option>
	    <option name="all" type="flag" conflicts="hostname cluster metacluster resourcegroup">list all resource groups</option>
	</optgroup>
	<transport method="get" trigger="resourcegroup" path="resource/resourcegroup/%(resourcegroup)s"/>
	<transport method="get" path="find/resource/resourcegroup"/>
	<format name="proto" >
	    <message_class name="ResourceList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="update_resourcegroup">
	Update the parameters of a resource group.
	<optgroup mandatory="True" fields="all">
	    <optgroup fields="one">
		<option name="hostname" type="string">Hostname to apply resource group</option>
		<option name="cluster" type="string">Cluster to apply resource group</option>
		<option name="metacluster" type="string">Metacluster to apply resource</option>
	    </optgroup>
	    <option name="resourcegroup" type="string">Name of the resource group</option>
	</optgroup>
	<optgroup>
	    <option name="required_type" type="string">group members must have this type</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="resource/resourcegroup/%(resourcegroup)s"/>
    </command>

    <command name="add_feature">
	Add a new feature. A feature is a template under &lt;archetype&gt;/features which
	gets included by the plenaries.
	<optgroup mandatory="True" fields="all">
	    <option name="feature" type="string">The name of the feature</option>
	    <option name="type" type="string">Type of the feature: host, hardware or interface</option>
	    <option name="activation" type="string">How the feature gets activated, valid values are rebuild, reboot, dispatch</option>
	    <option name="deactivation" type="string">How the feature gets removed, valid values are rebuild, reboot, dispatch</option>
	    <optgroup fields="one">
		<option name="grn" type="string" conflicts="eon_id">GRN as string</option>
		<option name="eon_id" type="int" conflicts="grn">Numeric EON ID</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="pre_personality" type="flag">Call the feature before the personality</option>
	    <option name="comments" type="string">Comments</option>
	    <option name="visibility" type="string">scope of the feature
        values are public, restricted (default), owner_only, owner_approved</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="feature/%(type)s/%(feature)s"/>
    </command>

    <command name="update_feature">
	Update feature attributes.
	<optgroup mandatory="True" fields="all">
	    <option name="feature" type="string">The name of the feature</option>
	    <option name="type" type="string">Type of the feature: host, hardware or interface</option>
	</optgroup>
	<optgroup>
	    <option name="comments" type="string">Comments</option>
	    <option name="visibility" type="string">scope of the feature values are public, restricted, owner_only, owner_approved</option>
	    <option name="activation" type="string">How the feature gets activated, valid values are rebuild, reboot, dispatch</option>
	    <option name="deactivation" type="string">How the feature gets removed, valid values are rebuild, reboot, dispatch</option>
	    <optgroup fields="one">
		<option name="grn" type="string" conflicts="eon_id">GRN as string</option>
		<option name="eon_id" type="int" conflicts="grn">Numeric EON ID</option>
	    </optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="feature/%(type)s/%(feature)s"/>
    </command>

    <command name="del_feature">
	Delete a feature.
	<optgroup mandatory="True" fields="all">
	    <option name="feature" type="string">The name of the feature</option>
	    <option name="type" type="string">Type of the feature: host, hardware or interface</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="feature/%(type)s/%(feature)s"/>
    </command>

    <command name="show_feature">
	Display a single feature or all features.
	<optgroup mandatory="True" fields="one">
	    <optgroup fields="all">
		<option name="feature" type="string">The name of the feature</option>
		<option name="type" type="string">The type of the feature</option>
	    </optgroup>
	    <option name="all" type="flag">Show all features</option>
	</optgroup>
	<transport trigger="all" method="get" path="feature"/>
	<transport method="get" path="feature/%(type)s/%(feature)s"/>
	<format name="proto">
	    <message_class name="FeatureList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="bind_feature">
	Bind a feature to a given object.
	<p/>
	Affected personality plenaries will be refreshed.
	The hosts however are not compiled; that has to be done manually.
	<p/>
	Changing feature links for a whole archetype require --justification and a valid TCM.
	<optgroup mandatory="True" fields="all">
	    <option name="feature" type="string">Name of the feature</option>
	    <optgroup>
		<option name="personality" type="string">Name of a personality</option>
		<option name="archetype" type="string">Archetype</option>
		<option name="model" type="string">Name of a hardware model</option>
		<option name="interface" type="string">Interface of a machine</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="personality_stage" requires="personality" type="string">Personality stage to use, defaults to 'next'.</option>
	    <option name="vendor" requires="model" type="string">Vendor name, if the model name is not unique</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">String to be specified if justification='emergency'</option>
	</optgroup>
	<transport method="post" path="command/bind_feature"/>
    </command>

    <command name="unbind_feature">
	Unbind a feature from a given object.
	<p/>
	Affected host plenaries will be refreshed unless the --noflush option has been specified.
	The hosts however are not compiled; that has to be done manually.
	<p/>
	Changing feature links for a whole archetype require --justification and a valid TCM.
	<optgroup mandatory="True" fields="all">
	    <option name="feature" type="string">Name of the feature</option>
	    <optgroup>
		<option name="personality" type="string">Name of a personality</option>
		<option name="archetype" type="string">Archetype</option>
		<option name="model" type="string">Name of a hardware model</option>
		<option name="interface" type="string">Interface of a machine</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="personality_stage" requires="personality" type="string">Personality stage to use, defaults to 'next'.</option>
	    <option name="vendor" requires="model" type="string">Vendor name, if the model name is not unique</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">String to be specified if justification='emergency'</option>
	</optgroup>
	<transport method="post" path="command/unbind_feature"/>
    </command>

    <command name="show_parameter">
	Display all parameters configured on a personality
	<optgroup mandatory="True">
	    <option name="personality" type="string">Name of  personality</option>
	</optgroup>
	<optgroup>
	    <option name="archetype" type="string">Archetype</option>
	    <option name="personality_stage" type="string">Personality stage to use, defaults to 'current'.</option>
	</optgroup>
	<transport method="get" path="personality/personality/%(personality)s/parameters"/>
	<format name="proto" >
	    <message_class name="ParameterList" module="aqdparameters_pb2"/>
	</format>
    </command>

    <command name="validate_parameter">
	Validate all parameters configured on a personality
	<optgroup mandatory="True" fields="all">
	    <option name="personality" type="string">Name of personality</option>
	</optgroup>
	<optgroup>
	    <option name="archetype" type="string">Archetype</option>
	    <option name="personality_stage" type="string">Personality stage to use, defaults to 'next'.</option>
	</optgroup>
	<transport method="post" path="command/validate_parameter"/>
    </command>

    <command name="add_parameter">
	add a parameter to a given object.
	<optgroup mandatory="True" fields="all">
	    <option name="personality" type="string">Name of personality</option>
	    <option name="path" type="string">Path of the parameter</option>
	    <option name="value" type="string">Value for the parameter, type depending on the parameter definition</option>
	</optgroup>
	<optgroup>
	    <option name="feature" type="string">Feature</option>
	    <option name="type" type="string" requires="feature">Feature type</option>
	    <option name="archetype" type="string">Archetype</option>
	    <option name="personality_stage" type="string">Personality stage to use, defaults to 'next'.</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">String to be specified if justification='emergency'</option>
	</optgroup>
	<transport method="post" path="command/add_parameter"/>
    </command>

    <command name="update_parameter">
	update config parameter to a given object.
	<optgroup mandatory="True" fields="all">
	    <option name="personality" type="string">Name of personality</option>
	    <option name="path" type="string">Path of the parameter</option>
	    <option name="value" type="string">Value for the parameter, type depending on the parameter definition</option>
	</optgroup>
	<optgroup>
	    <option name="feature" type="string">Feature</option>
	    <option name="type" type="string" requires="feature">Feature type</option>
	    <option name="archetype" type="string">Archetype</option>
	    <option name="personality_stage" type="string">Personality stage to use, defaults to 'next'.</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">String to be specified if justification='emergency'</option>
	</optgroup>
	<transport method="post" path="command/update_parameter"/>
    </command>

    <command name="del_parameter">
	Delete config parameter of a given object.
	<optgroup mandatory="True" fields="all">
	    <option name="personality" type="string">Name of personality</option>
	    <option name="path" type="string">Path of the parameter</option>
	</optgroup>
	<optgroup>
	    <option name="feature" type="string">Feature</option>
	    <option name="type" type="string" requires="feature">Feature type</option>
	    <option name="archetype" type="string">Archetype</option>
	    <option name="personality_stage" type="string">Personality stage to use, defaults to 'next'.</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">String to be specified if justification='emergency'</option>
	</optgroup>
	<transport method="post" path="command/del_parameter"/>
    </command>

    <command name="show_diff">
	Compare config parameter for two object.
	<optgroup mandatory="True" fields="all">
	    <option name="archetype" type="string">Archetype</option>
	    <option name="personality" type="string">Name of personality</option>
	    <optgroup fields="any">
		<option name="other" type="string">Name of personality to compare with</option>
		<option name="other_stage" type="string">Target personality version to use, defaults to 'current'.</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="personality_stage" type="string">Personality stage to use, defaults to 'current'.</option>
	    <option name="other_archetype" type="string">Archetype of personality to compare with</option>
	</optgroup>
	<transport method="get" path="diff"/>
    </command>

    <command name="add_parameter_definition">
	Add parameter definition for a parameter.
	<optgroup mandatory="True" fields="all">
	    <optgroup fields="one">
		<optgroup fields="all">
		    <option name="archetype" type="string">Archetype</option>
		    <option name="template" type="string">Name of structure template this parameter gets included in</option>
		</optgroup>
		<optgroup fields="all">
		    <option name="feature" type="string">Feature</option>
		    <option name="type" type="string">Type of the feature: host, hardware or interface</option>
		</optgroup>
	    </optgroup>
	    <option name="path" type="string">Path of the parameter can contain regexp</option>
	    <option name="value_type" type="string" default="string">Type of value for the parameter[string|numeric|list|json]</option>
	</optgroup>
	<optgroup>
	    <option name="required" type="flag">Is this parameter required for object compilation </option>
	    <option name="default" type="string">Default value </option>
	    <option name="description" type="string">Description</option>
	    <option name="schema" type="json">Schema for JSON parameters</option>
	    <option name="activation" type="string" conflicts="feature type">How the parameter gets activated, valid values are rebuild, reboot, dispatch(default)</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" trigger="archetype" path="archetype/%(archetype)s/parameter_definitions"/>
	<transport method="put" trigger="feature" path="feature/%(type)s/%(feature)s/parameter_definitions"/>
    </command>

    <command name="del_parameter_definition">
	Delete parameter definition for a given object.
	<optgroup mandatory="True">
	    <optgroup fields="one">
		<option name="archetype" type="string">Archetype</option>
		<optgroup fields="all">
		    <option name="feature" type="string">Feature</option>
		    <option name="type" type="string">Type of the feature: host, hardware or interface</option>
		</optgroup>
	    </optgroup>
	    <option name="path" type="string">Path of the parameter</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" trigger="archetype" path="archetype/%(archetype)s/parameter_definitions"/>
	<transport method="delete" trigger="feature" path="feature/%(type)s/%(feature)s/parameter_definitions"/>
    </command>

    <command name="update_parameter_definition">
	Update parameter definition for a given object.
	<optgroup mandatory="True">
	    <optgroup fields="one">
		<option name="archetype" type="string">Archetype</option>
		<optgroup fields="all">
		    <option name="feature" type="string">Feature</option>
		    <option name="type" type="string">Type of the feature: host, hardware or interface</option>
		</optgroup>
	    </optgroup>
	    <option name="path" type="string">Path of the parameter</option>
	</optgroup>
	<optgroup>
	    <option name="required" type="boolean">Is this parameter required for object compilation</option>
	    <option name="default" type="string">Default value</option>
	    <option name="clear_default" type="flag" conflicts="default">Clear the default value</option>
	    <option name="description" type="string">Description</option>
	    <option name="schema" type="json">Schema for JSON parameters</option>
	    <option name="clear_schema" type="flag">Clear existing JSON schema</option>
	    <option name="activation" type="string" conflicts="feature type">Update how the parameter gets activated, valid values are rebuild, reboot, dispatch</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" trigger="archetype" path="archetype/%(archetype)s/parameter_definitions"/>
	<transport method="post" trigger="feature" path="feature/%(type)s/%(feature)s/parameter_definitions"/>
    </command>

    <command name="show_parameter_definition">
	Display a given parameter definition configured for a object
	<p/>
	Supported options for --format: raw, csv.
	<p/>
	The 'csv' format contains the following fields, in this order:
	Definition Holder name, path, value type, default value, description, template, is_required
	<optgroup mandatory="True" fields="all">
	    <optgroup fields="one">
		<option name="archetype" type="string">Archetype</option>
		<optgroup fields="all">
		    <option name="feature" type="string">Feature</option>
		    <option name="type" type="string">Type of the feature: host, hardware or interface</option>
		</optgroup>
	    </optgroup>
	    <option name="path" type="string">Path of the parameter</option>
	</optgroup>
	<transport method="get" trigger="archetype" path="archetype/%(archetype)s/parameter_definitions"/>
	<transport method="get" trigger="feature" path="feature/%(type)s/%(feature)s/parameter_definitions"/>
	<format name="proto" >
	    <message_class name="ParamDefinitionList" module="aqdparamdefinitions_pb2"/>
	</format>
    </command>

    <command name="search_parameter_definition">
	Display all parameter definition configured for a object
	<p/>
	Supported options for --format: raw, csv.
	<p/>
	The 'csv' format contains the following fields, in this order:
	Definition Holder name, path, value type, default value, description, template, is_required
	<optgroup mandatory="True" fields="one">
	    <option name="archetype" type="string">Archetype</option>
	    <optgroup fields="all">
		<option name="feature" type="string">Feature</option>
		<option name="type" type="string">Type of the feature: host, hardware or interface</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="template" type="string" requires="archetype">Look for definitions belonging to the given template</option>
	</optgroup>
	<transport method="get" trigger="archetype" path="find/archetype/%(archetype)s/parameter_definitions"/>
	<transport method="get" trigger="feature" path="find/feature/%(type)s/%(feature)s/parameter_definitions"/>
	<format name="proto" >
	    <message_class name="ParamDefinitionList" module="aqdparamdefinitions_pb2"/>
	</format>
    </command>

    <command name="search_parameter">
	search a given path in personality or feature parameter
	<p/>
	Supported options for --format: raw.
	<optgroup mandatory="True" fields="all">
	    <optgroup fields="one">
		<option name="archetype" type="string">Archetype</option>
		<optgroup fields="all">
		    <option name="feature" type="string">Feature</option>
		    <option name="type" type="string">Type of the feature: host, hardware or interface</option>
		</optgroup>
	    </optgroup>
	    <option name="path" type="string">Path of the parameter</option>
	</optgroup>
	<transport method="get" path="find/parameter"/>
    </command>

    <command name="add_vlan">
	Add a new user vlan.
	<optgroup mandatory="True" fields="all">
	    <option name="vlan" type="int">VLAN</option>
	    <option name="name" type="string">VLAN name</option>
	    <option name="vlan_type" type="string">VLAN type</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="vlan/%(vlan)s/%(name)s"/>
    </command>

    <command name="del_vlan">
	Delete an vlan resource.
	<optgroup mandatory="True" fields="all">
	    <option name="vlan" type="int">VLAN</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="vlan/%(vlan)s"/>
    </command>

    <command name="show_vlan">
	Show a specified vlan or all vlans
	<optgroup mandatory="True" fields="one">
	    <option name="vlan" type="int">VLAN</option>
	    <option name="all" type="flag">list all hardware</option>
	</optgroup>
	<transport trigger="all" method="get" path="vlan"/>
	<transport trigger="vlan" method="get" path="vlan/%(vlan)s"/>
    </command>

    <command name="show_bunker_violations">
	Show bunker violations.
	<optgroup>
	    <option name="management_interfaces" type="boolean">Include management interfaces too</option>
	</optgroup>
	<transport method="get" path="bunker_violations"/>
    </command>

    <command name="grant_root_access">
	Grant root access to user/netgroup to a personality. The affected host(s) must be
	recompiled for the changes to take effect.
	<optgroup mandatory="True" fields="all">
	    <optgroup fields="one">
		<option name="username" type="string">User as string</option>
		<option name="netgroup" type="string">Netgroup as string from white listed netgroups</option>
	    </optgroup>
	    <option name="personality" type="string">Personality</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	</optgroup>
	<optgroup>
	    <option name="archetype" type="string">Archetype of the personality</option>
	    <option name="reason" type="string">String to be specified if justification='emergency'</option>
	</optgroup>
	<transport method="post" path="root_access/command/grant"/>
    </command>

    <command name="revoke_root_access">
	Revoke root access from a user/netgroup from a personality. The affected host(s) must be
	recompiled for the changes to take effect.
	<optgroup mandatory="True" fields="all">
	    <optgroup fields="one">
		<option name="username" type="string">User as string</option>
		<option name="netgroup" type="string">Netgroup as string from white listed netgroups</option>
	    </optgroup>
	    <option name="personality" type="string">Personality</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	</optgroup>
	<optgroup>
	    <option name="archetype" type="string">Archetype of the personality</option>
	    <option name="reason" type="string">String to be specified if justification='emergency'</option>
	</optgroup>
	<transport method="post" path="root_access/command/revoke"/>
    </command>

    <command name="add_netgroup_whitelist">
	Aquilon does not manage netgroup details but this command can be used to register that a netgroup may be supplied as an argument to the --netgroup option for applicable aquilon commands.
	<optgroup mandatory="True" fields="all">
	    <option name="netgroup" type="string">Netgroup as string</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="netgroup_whitelist/%(netgroup)s"/>
    </command>

    <command name="del_netgroup_whitelist">
	Aquilon does not manage netgroup details but this command can be used to remove a netgroup from the list of those available to be used in conjunction with certain aquilon commands."
	<optgroup mandatory="True" fields="all">
	    <option name="netgroup" type="string">Netgroup as string</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="netgroup_whitelist/%(netgroup)s"/>
    </command>

    <command name="show_netgroup_whitelist">
	Display whitelist of netgroups managed.
	<optgroup mandatory="True" fields="one">
	    <option name="netgroup" type="string">Netgroup to display</option>
	    <option name="all" type="flag">Show all Netgroups</option>
	</optgroup>
	<transport trigger="netgroup" method="get" path="netgroup_whitelist/%(netgroup)s"/>
	<transport trigger="all" method="get" path="netgroup_whitelist"/>
    </command>

    <command name="add_user">
	Add a new user.
	<optgroup mandatory="True" fields="all">
	    <option name="username" type="string">User name</option>
	    <optgroup>
		<option name="uid" type="int">Numeric user ID</option>
		<option name="autouid" type="flag">Allocate an UID automatically</option>
	    </optgroup>
	    <option name="gid" type="int">Numeric primary group ID</option>
	    <option name="full_name" type="string">Full name of the user</option>
	    <option name="home_directory" type="string">Home directory of the user</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="user/%(username)s"/>
    </command>

    <command name="del_user">
	Delete a user.
	<optgroup mandatory="True" fields="all">
	    <option name="username" type="string">User name</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="user/%(username)s"/>
    </command>

    <command name="update_user">
	Update parameters of a user.
	<optgroup mandatory="True" fields="all">
	    <option name="username" type="string">User name</option>
	</optgroup>
	<optgroup>
	    <option name="uid" type="int">Numeric user ID</option>
	    <option name="gid" type="int">Numeric primary group ID</option>
	    <option name="full_name" type="string">Full name of the user</option>
	    <option name="home_directory" type="string">Home directory of the user</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="user/%(username)s"/>
    </command>

    <command name="show_user">
	Show the user for a given username.
	<optgroup mandatory="True" fields="one">
	    <option name="username" type="string">User to check</option>
	    <option name="all" type="flag">list all users</option>
	</optgroup>
	<transport trigger="username" method="get" path="user/%(username)s"/>
	<transport trigger="all" method="get" path="user"/>
    </command>

    <command name="refresh_user">
	Refresh the User principals in AQD.
	<optgroup>
	    <option name="incremental" type="boolean">Commit every change as it is decided</option>
	    <option name="ignore_delete_limit" type="boolean">Allow deleting any number of users</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="command/refresh_user"/>
    </command>

    <command name="add_virtual_switch">
	Add a new virtual switch.
	<optgroup mandatory="True" fields="all">
	    <option name="virtual_switch" type="string">Name of the virtual switch</option>
	</optgroup>
	<optgroup>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="virtual_switch/%(virtual_switch)s"/>
    </command>

    <command name="del_virtual_switch">
	Delete a virtual switch.
	<optgroup mandatory="True" fields="all">
	    <option name="virtual_switch" type="string">Name of the virtual switch</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="virtual_switch/%(virtual_switch)s"/>
    </command>

    <command name="show_virtual_switch">
	Display a virtual switch.
	<optgroup mandatory="True" fields="one">
	    <option name="virtual_switch" type="string" conflicts="all">Name of the virtual switch</option>
	    <option name="all" type="flag" conflicts="virtual_switch">Show all virtual switches</option>
	</optgroup>
	<format name="proto">
	    <message_class name="VirtualSwitchList" module="aqdsystems_pb2"/>
	</format>
	<transport trigger="virtual_switch" method="get" path="virtual_switch/%(virtual_switch)s"/>
	<transport trigger="all" method="get" path="virtual_switch"/>
    </command>

    <command name="update_virtual_switch">
	Update a virtual switch.
	<optgroup mandatory="True" fields="all">
	    <option name="virtual_switch" type="string">Name of the virtual switch</option>
	</optgroup>
	<optgroup>
	    <option name="comments" type="string">Comments</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="virtual_switch/%(virtual_switch)s"/>
    </command>

    <command name="bind_port_group">
	Bind a port group to a virtual switch.
	<optgroup mandatory="True" fields="all">
	    <option name="virtual_switch" type="string">Name of the virtual switch</option>
	    <option name="networkip" type="ipv4">IP address of the network</option>
	</optgroup>
	<optgroup>
	    <option name="tag" type="int">VLAN/VxLAN/etc. tag used for the network</option>
	    <option name="type" type="string">Type of the port group</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="virtual_switch/%(virtual_switch)s/port_group/%(networkip)s"/>
    </command>

    <command name="unbind_port_group">
	Unbind a port group from a virtual switch.
	<optgroup mandatory="True" fields="all">
	    <option name="virtual_switch" type="string">Name of the virtual switch</option>
	    <optgroup>
		<option name="networkip" type="ipv4">IP address of the network</option>
		<option name="tag" type="int">VLAN/VxLAN/etc. tag used for the network</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="virtual_switch/%(virtual_switch)s/port_group"/>
    </command>

    <command name="promote">
	Promote the next stage of a personality to current.
	<optgroup mandatory="True" fields="all">
	    <option name="personality" type="string">Name of the personality to promote</option>
	    <option name="archetype" type="string">Which archetype the personality belongs to</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="personality/archetype/%(archetype)s/personality/%(personality)s/command/promote"/>
    </command>

    <command name="add_building_preference">
	Add a preference that will be used in determining the default hot-side of clusters
	based on building code.  May also be used to configure a cluster-level override.
	<optgroup mandatory="True" fields="all">
	    <option name="building_pair" type="string">
		Indicates that this is a building-level preference and provides a
		comma-separated list of building codes identifying which buildings the cluster
		nodes should reside in for the rule to apply, e.g. aa,bb
	    </option>
	    <option name="archetype" type="string">Cluster archetype the preference applies to</option>
	</optgroup>
	<optgroup mandatory="True" fields="one">
	    <option name="prefer" type="string">
		Building code that should be preferred
	    </option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="building_preference/%(building_pair)s"/>
    </command>

    <command name="update_building_preference">
	Update a preference that will be used in determining the default hot-side of clusters
	based on building code, or update a cluster-level override.
	<optgroup mandatory="True" fields="all">
	    <option name="building_pair" type="string">
		Indicates that this is a building-level preference and provides a
		comma-separated list of building codes identifying which rule to update,
		e.g. aa,bb
	    </option>
	    <option name="archetype" type="string">Cluster archetype the preference applies to</option>
	</optgroup>
	<optgroup>
	    <option name="prefer" type="string">Building code that should be preferred</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="building_preference/%(building_pair)s"/>
    </command>

    <command name="show_building_preference">
	Show preferences that are used in determining the default hot-side of clusters
	based on building code, and show cluster-level overrides.
	<optgroup mandatory="True" fields="one">
	    <optgroup fields="all">
		<option name="building_pair" type="string">
		    Display preferences that apply to a building combination provided as
		    comma-separated building codes, e.g. aa,bb
		</option>
		<option name="archetype" type="string">Cluster archetype the preference applies to</option>
	    </optgroup>
	    <option name="all" type="flag">
		Display all preferences
	    </option>
	</optgroup>
	<transport method="get" path="building_preference/%(building_pair)s"/>
	<transport trigger="all" method="get" path="building_preference"/>
	<format name="proto">
	    <message_class name="LocationPreferenceList" module="aqdsystems_pb2"/>
	</format>
    </command>

    <command name="search_building_preference">
	Searches for preferences that are used in determining the default hot-side of clusters
	based on building code.
	<optgroup mandatory="True">
	    <option name="building_pair" type="string">Find preference rules for the given building pair</option>
	    <option name="building" type="string">Find preference rules involving the given building</option>
	    <option name="prefer" type="string">
		Find preference rules for building pairs where the given building code is
		preferred
	    </option>
	    <option name="archetype" type="string">Cluster archetype the preference applies to</option>
	</optgroup>
	<optgroup>
	    <option name="fullinfo" type="flag">Show full information</option>
	</optgroup>
	<transport method="get" path="find/building_preference"/>
    </command>

    <command name="del_building_preference">
	Delete preferences that are used in determining the default hot-side of clusters
	based on building code, or delete cluster-level overrides.
	<optgroup mandatory="True" fields="all">
	    <option name="building_pair" type="string">
		Removes a building-level preference, this is a comma-separated list of building
		codes that match a single rule to remove, e.g. aa,bb
	    </option>
	    <option name="archetype" type="string">Cluster archetype the preference applies to</option>
	</optgroup>
	<optgroup>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="building_preference/%(building_pair)s"/>
    </command>

    <command name="add_cluster_autostartlist">
	Add a specific host to the list of those on which some or all service groups on
	the cluster will be automatically started when the cluster is first formed.
	This will override any building or cluster-level preferences set by 'aq add
	building preference'.
	<optgroup mandatory="True" fields="all">
	    <option name="cluster" type="string">Cluster</option>
	    <option name="member" type="string">Host name</option>
	    <option name="order" type="int">
Order that this host should appear in the list, which is used to determine
the system on which to bring the service group online, where lower numbers
appear earlier
	    </option>
	</optgroup>
	<optgroup>
	    <option name="resourcegroup" type="string">
		Will be added only to the named resourcegroup, instead of the cluster default
	    </option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="cluster/%(cluster)s/autostartlist"/>
    </command>

    <command name="update_cluster_autostartlist">
	Update the order of a host in the autostart list for a given cluster.
	<optgroup mandatory="True" fields="all">
	    <option name="cluster" type="string">Cluster</option>
	    <option name="member" type="string">Host name</option>
	</optgroup>
	<optgroup>
	    <option name="resourcegroup" type="string">
		Update only the named resourcegroup, instead of the cluster default
	    </option>
	    <option name="order" type="int">New order</option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="cluster/%(cluster)s/autostartlist"/>
    </command>

    <command name="del_cluster_autostartlist">
	Remove a host from the autostart list for a given cluster, or if no host is
	given, all autostart list entries for the cluster.
	<optgroup mandatory="True" fields="all">
	    <option name="cluster" type="string">Cluster</option>
	    <optgroup fields="one">
		<option name="member" type="string">Host name to remove</option>
		<option name="all" type="flag">Remove all entries</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="resourcegroup" type="string">
		Update only the named resourcegroup, instead of the cluster default
	    </option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="cluster/%(cluster)s/autostartlist"/>
	<transport method="delete" trigger="all" path="cluster/%(cluster)s/autostartlist/all"/>
    </command>

    <command name="add_cluster_systemlist">
	Add a specific host to the list of those on which some or all service groups on
	the cluster may run.  This will override any building or cluster-level
	preferences set by 'aq add building preference'.
	<optgroup mandatory="True" fields="all">
	    <option name="cluster" type="string">Cluster</option>
	    <option name="member" type="string">Host name</option>
	    <option name="priority" type="int">
		Priority for failover target where hosts with lower numbers are preferred over
		those with higher numbers when assessing a failover target
	    </option>
	</optgroup>
	<optgroup>
	    <option name="resourcegroup" type="string">
		Will be added only to the named resourcegroup, instead of all resourcegroups
		in the cluster
	    </option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="put" path="cluster/%(cluster)s/systemlist"/>
    </command>

    <command name="update_cluster_systemlist">
	Update the priority of a host in the system list for a given cluster.
	<optgroup mandatory="True" fields="all">
	    <option name="cluster" type="string">Cluster</option>
	    <option name="member" type="string">Host name</option>
	</optgroup>
	<optgroup>
	    <option name="priority" type="int">New priority</option>
	    <option name="resourcegroup" type="string">
		Update only the named resourcegroup, instead of all resourcegroups in the
		cluster
	    </option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="post" path="cluster/%(cluster)s/systemlist"/>
    </command>

    <command name="del_cluster_systemlist">
	Remove a host from the system list for a given cluster, or if no host is given,
	all system list entries for the cluster.
	<optgroup mandatory="True" fields="all">
	    <option name="cluster" type="string">Cluster</option>
	    <optgroup fields="one">
		<option name="member" type="string">Host name to remove</option>
		<option name="all" type="flag">Remove all entries</option>
	    </optgroup>
	</optgroup>
	<optgroup>
	    <option name="resourcegroup" type="string">
		Update only the named resourcegroup, instead of all resourcegroups in the
		cluster
	    </option>
	    <option name="justification" type="string">Authorization tokens (e.g. TCM number or "emergency") to validate the request</option>
	    <option name="reason" type="string">Human readable description of why the operation was performed</option>
	</optgroup>
	<transport method="delete" path="cluster/%(cluster)s/systemlist"/>
	<transport method="delete" trigger="all" path="cluster/%(cluster)s/systemlist/all"/>
    </command>

</commandline>
<!-- vim: set ai sw=4: -->
